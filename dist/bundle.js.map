{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/dot.ts","webpack:///./src/game-mode.ts","webpack:///./src/game.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.NETWORK;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum Dot {\r\n    EMPTY = 'black',\r\n    RED = 'red',\r\n    GREEN = 'greenyellow'\r\n}","export enum GameMode {\r\n    SAME_PC = 1,\r\n    NETWORK = 2\r\n}","import { GameMode } from './game-mode';\r\nimport { Dot } from './dot';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    // Network game state\r\n    private socket: WebSocket;\r\n    private playerColor: Dot;\r\n    private gameId: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        } else if (this.mode === GameMode.NETWORK) {\r\n            let playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            if (this.playerColor === Dot.RED) {\r\n                this.playerRed = playerName;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                this.playerGreen = playerName;\r\n            }\r\n        }\r\n\r\n        // Print player names on screen\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.addEventListener('click', this.landDot, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private moveDot = (event) => {\r\n        this.clearUpper();\r\n\r\n        let position: Position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        \r\n        this.context.fillStyle = this.turn;\r\n\r\n        this.paintDotToDrop(column);\r\n    };\r\n\r\n    private landDot = (event) => {\r\n        let position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.EMPTY) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.EMPTY) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 Dots\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Dot.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                // Clear game data\r\n                localStorage.clear();\r\n\r\n                this.cleanUpEvents();\r\n                this.stopTimer();\r\n                this.clearPlayerNames();\r\n\r\n                // Run delegate function to return to main menu, in case it is defined\r\n                if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n                    setTimeout(this.onGameEnd, 3000);\r\n                }\r\n            }\r\n            \r\n            // Switches turn\r\n            if (this.turn === Dot.RED) {\r\n                this.turn = Dot.GREEN;\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.turn = Dot.RED;\r\n            }\r\n\r\n            this.context.fillStyle = this.turn;\r\n\r\n            this.paintDotToDrop(column);\r\n\r\n        }\r\n    };\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = () => {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.NETWORK) {\r\n            // add logic for confirmation box before closing\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            clearInterval(this.timerInterval);\r\n        } else {\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.removeEventListener('click', this.landDot, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.RED) {\r\n            this.turn = Dot.RED;\r\n        } else if (nextTurn === Dot.GREEN) {\r\n            this.turn = Dot.GREEN;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        }\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        if (this.mode === GameMode.NETWORK) {\r\n            this.socket = new WebSocket('ws://localhost:443/');\r\n\r\n            this.socket.onmessage = this.socketMessage;\r\n            // define event handler for ServerSent event\r\n        }\r\n    }\r\n\r\n    private socketMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.playerColor) {\r\n            this.playerColor = messageData.color;\r\n            this.setUpPlayerNames();\r\n        }\r\n\r\n        if (!this.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.column) {\r\n            //drop dot logic for other player. to reorganise and call existing code\r\n        }\r\n    };\r\n\r\n}\r\n\r\nclass Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","socketsBtn","creditsBtn","exitBtn","canvas","Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","RED","moveDot","event","clearUpper","position","getCursorPosition","column","Math","round","x","colGap","context","fillStyle","paintDotToDrop","landDot","row","EMPTY","r","rows","beginPath","arc","rowGap","circleRadius","PI","closePath","fill","checkDotCount","winner","playerRed","GREEN","playerGreen","classList","add","winMsg","timerSpan","innerText","alert","localStorage","clear","cleanUpEvents","stopTimer","clearPlayerNames","undefined","onGameEnd","setTimeout","beforeUnload","mode","SAME_PC","saveGame","NETWORK","timerCallback","secondsRunning","minutes","floor","seconds","pageVisibilityChange","document","hidden","clearInterval","timerInterval","setInterval","resizeCanvas","height","window","innerHeight","width","innerWidth","paintBoard","socketMessage","messageData","JSON","parse","data","playerColor","color","setUpPlayerNames","gameId","this","getElementById","getContext","col","playerRedSpan","playerGreenSpan","start","defineSocket","checkGameData","setGameEvents","setTimer","getItem","nextTurn","confirm","restoreLastGame","prompt","playerName","boardGradient","createLinearGradient","addColorStop","fillRect","y","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","stringify","parseInt","exit","remove","socket","WebSocket","onmessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","open"],"sourceRoot":""}