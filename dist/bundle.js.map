{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/enums/dot.ts","webpack:///./src/enums/game-mode.ts","webpack:///./src/game.ts","webpack:///./src/position.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.NETWORK;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum Dot {\r\n    EMPTY = 'black',\r\n    RED = 'red',\r\n    GREEN = 'greenyellow'\r\n}","export enum GameMode {\r\n    SAME_PC = 1,\r\n    NETWORK = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    // Network game state\r\n    private socket: WebSocket;\r\n    private playerColor: Dot;\r\n    private gameId: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        } else if (this.mode === GameMode.NETWORK && this.playerColor) { // This client's color should be defined\r\n            let playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            if (this.playerColor === Dot.RED) {\r\n                this.playerRed = playerName;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                this.playerGreen = playerName;\r\n            }\r\n        }\r\n\r\n        this.printPlayerNames();\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {//to-do: in network-mode, block mousemove until both players are connected\r\n        if (this.mode === GameMode.SAME_PC || this.turn === this.playerColor) {\r\n            let position: Position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.NETWORK && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {//to-do: in network-mode, block click until both players are connected\r\n        if (this.mode === GameMode.SAME_PC || this.turn === this.playerColor) {\r\n            let position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n\r\n            if (this.mode === GameMode.NETWORK && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.RED) {\r\n            this.turn = Dot.GREEN;\r\n        } else if (this.turn === Dot.GREEN) {\r\n            this.turn = Dot.RED;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.EMPTY) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.EMPTY) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 Dots\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Dot.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                this.closeGameByWinning();\r\n            }\r\n            \r\n            this.switchTurn();\r\n\r\n            this.context.fillStyle = this.turn;\r\n\r\n            this.paintDotToDrop(column);\r\n        }\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.NETWORK) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            clearInterval(this.timerInterval);\r\n        } else {\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.RED) {\r\n            this.turn = Dot.RED;\r\n        } else if (nextTurn === Dot.GREEN) {\r\n            this.turn = Dot.GREEN;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        }\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        if (this.mode === GameMode.NETWORK) {\r\n            this.socket = new WebSocket('ws://localhost:443/');\r\n\r\n            this.socket.onmessage = this.socketMessage;\r\n        }\r\n    }\r\n\r\n    private socketMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n            this.setUpPlayerNames();\r\n            let data = { name: null };\r\n            if (this.playerColor === Dot.RED) {\r\n                data.name = this.playerRed;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                data.name = this.playerGreen;\r\n            }\r\n            this.socket.send(JSON.stringify(data));\r\n        }\r\n\r\n        if (messageData.opponentName) {\r\n            if (this.playerColor === Dot.RED) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","socketsBtn","creditsBtn","exitBtn","canvas","Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","RED","canvasMousemove","event","mode","SAME_PC","playerColor","position","getCursorPosition","column","Math","round","x","colGap","moveDot","NETWORK","socket","data","action","send","JSON","stringify","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","pageVisibilityChange","document","hidden","clearInterval","timerInterval","setInterval","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","parse","color","setUpPlayerNames","name","playerRed","GREEN","playerGreen","opponentName","playerGreenSpan","playerRedSpan","gameId","message","alert","win","closeGameByWinning","this","getElementById","context","getContext","col","row","EMPTY","start","defineSocket","checkGameData","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","playerName","printPlayerNames","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","checkDotCount","winner","classList","add","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","onGameEnd","setTimeout","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","parseInt","exit","remove","WebSocket","onmessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","open"],"sourceRoot":""}