{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timeouts: Array<any> = [];\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    // Network game state\r\n    private socket: WebSocket;\r\n    private playerColor: Dot;\r\n    private gameId: number;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        this.initBoard();\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(canvasId, exitBtnId, timerId, playerRedId, playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    private initBoard() {\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        } else if (this.mode === GameMode.Network && this.playerColor) { // This client's color should be defined\r\n            let playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            if (this.playerColor === Dot.Red) {\r\n                this.playerRed = playerName;\r\n            } else if (this.playerColor === Dot.Green) {\r\n                this.playerGreen = playerName;\r\n            }\r\n        }\r\n\r\n        this.printPlayerNames();\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.turn === this.playerColor && this.opponentConnected())) {\r\n            let position: Position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.turn === this.playerColor && this.opponentConnected())) {\r\n            let position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (this.isBoardFull()) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timerSpan) {\r\n            winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.playerColor === this.turn) {\r\n                winMsg += 'You win!';\r\n            } else {\r\n                winMsg += 'You lose!';\r\n            }\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd !== undefined && this.onGameEnd !== null) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        if (this.mode !== GameMode.Network || this.opponentConnected()) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            let timeout = setTimeout(this.timerCallback, 1000);\r\n            this.timeouts.push(timeout);console.log(timeout);\r\n        } else {\r\n            Utils.clearTimeouts(this.timeouts);\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network) {\r\n            if (document.hidden) {\r\n                Utils.clearTimeouts(this.timeouts);\r\n            } else {\r\n                let timeout = setTimeout(this.timerCallback, 1000);\r\n                this.timeouts.push(timeout);\r\n            }\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network && this.socket) {\r\n                this.socket.close();\r\n                this.socket = null;\r\n            }\r\n            this.onGameEnd();\r\n            this.stopTimer();\r\n            this.clearPlayerNames();\r\n            this.resetValues();\r\n        }\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timeouts.length > 0) {\r\n            Utils.clearTimeouts(this.timeouts);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        if (this.mode === GameMode.Network) {\r\n            let url: string;\r\n            if (Utils.isLocal()) {\r\n                url = 'ws://localhost:443/';\r\n            } else {\r\n                //to set url to deployed location\r\n            }\r\n\r\n            this.socket = new WebSocket(url);\r\n\r\n            this.socket.onmessage = this.socketMessage;\r\n            this.socket.onerror = this.socketError;\r\n        }\r\n    }\r\n\r\n    private socketMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n            this.setUpPlayerNames();\r\n            let data = { name: null };\r\n            if (this.playerColor === Dot.Red) {\r\n                data.name = this.playerRed;\r\n            } else if (this.playerColor === Dot.Green) {\r\n                data.name = this.playerGreen;\r\n            }\r\n            this.socket.send(JSON.stringify(data));\r\n        }\r\n\r\n        if (messageData.opponentName) {\r\n            if (this.playerColor === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.playerColor === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private socketError = (event) => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private isBoardFull(): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < Game.columns; col++) {\r\n            // Check upper row in every column\r\n            if (this.board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n\r\n    private resetValues() {\r\n        this.secondsRunning = 0;\r\n        this.turn = Dot.Red;\r\n        this.initBoard();\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static clearTimeouts(timeouts: Array<any>) {\r\n        for (let count: number = 0; count < timeouts.length; count++) {\r\n            clearTimeout(timeouts[count]);\r\n        }\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","Red","timeouts","canvasMousemove","event","mode","SamePC","playerColor","opponentConnected","position","getCursorPosition","column","Math","round","x","colGap","moveDot","Network","socket","data","action","send","JSON","stringify","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","classList","contains","Utils","clearTimeouts","timeout","setTimeout","push","console","log","pageVisibilityChange","document","hidden","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","parse","color","setUpPlayerNames","name","playerRed","Green","playerGreen","opponentName","playerGreenSpan","playerRedSpan","gameId","message","alert","win","closeGameByWinning","socketError","this","getElementById","context","getContext","initBoard","exitBtn","getInstance","instance","col","row","Empty","start","defineSocket","checkGameData","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","playerName","printPlayerNames","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","checkDotCount","winner","winDialog","isBoardFull","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","add","resetValues","onGameEnd","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","parseInt","exit","close","remove","length","url","isLocal","WebSocket","onmessage","onerror","full","location","protocol","hostname","clearTimeout","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}