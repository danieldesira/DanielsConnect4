{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","import { ConfirmationDialogOptions } from \"./confirmation-dialog-options\";\r\nimport { DialogOptions } from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\n\r\nexport class Dialog {\r\n    \r\n    private static modal(text: string, type: DialogType, options: DialogOptions = null) {\r\n        let modal = document.createElement('div') as HTMLDivElement;\r\n        modal.classList.add('dialog');\r\n\r\n        let textContainer = document.createElement('div') as HTMLDivElement;\r\n        textContainer.classList.add('text');\r\n        textContainer.classList.add('dialog-text');\r\n        textContainer.innerText = text;\r\n        modal.appendChild(textContainer);\r\n\r\n        let btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btns');\r\n        modal.appendChild(btnContainer);\r\n\r\n        switch (type) {\r\n            case DialogType.Confirmation: {\r\n                let o = options as ConfirmationDialogOptions;\r\n                this.appendBtn(btnContainer, 'Yes', () => {\r\n                    o.yesCallback();\r\n                    this.closeModal(modal);\r\n                });\r\n                this.appendBtn(btnContainer, 'No', () => {\r\n                    o.noCallback();\r\n                    this.closeModal(modal);\r\n                });\r\n                break;\r\n            }\r\n            case DialogType.Notification: {\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    this.closeModal(modal);\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement, text: string, callback: any) {\r\n        let btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = 'button';\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.addEventListener('click', callback);\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static closeModal(modal) {\r\n        document.body.removeChild(modal);\r\n    }\r\n\r\n    public static confirm(text: string, options: ConfirmationDialogOptions) {\r\n        Dialog.modal(text, DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(text: string) {\r\n        Dialog.modal(text, DialogType.Notification);\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1\r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\nimport { Dialog } from './dialog/dialog';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId);\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames(this.mode);\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event);\r\n    protected abstract canvasClick(event);\r\n\r\n    protected getColumnFromCursorPosition(event): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            let r: number;\r\n            for (r = BoardLogic.rows - 1; r >= 0; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, r);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                Dialog.notify(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: any;\r\n    private countdownSpan: any;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.endGameDueToInactivity && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            Dialog.notify('You win due to opponent inactivity!');\r\n            Utils.playSound(Sound.Win);\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.skipTurn && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            this.switchTurn();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit() {\r\n        Dialog.confirm('Network game in progress. Are you sure you want to quit?', {\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {}\r\n        });\r\n    }\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = ''; // Required by Chrome\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.playerNames && this.playerNames.bothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown;\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                this.socket.send({\r\n                    endGameDueToInactivity: true,\r\n                    currentTurn: playerColor\r\n                });\r\n\r\n                Dialog.notify('You lose due to inactivity!');\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                this.socket.send({\r\n                    skipTurn: true,\r\n                    currentTurn: playerColor\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > 30) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = 60;\r\n        this.turnCountDownInterval = setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = 60;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n    \r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    public printPlayerNames(mode: GameMode) {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.setRunnable(true);\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            Dialog.confirm('Do you want to continue playing the previous game?', {\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame\r\n            });\r\n        } else {\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        localStorage.clear();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.moveDot(column);\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.landDot(column);\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","modal","text","type","options","document","createElement","classList","add","textContainer","innerText","appendChild","btnContainer","DialogType","Confirmation","this","appendBtn","yesCallback","closeModal","noCallback","Notification","body","container","callback","btn","addEventListener","removeChild","confirm","Dialog","notify","GameMode","Sound","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","getElementById","canvasId","context","getContext","exitBtnId","exitBtn","timerId","timer","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","mode","indicateTurn","setGameEvents","set","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","winDialog","closeGameAfterWinning","message","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","resetValues","onGameEnd","setTimeout","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","exit","reset","onSocketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","setRunnable","color","getPlayerName","endGameDueToInactivity","isNaN","action","skipTurn","onSocketError","bothPlayersConnected","data","send","confirmExit","close","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","adaptCountDownColor","playerColor","Lose","Network","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","resetCountdown","remove","turnCountDownInterval","setInterval","clearInterval","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","playerRed","prompt","playerGreen","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","JSON","parse","setSecondsRunningFromLocalStorage","toString","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","name","onError","alert","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","errorMessageDiv","ex","showError","open"],"sourceRoot":""}