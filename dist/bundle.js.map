{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Socket } from './socket';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    private socket: Socket;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        this.initBoard();\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(canvasId, exitBtnId, timerId, playerRedId, playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    private initBoard() {\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.checkGameData();\r\n            this.setUpPlayerNames();\r\n        } else if (this.mode === GameMode.Network) {\r\n            this.defineSocket();\r\n        }\r\n        \r\n        this.printPlayerNames();\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position: Position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (this.isBoardFull()) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound('./sounds/land-dot.m4a');\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timerSpan) {\r\n            winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.socket.getPlayerColor() === this.turn) {\r\n                winMsg += 'You win!';\r\n            } else {\r\n                winMsg += 'You lose!';\r\n            }\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            // Clear game data\r\n            localStorage.clear();\r\n        }\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        if (this.mode !== GameMode.Network || this.opponentConnected()) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network) {\r\n            if (document.hidden) {\r\n                clearTimeout(this.timeout);\r\n            } else {\r\n                this.timeout = setTimeout(this.timerCallback, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network) {\r\n                this.socket.close();\r\n            }\r\n            this.onGameEnd();\r\n            this.stopTimer();\r\n            this.clearPlayerNames();\r\n            this.resetValues();\r\n        }\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerRed = this.socket.getPlayerName();\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerGreen = this.socket.getPlayerName();\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private isBoardFull(): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < Game.columns; col++) {\r\n            // Check upper row in every column\r\n            if (this.board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n\r\n    private resetValues() {\r\n        this.secondsRunning = 0;\r\n        this.turn = Dot.Red;\r\n        this.initBoard();\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    public constructor() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:443/';\r\n        } else {\r\n            //to set url to deployed location\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.close();\r\n        this.webSocket = null;\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","Red","canvasMousemove","event","mode","SamePC","socket","getPlayerColor","opponentConnected","position","Position","getCursorPosition","canvas","column","Math","round","x","colGap","moveDot","Network","data","action","send","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","classList","contains","clearTimeout","timeout","setTimeout","pageVisibilityChange","document","hidden","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","opponentName","playerGreen","playerGreenSpan","Green","playerRed","playerRedSpan","color","getPlayerName","win","closeGameByWinning","isNaN","this","getElementById","context","getContext","initBoard","exitBtn","getInstance","instance","col","row","Empty","start","checkGameData","setUpPlayerNames","defineSocket","printPlayerNames","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","checkDotCount","winner","winDialog","isBoardFull","alert","Utils","playSound","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","add","resetValues","onGameEnd","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","JSON","stringify","parse","parseInt","exit","close","remove","Socket","onMessageCallback","full","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","url","onMessage","gameId","message","playerColor","playerName","name","onError","isLocal","webSocket","WebSocket","onmessage","onerror","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}