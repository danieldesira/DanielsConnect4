{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","import { ConfirmationDialogOptions } from \"./confirmation-dialog-options\";\r\nimport { DialogOptions } from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport { PromptDialogOptions } from \"./prompt-dialog-options\";\r\nimport { PromptInput } from \"./PromptInput\";\r\n\r\nexport class Dialog {\r\n    \r\n    private static modal(text: string, type: DialogType, options: DialogOptions = null) {\r\n        let modal = document.createElement('div') as HTMLDivElement;\r\n        modal.classList.add('dialog');\r\n\r\n        let textContainer = document.createElement('div') as HTMLDivElement;\r\n        textContainer.classList.add('text');\r\n        textContainer.classList.add('dialog-text');\r\n        textContainer.innerText = text;\r\n        modal.appendChild(textContainer);\r\n\r\n        let btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btns');\r\n        modal.appendChild(btnContainer);\r\n\r\n        switch (type) {\r\n            case DialogType.Confirmation: {\r\n                let o = options as ConfirmationDialogOptions;\r\n                this.appendBtn(btnContainer, 'Yes', () => {\r\n                    o.yesCallback();\r\n                    this.closeModal(modal);\r\n                });\r\n                this.appendBtn(btnContainer, 'No', () => {\r\n                    o.noCallback();\r\n                    this.closeModal(modal);\r\n                });\r\n                break;\r\n            }\r\n            case DialogType.Notification: {\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    this.closeModal(modal);\r\n                });\r\n                break;\r\n            }\r\n            case DialogType.Prompt: {\r\n                let o = options as PromptDialogOptions;\r\n                this.appendInputs(modal, o.inputs);\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    let error: string = o.onOK();\r\n                    if (error) {\r\n                        this.appendError(modal, error);\r\n                    } else {\r\n                        this.closeModal(modal);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement, text: string, callback: any) {\r\n        let btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = 'button';\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.addEventListener('click', callback);\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendInputs(modal: HTMLDivElement, inputs: Array<PromptInput>) {\r\n        let inputContainer = document.createElement('div') as HTMLDivElement;\r\n        for (let i: number = 0; i < inputs.length; i++) {\r\n            let label = document.createElement('label') as HTMLLabelElement;\r\n            label.innerText = inputs[i].name;\r\n            label.classList.add('text');\r\n            inputContainer.appendChild(label);\r\n\r\n            let input = document.createElement('input') as HTMLInputElement;\r\n            input.type = inputs[i].type;\r\n            input.id = inputs[i].name;\r\n            input.name = inputs[i].name;\r\n            inputContainer.appendChild(input);\r\n\r\n            let br = document.createElement('br') as HTMLBRElement;\r\n            inputContainer.appendChild(br);\r\n        }\r\n        modal.appendChild(inputContainer);\r\n    }\r\n\r\n    private static appendError(container: HTMLDivElement, text: string) {\r\n        let errorSpan = document.createElement('span') as HTMLSpanElement;\r\n        errorSpan.classList.add('red-text');\r\n        errorSpan.classList.add('text');\r\n        errorSpan.innerText = text;\r\n        container.appendChild(errorSpan);\r\n    }\r\n\r\n    private static closeModal(modal) {\r\n        document.body.removeChild(modal);\r\n    }\r\n\r\n    public static confirm(text: string, options: ConfirmationDialogOptions) {\r\n        Dialog.modal(text, DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(text: string) {\r\n        Dialog.modal(text, DialogType.Notification);\r\n    }\r\n\r\n    public static prompt(text: string, options: PromptDialogOptions) {\r\n        Dialog.modal(text, DialogType.Prompt, options);\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2\r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\nimport { Dialog } from './dialog/dialog';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames();\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event): void;\r\n    protected abstract canvasClick(event): void;\r\n\r\n    protected getColumnFromCursorPosition(event): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            let r: number;\r\n            for (r = BoardLogic.rows - 1; r >= 0; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, r);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                Dialog.notify(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n    private countdownSpan: HTMLSpanElement;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.endGameDueToInactivity && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            Dialog.notify('You win due to opponent inactivity!');\r\n            Utils.playSound(Sound.Win);\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.skipTurn && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            this.switchTurn();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit() {\r\n        Dialog.confirm('Network game in progress. Are you sure you want to quit?', {\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {}\r\n        });\r\n    }\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = ''; // Required by Chrome\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.playerNames && this.playerNames.bothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                this.socket.send({\r\n                    endGameDueToInactivity: true,\r\n                    currentTurn: playerColor\r\n                });\r\n\r\n                Dialog.notify('You lose due to inactivity!');\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                this.socket.send({\r\n                    skipTurn: true,\r\n                    currentTurn: playerColor\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > 30) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = 60;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = 60;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n    \r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            Dialog.prompt('Please enter player names!', {\r\n                onOK: this.onPromptOK,\r\n                inputs: [\r\n                    {\r\n                        name: 'red',\r\n                        type: 'text'\r\n                    },\r\n                    {\r\n                        name: 'green',\r\n                        type: 'text'\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    private onPromptOK = (): string => {\r\n        let redInput = document.getElementById('red') as HTMLInputElement;\r\n        let greenInput = document.getElementById('green') as HTMLInputElement;\r\n        if (redInput && greenInput) {\r\n            if (redInput.value && greenInput.value && redInput.value.trim() && greenInput.value.trim()) {\r\n                this.playerRed = redInput.value;\r\n                this.playerGreen = greenInput.value;\r\n                this.printPlayerNames();\r\n                return null;\r\n            } else {\r\n                return 'No empty fields allowed!';\r\n            }\r\n        }\r\n    };\r\n\r\n    public printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (!this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (!this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.setRunnable(true);\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            Dialog.confirm('Do you want to continue playing the previous game?', {\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame\r\n            });\r\n        } else {\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        localStorage.clear();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.moveDot(column);\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.landDot(column);\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.notify('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: number;\r\n    private timerSpan: HTMLSpanElement;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu') as HTMLDivElement;\r\nlet samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nlet socketsBtn = document.getElementById('sockets') as HTMLButtonElement;\r\nlet creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\n\r\nlet exitBtn = document.getElementById('exitBtn') as HTMLButtonElement;\r\n\r\nlet canvas = document.getElementById('board') as HTMLCanvasElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","modal","text","type","options","document","createElement","classList","add","textContainer","innerText","appendChild","btnContainer","DialogType","Confirmation","this","appendBtn","yesCallback","closeModal","noCallback","Notification","Prompt","appendInputs","inputs","error","onOK","appendError","body","container","callback","btn","addEventListener","inputContainer","i","length","label","name","input","id","br","errorSpan","removeChild","confirm","Dialog","notify","prompt","GameMode","Sound","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","getElementById","canvasId","context","getContext","exitBtnId","exitBtn","timerId","timer","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","indicateTurn","setGameEvents","set","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","winDialog","closeGameAfterWinning","message","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","resetValues","onGameEnd","setTimeout","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","exit","reset","onSocketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","setRunnable","color","getPlayerName","endGameDueToInactivity","isNaN","action","skipTurn","onSocketError","bothPlayersConnected","data","send","confirmExit","close","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","toString","adaptCountDownColor","playerColor","Lose","mode","Network","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","resetCountdown","remove","turnCountDownInterval","setInterval","clearInterval","onPromptOK","redInput","greenInput","value","trim","playerRed","playerGreen","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","JSON","parse","setSecondsRunningFromLocalStorage","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","errorMessageDiv","ex","showError","open"],"sourceRoot":""}