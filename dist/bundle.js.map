{"version":3,"file":"bundle.js","mappings":"uBAGIA,EAHJ,EACA,EAIIC,EACAC,EAEAC,EAEAC,E,eCVJ,IAAYC,E,oEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAChB,sB,+ECDJ,aACA,QAEA,aAyBI,WAAYC,EACAC,EACAC,EACAC,EACAC,QAHA,IAAAH,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,MAJZ,WAlBQ,KAAAC,MAA4B,IAAIC,MAAMC,EAAKC,SAO3C,KAAAC,KAAa,EAAAC,KAAKC,IAqIlB,KAAAC,QAAU,SAACC,GACf,EAAKC,aAEL,IAAIC,EAAqB,EAAKC,kBAAkBH,GAC5CI,EAASC,KAAKC,MAAMJ,EAASK,EAAI,IAAM,IAEvC,EAAKX,MAAQ,EAAAC,KAAKC,IAClB,EAAKU,QAAQC,UAAY,MAClB,EAAKb,MAAQ,EAAAC,KAAKa,QACzB,EAAKF,QAAQC,UAAY,eAG7B,EAAKD,QAAQG,YACb,EAAKH,QAAQI,IAAI,GAAc,IAATR,EAAc,GAAI,GAAI,EAAG,EAAIC,KAAKQ,IACxD,EAAKL,QAAQM,YACb,EAAKN,QAAQO,MACjB,EAEQ,KAAAC,QAAU,SAAChB,GACf,IAEIiB,EAFAf,EAAW,EAAKC,kBAAkBH,GAClCI,EAASC,KAAKC,OAAOJ,EAASK,EAAI,IAAM,KAG5C,GAA8B,IAA1B,EAAKf,MAAMY,GAAQ,GAAU,CAG7B,IAAK,IAAIc,EAAIxB,EAAKyB,KAAO,EAAGD,GAAK,EAAGA,IAChC,GAA8B,IAA1B,EAAK1B,MAAMY,GAAQc,GAAU,CAC7B,EAAK1B,MAAMY,GAAQc,GAAK,EAAKtB,KAC7BqB,EAAMC,EACN,K,CAmBR,GAfI,EAAKtB,OAAS,EAAAC,KAAKC,IACnB,EAAKU,QAAQC,UAAY,MAClB,EAAKb,OAAS,EAAAC,KAAKa,QAC1B,EAAKF,QAAQC,UAAY,eAI7B,EAAKD,QAAQG,YACb,EAAKH,QAAQI,IAAI,GAAc,IAATR,EAAc,IAAU,IAAJc,EAAS,GAAI,EAAa,EAAVb,KAAKQ,IAC/D,EAAKL,QAAQM,YACb,EAAKN,QAAQO,OAEE,EAAKK,eAAehB,EAAQa,GAG5B,EAAG,CACd,IAAII,EAAiB,GACjB,EAAKzB,OAAS,EAAAC,KAAKC,IACnBuB,EAAS,EAAKC,UAAY,SACnB,EAAK1B,OAAS,EAAAC,KAAKa,QAC1BW,EAAS,EAAKE,YAAc,YAG5B,EAAKvC,SACL,EAAKA,QAAQwC,UAAUC,IAAI,QAG/B,IAAIC,EAAiBL,EAAS,SAC1B,EAAKM,YACLD,GAAU,iBAAmB,EAAKC,UAAUC,WAEhDC,MAAMH,GAGNI,aAAaC,QAEb,EAAKC,gBACL,EAAKC,YACL,EAAKC,wBAGkBC,IAAnB,EAAKC,WAA8C,OAAnB,EAAKA,WACrCC,WAAW,EAAKD,UAAW,I,CAK/B,EAAKxC,OAAS,EAAAC,KAAKC,IACnB,EAAKF,KAAO,EAAAC,KAAKa,MACV,EAAKd,OAAS,EAAAC,KAAKa,QAC1B,EAAKd,KAAO,EAAAC,KAAKC,I,CAI7B,EAEQ,KAAAwC,aAAe,WACnB,EAAKC,UACT,EAEQ,KAAAC,cAAgB,WACpB,EAAKC,iBACL,IAAIC,EAAkBrC,KAAKsC,MAAM,EAAKF,eAAiB,IACnDG,EAAkB,EAAKH,eAAiB,GAC5C,EAAKd,UAAUC,UAAYc,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,CAC3E,EAxNIC,KAAK5D,OAAS6D,SAASC,eAAe5D,GACtC0D,KAAKrC,QAAUqC,KAAK5D,OAAO+D,WAAW,MAGtC,IAAK,IAAIC,EAAM,EAAGA,EAAMvD,EAAKC,QAASsD,IAAO,CACzCJ,KAAKrD,MAAMyD,GAAO,IAAIxD,MAAMC,EAAKyB,MACjC,IAAK,IAAIF,EAAM,EAAGA,EAAMvB,EAAKyB,KAAMF,IAC/B4B,KAAKrD,MAAMyD,GAAKhC,GAAO,EAAApB,KAAKqD,K,CAIlB,OAAd9D,IACAyD,KAAK7D,QAAU8D,SAASC,eAAe3D,IAG3B,OAAZC,IACAwD,KAAKlB,UAAYmB,SAASC,eAAe1D,GACzCwD,KAAKJ,eAAiB,GAGN,OAAhBnD,IACAuD,KAAKM,cAAgBL,SAASC,eAAezD,IAG3B,OAAlBC,IACAsD,KAAKO,gBAAkBN,SAASC,eAAexD,GAEvD,CA2TJ,OAzTW,YAAA8D,MAAP,WACIR,KAAKS,gBACLT,KAAKU,mBACLV,KAAKW,aACLX,KAAKY,gBACLZ,KAAKa,UACT,EAEQ,YAAAJ,cAAR,WACI,GAAIT,KAAKc,OAAS,EAAAzE,SAAS0E,QAAS,CAChC,IAAIpE,EAAQsC,aAAa+B,QAAQ,SAC7BC,EAAWhC,aAAa+B,QAAQ,YAEhCrE,GAASsE,IACKC,QAAQ,gEAElBlB,KAAKmB,kBAELlC,aAAaC,Q,CAI7B,EAEQ,YAAAwB,iBAAR,WACQV,KAAKc,OAAS,EAAAzE,SAAS0E,UAClB9B,aAAa+B,QAAQ,cAAiB/B,aAAa+B,QAAQ,iBAC5DhB,KAAKvB,UAAY2C,OAAO,qCACxBpB,KAAKtB,YAAc0C,OAAO,yCAK9BpB,KAAKO,kBACLP,KAAKO,gBAAgBxB,UAAYiB,KAAKtB,aAEtCsB,KAAKM,gBACLN,KAAKM,cAAcvB,UAAYiB,KAAKvB,UAE5C,EAEQ,YAAAkC,WAAR,WACI,IAAIU,EAAgBrB,KAAKrC,QAAQ2D,qBAAqB,EAAG,EAAGtB,KAAK5D,OAAOmF,MAAO,GAC/EF,EAAcG,aAAa,EAAG,QAC9BH,EAAcG,aAAa,EAAG,QAC9BxB,KAAKrC,QAAQC,UAAYyD,EACzBrB,KAAKrC,QAAQ8D,SAAS,EAAG,GAAIzB,KAAK5D,OAAOmF,MAAOvB,KAAK5D,OAAOsF,QAE5D,IAAK,IAAItB,EAAMvD,EAAKC,QAAU,EAAGsD,GAAO,EAAGA,IACvC,IAAK,IAAIhC,EAAMvB,EAAKyB,KAAO,EAAGF,GAAO,EAAGA,IAChC4B,KAAKrD,MAAMyD,GAAKhC,KAAS,EAAApB,KAAKC,IAC9B+C,KAAKrC,QAAQC,UAAY,MAClBoC,KAAKrD,MAAMyD,GAAKhC,KAAS,EAAApB,KAAKa,MACrCmC,KAAKrC,QAAQC,UAAY,cAEzBoC,KAAKrC,QAAQC,UAAY,QAG7BoC,KAAKrC,QAAQG,YACbkC,KAAKrC,QAAQI,IAAI,GAAW,IAANqC,EAAW,IAAY,IAANhC,EAAW,GAAI,EAAG,EAAIZ,KAAKQ,IAClEgC,KAAKrC,QAAQM,YACb+B,KAAKrC,QAAQO,MAGzB,EAEQ,YAAAZ,kBAAR,SAA0BH,GACtB,IAAIO,EACAiE,EAWJ,YAVoBrC,IAAhBnC,EAAMyE,YAAuCtC,IAAhBnC,EAAM0E,OACnCnE,EAAIP,EAAMyE,MACVD,EAAIxE,EAAM0E,QAGVnE,EAAIP,EAAM2E,QAAU7B,SAAS8B,KAAKC,WAAa/B,SAASgC,gBAAgBD,WACxEL,EAAIxE,EAAM+E,QAAUjC,SAAS8B,KAAKI,UAAYlC,SAASgC,gBAAgBE,WAE3EzE,GAAKsC,KAAK5D,OAAOgG,WACjBT,GAAK3B,KAAK5D,OAAOiG,UACV,IAAIC,EAAS5E,EAAGiE,EAC3B,EAEQ,YAAAf,cAAR,WACIZ,KAAK5D,OAAOmG,iBAAiB,YAAavC,KAAK9C,SAAS,GACxD8C,KAAK5D,OAAOmG,iBAAiB,QAASvC,KAAK7B,SAAS,GACpDqE,OAAOD,iBAAiB,eAAgBvC,KAAKP,aACjD,EAuGQ,YAAArC,WAAR,WACI4C,KAAKrC,QAAQ8E,UAAU,EAAG,EAAGzC,KAAK5D,OAAOmF,MAAO,GACpD,EAEQ,YAAAhD,eAAR,SAAuBhB,EAAgBa,GAKnC,IAJA,IAAIsE,EAAgBtE,EAChBuE,EAAmB,EAGhBA,EAAW,GAAKD,EAAQ7F,EAAKyB,MAAQ0B,KAAKrD,MAAMY,GAAQmF,KAAW1C,KAAKjD,MAC3E4F,IACAD,IAGJ,GAAIC,EAAW,EAAG,CAKd,IAFAA,EAAW,EACXD,EAAQnF,EACDmF,EAAQ7F,EAAKC,SAAWkD,KAAKrD,MAAM+F,GAAOtE,KAAS4B,KAAKjD,MAC3D4F,IACAD,IAGJ,IADAA,EAAQnF,EAAS,EACVmF,GAAS,GAAK1C,KAAKrD,MAAM+F,GAAOtE,KAAS4B,KAAKjD,MACjD4F,IACAD,IAIJ,GAAIC,EAAW,EAAG,CACdA,EAAW,EAGX,IAFA,IAAIC,EAAmBxE,EAAM,EACzByE,EAAmBtF,EAAS,EACzBoF,EAAW,GAAKC,GAAY,GAAMC,EAAWhG,EAAKC,SAAWkD,KAAKrD,MAAMkG,GAAUD,KAAc5C,KAAKjD,MACxG4F,IACAE,IACAD,IAIJ,IAFAC,EAAWtF,EACXqF,EAAWxE,EACJuE,EAAW,GAAKC,EAAW/F,EAAKyB,MAAQuE,GAAY,GAAK7C,KAAKrD,MAAMkG,GAAUD,KAAc5C,KAAKjD,MACpG4F,IACAE,IACAD,IAGJ,GAAID,EAAW,EAAG,CAId,IAHAA,EAAW,EACXC,EAAWxE,EAAM,EACjByE,EAAWtF,EAAS,EACboF,EAAW,GAAKC,GAAY,GAAKC,GAAY,GAAK7C,KAAKrD,MAAMkG,GAAUD,KAAc5C,KAAKjD,MAC7F4F,IACAE,IACAD,IAIJ,IAFAC,EAAWtF,EACXqF,EAAWxE,EACJuE,EAAW,GAAKC,EAAW/F,EAAKyB,MAAQuE,EAAWhG,EAAKC,SAAWkD,KAAKrD,MAAMkG,GAAUD,KAAc5C,KAAKjD,MAC9G4F,IACAE,IACAD,G,GAMhB,OAAOD,CACX,EAEQ,YAAAxD,cAAR,WACIa,KAAK5D,OAAO0G,oBAAoB,YAAa9C,KAAK9C,SAAS,GAC3D8C,KAAK5D,OAAO0G,oBAAoB,QAAS9C,KAAK7B,SAAS,GACvDqE,OAAOM,oBAAoB,eAAgB9C,KAAKP,aACpD,EAEQ,YAAAC,SAAR,WACIT,aAAa8D,QAAQ,WAAY/C,KAAKjD,KAAKiG,YAC9C/D,aAAa8D,QAAQ,QAASE,KAAKC,UAAUlD,KAAKrD,QAC/CsC,aAAa8D,QAAQ,YAAa/C,KAAKvB,WACvCQ,aAAa8D,QAAQ,cAAe/C,KAAKtB,aACzCO,aAAa8D,QAAQ,iBAAkB/C,KAAKJ,eAAeoD,WAC/D,EAEQ,YAAA7B,gBAAR,WACInB,KAAKjD,KAAOoG,SAASlE,aAAa+B,QAAQ,aAC1ChB,KAAKvB,UAAYQ,aAAa+B,QAAQ,aACtChB,KAAKtB,YAAcO,aAAa+B,QAAQ,eACxChB,KAAKrD,MAAQsG,KAAKG,MAAMnE,aAAa+B,QAAQ,UAC7ChB,KAAKJ,eAAiBuD,SAASlE,aAAa+B,QAAQ,kBACxD,EAEO,YAAAqC,KAAP,WACIrD,KAAKb,gBACLa,KAAKN,WACLM,KAAKT,YACLS,KAAKZ,YACLY,KAAKX,kBACT,EAEQ,YAAAwB,SAAR,WACQb,KAAKlB,YACLkB,KAAKL,gBACLK,KAAKsD,cAAgBC,YAAYvD,KAAKL,cAAe,KACrDK,KAAKlB,UAAUH,UAAU6E,OAAO,QAExC,EAEQ,YAAApE,UAAR,WACQY,KAAKsD,gBACLG,cAAczD,KAAKsD,eACnBtD,KAAKlB,UAAUH,UAAUC,IAAI,QAErC,EAEQ,YAAAS,iBAAR,WACQW,KAAKO,kBACLP,KAAKO,gBAAgBxB,UAAY,IAEjCiB,KAAKM,gBACLN,KAAKM,cAAcvB,UAAY,GAEvC,EAhXe,EAAAjC,QAAkB,EAClB,EAAAwB,KAAe,EAiXlC,C,CApXA,GAAa,EAAAzB,KAAAA,EAsXb,MAII,SAAYa,EAAWiE,GACnB3B,KAAKtC,EAAIA,EACTsC,KAAK2B,EAAIA,CACb,C,aChYJ,IAAY3E,E,gEAAAA,EAAA,EAAAA,OAAA,EAAAA,KAAI,KACZ,mBACA,iBACA,oB,GCFA0G,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtE,IAAjBuE,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CJtBA,SACA,SAII7H,EAAOgE,SAASC,eAAe,QAC/BhE,EAAY+D,SAASC,eAAe,UAEpC/D,EAAU8D,SAASC,eAAe,WAElC9D,EAAS6D,SAASC,eAAe,SAErChE,EAAUqG,iBAAiB,SAAS,YAChCvG,EAAW,IAAI,EAAAa,KAAK,QAAS,UAAW,QAAS,YAAa,gBACrDiE,KAAO,EAAAzE,SAAS0E,QACzB/E,EAASuD,UAAY,WACjBtD,EAAK0C,UAAU6E,OAAO,QACtBpH,EAAOuC,UAAUC,IAAI,QACrBzC,EAAQwC,UAAUC,IAAI,OAC1B,EACA5C,EAASwE,QAETvE,EAAK0C,UAAUC,IAAI,QACnBxC,EAAOuC,UAAU6E,OAAO,QACxBrH,EAAQwC,UAAU6E,OAAO,OAC7B,IAAG,GAEHrH,EAAQoG,iBAAiB,SAAS,WAC9BvG,EAASqH,MACb,IAAG,E","sources":["webpack:///./src/main.ts","webpack:///./src/game-mode.ts","webpack:///./src/game.ts","webpack:///./src/tile.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum GameMode {\r\n    SAME_PC = 1\r\n}","import { GameMode } from './game-mode';\r\nimport { Tile } from './tile';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Tile>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Tile = Tile.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty tiles\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Tile.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n        this.setUpPlayerNames();\r\n        this.paintBoard();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData(){\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        }\r\n\r\n        // Print player names on screen\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                if (this.board[col][row] === Tile.RED) {\r\n                    this.context.fillStyle = 'red';\r\n                } else if (this.board[col][row] === Tile.GREEN) {\r\n                    this.context.fillStyle = 'greenyellow';\r\n                } else {\r\n                    this.context.fillStyle = 'black';\r\n                }\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * 110, 150 + row * 110, 30, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.addEventListener('click', this.landDot, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n    }\r\n\r\n    private moveDot = (event) => {\r\n        this.clearUpper();\r\n\r\n        let position: Position = this.getCursorPosition(event);\r\n        let column = Math.round(position.x - 50) / 110;\r\n        \r\n        if (this.turn == Tile.RED) {\r\n            this.context.fillStyle = 'red';\r\n        } else if (this.turn == Tile.GREEN) {\r\n            this.context.fillStyle = 'greenyellow';\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * 120, 35, 35, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private landDot = (event) => {\r\n        let position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / 110);\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === 0) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === 0) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (this.turn === Tile.RED) {\r\n                this.context.fillStyle = 'red';\r\n            } else if (this.turn === Tile.GREEN) {\r\n                this.context.fillStyle = 'greenyellow';\r\n            }\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * 110, 150 + r * 110, 30, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkTileCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 tiles\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Tile.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Tile.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                // Clear game data\r\n                localStorage.clear();\r\n\r\n                this.cleanUpEvents();\r\n                this.stopTimer();\r\n                this.clearPlayerNames();\r\n\r\n                // Run delegate function to return to main menu, in case it is defined\r\n                if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n                    setTimeout(this.onGameEnd, 3000);\r\n                }\r\n            }\r\n            \r\n            // Switches turn\r\n            if (this.turn === Tile.RED){\r\n                this.turn = Tile.GREEN;\r\n            } else if (this.turn === Tile.GREEN){\r\n                this.turn = Tile.RED;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private beforeUnload = () => {\r\n        this.saveGame();\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkTileCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.removeEventListener('click', this.landDot, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        this.turn = parseInt(localStorage.getItem('nextTurn'));\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        this.saveGame();\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","export enum Tile {\r\n    EMPTY = 0,\r\n    RED = 1,\r\n    GREEN = 2\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","exitBtn","canvas","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","Tile","RED","moveDot","event","clearUpper","position","getCursorPosition","column","Math","round","x","context","fillStyle","GREEN","beginPath","arc","PI","closePath","fill","landDot","row","r","rows","checkTileCount","winner","playerRed","playerGreen","classList","add","winMsg","timerSpan","innerText","alert","localStorage","clear","cleanUpEvents","stopTimer","clearPlayerNames","undefined","onGameEnd","setTimeout","beforeUnload","saveGame","timerCallback","secondsRunning","minutes","floor","seconds","this","document","getElementById","getContext","col","EMPTY","playerRedSpan","playerGreenSpan","start","checkGameData","setUpPlayerNames","paintBoard","setGameEvents","setTimer","mode","SAME_PC","getItem","nextTurn","confirm","restoreLastGame","prompt","boardGradient","createLinearGradient","width","addColorStop","fillRect","height","y","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","window","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","JSON","stringify","parseInt","parse","exit","timerInterval","setInterval","remove","clearInterval","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}