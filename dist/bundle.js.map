{"version":3,"file":"bundle.js","mappings":"6GAAA,aAEA,0BA4FA,QAvFkB,EAAAA,UAAd,SAAwBC,GACpB,IAAK,IAAIC,EAAM,EAAGA,EAAMC,EAAWC,QAASF,IAAO,CAC/CD,EAAMC,GAAO,IAAIG,MAAMF,EAAWG,MAClC,IAAK,IAAIC,EAAM,EAAGA,EAAMJ,EAAWG,KAAMC,IACrCN,EAAMC,GAAKK,GAAO,EAAAC,IAAIC,K,CAGlC,EAEc,EAAAC,qBAAd,SAAmCT,EAA0BU,EAAgBJ,EAAaK,GAKtF,IAJA,IAAIC,EAAgBN,EAChBO,EAAmB,EAGhBA,EAAW,GAAKD,EAAQV,EAAWG,MAAQL,EAAMU,GAAQE,KAAWD,GACvEE,IACAD,IAGJ,GAAIC,EAAW,EAAG,CAKd,IAFAA,EAAW,EACXD,EAAQF,EACDE,EAAQV,EAAWC,SAAWH,EAAMY,GAAON,KAASK,GACvDE,IACAD,IAGJ,IADAA,EAAQF,EAAS,EACVE,GAAS,GAAKZ,EAAMY,GAAON,KAASK,GACvCE,IACAD,IAIJ,GAAIC,EAAW,EAAG,CACdA,EAAW,EAGX,IAFA,IAAIC,EAAmBR,EAAM,EACzBS,EAAmBL,EAAS,EACzBG,EAAW,GAAKC,GAAY,GAAMC,EAAWb,EAAWC,SAAWH,EAAMe,GAAUD,KAAcH,GACpGE,IACAE,IACAD,IAIJ,IAFAC,EAAWL,EACXI,EAAWR,EACJO,EAAW,GAAKC,EAAWZ,EAAWG,MAAQU,GAAY,GAAKf,EAAMe,GAAUD,KAAcH,GAChGE,IACAE,IACAD,IAGJ,GAAID,EAAW,EAAG,CAId,IAHAA,EAAW,EACXC,EAAWR,EAAM,EACjBS,EAAWL,EAAS,EACbG,EAAW,GAAKC,GAAY,GAAKC,GAAY,GAAKf,EAAMe,GAAUD,KAAcH,GACnFE,IACAE,IACAD,IAIJ,IAFAC,EAAWL,EACXI,EAAWR,EACJO,EAAW,GAAKC,EAAWZ,EAAWG,MAAQU,EAAWb,EAAWC,SAAWH,EAAMe,GAAUD,KAAcH,GAChHE,IACAE,IACAD,G,GAMhB,OAAOD,CACX,EAEc,EAAAG,YAAd,SAA0BhB,GAEtB,IADA,IAAIiB,GAAgB,EACXhB,EAAc,EAAGA,EAAMC,EAAWC,QAASF,IAEhD,GAAID,EAAMC,GAAK,KAAO,EAAAM,IAAIC,MAAO,CAC7BS,GAAO,EACP,K,CAGR,OAAOA,CACX,EAxFc,EAAAd,QAAkB,EAClB,EAAAE,KAAe,EAyFjC,C,CA5FA,GAAa,EAAAH,WAAAA,C,cCFb,IAAYK,E,+DAAAA,EAAA,EAAAA,MAAA,EAAAA,IAAG,KACX,cACA,YACA,qB,cCHJ,IAAYW,E,oEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAChB,qBACA,wB,cCFJ,IAAYC,E,iEAAAA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KACb,gCACA,yBACA,0B,+ECHJ,aACA,QACA,SACA,SACA,SACA,SACA,SAIA,aAsBI,WAAsBC,GAAtB,WAlBU,KAAApB,MAA2B,IAAII,MAAM,EAAAF,WAAWC,SAKhD,KAAAkB,KAAY,EAAAd,IAAIe,IAmNlB,KAAAC,aAAe,WACnB,EAAKC,OAAOC,OAASC,OAAOC,YAAc,IAC1C,EAAKH,OAAOI,MAAQF,OAAOG,WAEvB,EAAKL,OAAOI,MAAQ,IACpB,EAAKE,aAAe,GAEpB,EAAKA,aAAe,GAGpB,EAAKN,OAAOC,OAAS,EAAKD,OAAOI,OACjC,EAAKG,OAAS,EAAKP,OAAOI,MAAQ,EAAA1B,WAAWC,QAC7C,EAAK6B,OAAS,EAAKR,OAAOC,OAAS,EAAAvB,WAAWG,OAE9C,EAAK0B,OAAS,EAAKP,OAAOI,MAAQ,EAAA1B,WAAWC,QAC7C,EAAK6B,OAAS,IAGlB,EAAKC,UAAY,EAAKF,OAAS,EAE/B,EAAKG,YACT,EA1NIC,KAAKX,OAASY,SAASC,eAAejB,EAAQkB,UAC9CH,KAAKI,QAAUJ,KAAKX,OAAOgB,WAAW,MAEtC,EAAAtC,WAAWH,UAAUoC,KAAKnC,OAEtBoB,EAAQqB,YACRN,KAAKO,QAAUN,SAASC,eAAejB,EAAQqB,YAG/CrB,EAAQuB,UACRR,KAAKS,MAAQ,IAAI,EAAAC,MAAMzB,EAAQuB,UAG/BvB,EAAQ0B,aAAe1B,EAAQ2B,gBAC/BZ,KAAKa,YAAc,IAAI,EAAAC,kBAAkB7B,EAAQ0B,YAAa1B,EAAQ2B,eAE9E,CAgOJ,OA9Nc,YAAAG,MAAV,WACQf,KAAKa,cACLb,KAAKa,YAAYG,iBAAiBhB,KAAKiB,MACvCjB,KAAKa,YAAYK,aAAalB,KAAKd,OAGvCc,KAAKZ,eACLY,KAAKmB,gBAEDnB,KAAKS,OACLT,KAAKS,MAAMW,KAEnB,EAEQ,YAAArB,WAAR,WACI,IAAIsB,EAAgBrB,KAAKI,QAAQkB,qBAAqB,EAAG,EAAGtB,KAAKX,OAAOI,MAAO,GAC/E4B,EAAcE,aAAa,EAAG,QAC9BF,EAAcE,aAAa,EAAG,QAC9BvB,KAAKI,QAAQoB,UAAYH,EACzBrB,KAAKI,QAAQqB,SAAS,EAAGC,EAAKC,eAAgB3B,KAAKX,OAAOI,MAAOO,KAAKX,OAAOC,QAE7E,IAAK,IAAIxB,EAAM,EAAAC,WAAWC,QAAU,EAAGF,GAAO,EAAGA,IAC7C,IAAK,IAAIK,EAAM,EAAAJ,WAAWG,KAAO,EAAGC,GAAO,EAAGA,IAC1C6B,KAAKI,QAAQoB,UAAYxB,KAAKnC,MAAMC,GAAKK,GACzC6B,KAAK4B,WAAW9D,EAAKK,EAGjC,EAEU,YAAAgD,cAAV,WACInB,KAAKX,OAAOwC,iBAAiB,YAAa7B,KAAK8B,iBAAiB,GAChE9B,KAAKX,OAAOwC,iBAAiB,QAAS7B,KAAK+B,aAAa,GACxDxC,OAAOsC,iBAAiB,eAAgB7B,KAAKgC,cAC7CzC,OAAOsC,iBAAiB,SAAU7B,KAAKZ,aAC3C,EAKU,YAAA6C,4BAAV,SAAsCC,GAClC,IAAIC,EAAW,EAAAC,SAASC,kBAAkBH,EAAOlC,KAAKX,QAEtD,OADaiD,KAAKC,OAAOJ,EAASK,EAAIxC,KAAKF,WAAaE,KAAKJ,OAEjE,EAEU,YAAA6C,WAAV,WACQzC,KAAKd,OAAS,EAAAd,IAAIe,IAClBa,KAAKd,KAAO,EAAAd,IAAIsE,MACT1C,KAAKd,OAAS,EAAAd,IAAIsE,QACzB1C,KAAKd,KAAO,EAAAd,IAAIe,KAGhBa,KAAKa,aACLb,KAAKa,YAAYK,aAAalB,KAAKd,KAE3C,EAEU,YAAAyD,QAAV,SAAkBpE,GACdyB,KAAK4C,aACL5C,KAAKI,QAAQoB,UAAYxB,KAAKd,KAC9Bc,KAAK6C,eAAetE,EACxB,EAEU,YAAAuE,QAAV,SAAkBvE,GACd,IAAIJ,EAEJ,GAAI6B,KAAKnC,MAAMU,GAAQ,KAAO,EAAAH,IAAIC,MAAO,CAGrC,IAAI0E,OAAC,EACL,IAAKA,EAAI,EAAAhF,WAAWG,KAAO,EAAG6E,GAAK,EAAGA,IAClC,GAAI/C,KAAKnC,MAAMU,GAAQwE,KAAO,EAAA3E,IAAIC,MAAO,CACrC2B,KAAKnC,MAAMU,GAAQwE,GAAK/C,KAAKd,KAC7Bf,EAAM4E,EACN,K,CASR,GALA/C,KAAKI,QAAQoB,UAAYxB,KAAKd,KAC9Bc,KAAK4B,WAAWrD,EAAQwE,GAET,EAAAhF,WAAWO,qBAAqB0B,KAAKnC,MAAOU,EAAQJ,EAAK6B,KAAKd,OAE7D,EAAG,CACf,IAAI8D,EAAiB,GAEjBhD,KAAKa,cACDb,KAAKd,OAAS,EAAAd,IAAIe,IAClB6D,EAAShD,KAAKa,YAAYoC,eAAiB,SACpCjD,KAAKd,OAAS,EAAAd,IAAIsE,QACzBM,EAAShD,KAAKa,YAAYqC,iBAAmB,aAIrDlD,KAAKmD,UAAUH,GACfhD,KAAKoD,uB,MACF,GAAI,EAAArF,WAAWc,YAAYmB,KAAKnC,OAAQ,CAC3C,IAAIwF,EAAkB,GAClBrD,KAAKa,cACLwC,GAAWrD,KAAKa,YAAYoC,eAAiB,cAAgBjD,KAAKa,YAAYqC,iBAAmB,YAErGG,GAAW,aACXC,MAAMD,GACNrD,KAAKoD,uB,MAELpD,KAAKyC,aACLzC,KAAKI,QAAQoB,UAAYxB,KAAKd,KAC9Bc,KAAK6C,eAAetE,GACpB,EAAAgF,MAAMC,UAAU,EAAAxE,MAAMyE,Q,CAGlC,EAEU,YAAAN,UAAV,SAAoBH,GAChB,IAAIU,EAAiBV,EAAS,SAC1BhD,KAAKS,QACLiD,GAAU,iBAAmB1D,KAAKS,MAAMkD,yBAE5C,EAAAJ,MAAMC,UAAU,EAAAxE,MAAM4E,KACtBN,MAAMI,EACV,EAEU,YAAAN,sBAAV,WACIpD,KAAK6D,gBAED7D,KAAKa,aACLb,KAAKa,YAAYiD,QAGjB9D,KAAKS,OACLT,KAAKS,MAAMsD,OAGX/D,KAAKO,SACLP,KAAKO,QAAQyD,UAAUC,IAAI,QAG/BjE,KAAKkE,cAGDlE,KAAKmE,WACLC,WAAWpE,KAAKmE,UAAW,IAEnC,EAEQ,YAAAtB,eAAR,SAAuBtE,GACnByB,KAAKI,QAAQiE,YACbrE,KAAKI,QAAQkE,IAAItE,KAAKF,UAAYvB,EAASyB,KAAKJ,OAAQI,KAAKL,aAAcK,KAAKL,aAAc,EAAG,EAAI2C,KAAKiC,IAC1GvE,KAAKI,QAAQoE,YACbxE,KAAKI,QAAQqE,MACjB,EAIQ,YAAA7B,WAAR,WACI5C,KAAKI,QAAQsE,UAAU,EAAG,EAAG1E,KAAKX,OAAOI,MAAOiC,EAAKC,eACzD,EAEU,YAAAkC,cAAV,WACI7D,KAAKX,OAAOsF,oBAAoB,YAAa3E,KAAK8B,iBAAiB,GACnE9B,KAAKX,OAAOsF,oBAAoB,QAAS3E,KAAK+B,aAAa,GAC3DxC,OAAOoF,oBAAoB,eAAgB3E,KAAKgC,cAChDzC,OAAOoF,oBAAoB,SAAU3E,KAAKZ,aAC9C,EAEU,YAAAwF,KAAV,WACI5E,KAAK6D,gBACL7D,KAAKmE,YACLnE,KAAKkE,cAEDlE,KAAKa,aACLb,KAAKa,YAAYiD,QAGjB9D,KAAKS,OACLT,KAAKS,MAAMsD,MAEnB,EAyBU,YAAAG,YAAV,WACIlE,KAAKd,KAAO,EAAAd,IAAIe,IAChB,EAAApB,WAAWH,UAAUoC,KAAKnC,OAEtBmC,KAAKa,aACLb,KAAKa,YAAYgE,QAGjB7E,KAAKS,OACLT,KAAKS,MAAMoE,OAEnB,EAEQ,YAAAjD,WAAR,SAAmBrD,EAAgBJ,GAC/B6B,KAAKI,QAAQiE,YACbrE,KAAKI,QAAQkE,IAAItE,KAAKF,UAAYvB,EAASyB,KAAKJ,OAA8B,EAAtB8B,EAAKC,eAAqBxD,EAAM6B,KAAKH,OAAQG,KAAKL,aAAc,EAAa,EAAV2C,KAAKiC,IAChIvE,KAAKI,QAAQoE,YACbxE,KAAKI,QAAQqE,MACjB,EAnPe,EAAA9C,eAAyB,GAqP5C,C,CAvQA,GAAsB,EAAAD,KAAAA,C,2jBCVtB,aACA,SACA,SACA,SAGA,SACA,SAEA,cAWI,WAAoBzC,GAApB,MACI,YAAMA,IAAQ,K,OA2BV,EAAA6F,gBAAkB,SAACC,GACnBA,EAAYC,cAAgB,EAAKC,QAAU,EAAKpE,cAC5C,EAAKoE,OAAOC,mBAAqB,EAAA9G,IAAIe,IACrC,EAAK0B,YAAYsE,eAAeJ,EAAYC,cACrC,EAAKC,OAAOC,mBAAqB,EAAA9G,IAAIsE,OAC5C,EAAK7B,YAAYuE,aAAaL,EAAYC,cAG1C,EAAKvE,OACL,EAAKA,MAAM4E,aAAY,IAI3BN,EAAYO,OAAS,EAAKL,QAAU,EAAKpE,cACrCkE,EAAYO,QAAU,EAAAlH,IAAIe,IAC1B,EAAK0B,YAAYuE,aAAa,EAAKH,OAAOM,iBACnCR,EAAYO,QAAU,EAAAlH,IAAIsE,OACjC,EAAK7B,YAAYsE,eAAe,EAAKF,OAAOM,kBAIhDR,EAAYS,wBAA0BT,EAAYvG,cAAgB,EAAKyG,OAAOC,mBAC9E5B,MAAM,uCACN,EAAAC,MAAMC,UAAU,EAAAxE,MAAM4E,KACtB,EAAKR,yBAGJqC,MAAMV,EAAYxG,SAAkC,cAAvBwG,EAAYW,QAC1C,EAAK/C,QAAQoC,EAAYxG,QAGxBkH,MAAMV,EAAYxG,SAAkC,UAAvBwG,EAAYW,QAC1C,EAAK5C,QAAQiC,EAAYxG,QAGzBwG,EAAYY,UAAYZ,EAAYvG,cAAgB,EAAKyG,OAAOC,kBAChE,EAAKzC,YAEb,EAEQ,EAAAmD,cAAgB,WACpB,YAAMhB,KAAI,OACd,EAWU,EAAA9C,gBAAkB,SAACI,GACzB,GAAI,EAAK+C,QAAU,EAAK/F,OAAS,EAAK+F,OAAOC,oBAAsB,EAAKrE,aAAe,EAAKA,YAAYgF,wBAAyB,CAC7H,IAAItH,EAAS,EAAK0D,4BAA4BC,GAC9C,EAAKS,QAAQpE,GAEb,IAAIuH,EAAO,CACPJ,OAAQ,YACRnH,OAAQA,GAEZ,EAAK0G,OAAOc,KAAKD,GAEjB,EAAKN,wBAAyB,C,CAEtC,EAEU,EAAAzD,YAAc,SAACG,GACrB,GAAI,EAAK+C,QAAU,EAAK/F,OAAS,EAAK+F,OAAOC,oBAAsB,EAAKrE,aAAe,EAAKA,YAAYgF,wBAAyB,CAC7H,IAAItH,EAAS,EAAK0D,4BAA4BC,GAE1C4D,EAAO,CACPJ,OAAQ,QACRnH,OAAQA,GAEZ,EAAK0G,OAAOc,KAAKD,GAEjB,EAAKH,UAAW,EAEhB,EAAK7C,QAAQvE,E,CAErB,EAcU,EAAAyD,aAAe,SAACE,GAEtBA,EAAM8D,iBACN9D,EAAM+D,YAAc,EACxB,EAuBQ,EAAAC,sBAAwB,WACxB,EAAKrF,aAAe,EAAKA,YAAYgF,yBACrC,EAAKM,gBACL,EAAKC,cAAcC,UAAY,EAAKF,cACpC,EAAKG,uBAGT,IAAIC,EAAmB,EAAKtB,OAAOC,iBAC/B,EAAKhG,OAASqH,GAAe,EAAKJ,eAAiB,GAAK,EAAKlB,SACzD,EAAKO,wBACL,EAAKP,OAAOc,KAAK,CACbP,wBAAwB,EACxBhH,YAAa+H,IAGjBjD,MAAM,+BACN,EAAAC,MAAMC,UAAU,EAAAxE,MAAMwH,MACtB,EAAKpD,yBACE,EAAKuC,WACZ,EAAKlD,aAEL,EAAKwC,OAAOc,KAAK,CACbJ,UAAU,EACVnH,YAAa+H,KAI7B,EAhLI,EAAKtF,KAAO,EAAAlC,SAAS0H,QAEjBxH,EAAQyH,cACR,EAAKN,cAAgBnG,SAASC,eAAejB,EAAQyH,c,CAE7D,CAyMJ,OA3NiC,OAoBf,EAAAC,YAAd,SAA0B1H,GAItB,OAHK2H,EAAYC,WACbD,EAAYC,SAAW,IAAID,EAAY3H,IAEpC2H,EAAYC,QACvB,EAEO,YAAA9F,MAAP,WACIf,KAAK8G,eACL9G,KAAK+G,iBACL,YAAMhG,MAAK,UACf,EAEQ,YAAA+F,aAAR,WACI9G,KAAKiF,OAAS,IAAI,EAAA+B,OAClBhH,KAAKiF,OAAOgC,kBAAoBjH,KAAK8E,gBACrC9E,KAAKiF,OAAOiC,gBAAkBlH,KAAK4F,aACvC,EA8CU,YAAA1B,YAAV,WACI,YAAMA,YAAW,WACjBlE,KAAKmH,gBAEDnH,KAAKiF,QACLjF,KAAKiF,OAAOmC,OAEpB,EAiCO,YAAAxC,KAAP,WACoCyC,QAAQ,8DAGhCrH,KAAKiF,QACLjF,KAAKiF,OAAOmC,QAGhB,YAAMxC,KAAI,WAElB,EAQU,YAAAzB,UAAV,SAAoBH,GAChB,IAAIU,EAAiBV,EAAS,SAC1BhD,KAAKS,QACLiD,GAAU,iBAAmB1D,KAAKS,MAAMkD,yBAE5CD,GAAU,KACN1D,KAAKiF,QAAUjF,KAAKiF,OAAOC,mBAAqBlF,KAAKd,MACrDwE,GAAU,WACV,EAAAH,MAAMC,UAAU,EAAAxE,MAAM4E,OAEtBF,GAAU,YACV,EAAAH,MAAMC,UAAU,EAAAxE,MAAMwH,OAE1BlD,MAAMI,EACV,EAEU,YAAAjB,WAAV,WACI,YAAMA,WAAU,WAChBzC,KAAKsH,gBACT,EA+BQ,YAAAhB,oBAAR,WACQtG,KAAKmG,cAAgB,IACrBnG,KAAKoG,cAAcpC,UAAUC,IAAI,cACjCjE,KAAKoG,cAAcpC,UAAUuD,OAAO,cAEpCvH,KAAKoG,cAAcpC,UAAUuD,OAAO,cACpCvH,KAAKoG,cAAcpC,UAAUC,IAAI,YAEzC,EAEQ,YAAA8C,eAAR,WACI/G,KAAK2F,UAAW,EAChB3F,KAAKwF,wBAAyB,EAC9BxF,KAAKmG,cAAgB,GACrBnG,KAAKwH,sBAAwBC,YAAYzH,KAAKkG,sBAAuB,IACzE,EAEQ,YAAAiB,cAAR,WACIO,cAAc1H,KAAKwH,uBACnBxH,KAAKoG,cAAcC,UAAY,EACnC,EAEQ,YAAAiB,eAAR,WACItH,KAAKmG,cAAgB,GACrBnG,KAAK2F,UAAW,EAChB3F,KAAKwF,wBAAyB,CAClC,EAEJ,EA3NA,CAAiC,EAAA9D,MAApB,EAAAkF,YAAAA,C,4FCTb,aACA,SAEA,aAMI,WAAmBjG,EAAqBC,GAChCD,IACAX,KAAK2H,cAAgB1H,SAASC,eAAeS,IAG7CC,IACAZ,KAAK4H,gBAAkB3H,SAASC,eAAeU,GAEvD,CAuFJ,OArFW,YAAAiH,iBAAP,WACSC,aAAaC,QAAQ,cAAiBD,aAAaC,QAAQ,iBAC5D/H,KAAKgI,UAAYC,OAAO,qCACxBjI,KAAKkI,YAAcD,OAAO,uCAElC,EAEO,YAAAjH,iBAAP,SAAwBC,GACpB,IAAMkH,EAAU,wBACZnI,KAAK4H,kBACD3G,IAAS,EAAAlC,SAAS0H,SAAYzG,KAAKkI,YAGnClI,KAAK4H,gBAAgBvB,UAAYrG,KAAKkI,YAFtClI,KAAK4H,gBAAgBvB,UAAY8B,GAKrCnI,KAAK2H,gBACD1G,IAAS,EAAAlC,SAAS0H,SAAYzG,KAAKgI,UAGnChI,KAAK2H,cAActB,UAAYrG,KAAKgI,UAFpChI,KAAK2H,cAActB,UAAY8B,EAK3C,EAEO,YAAArE,MAAP,WACQ9D,KAAK4H,kBACL5H,KAAK4H,gBAAgBvB,UAAY,IAEjCrG,KAAK2H,gBACL3H,KAAK2H,cAActB,UAAY,GAEvC,EAEO,YAAAxB,MAAP,WACI7E,KAAKgI,UAAY,KACjBhI,KAAKkI,YAAc,IACvB,EAEO,YAAAjF,aAAP,WACI,OAAOjD,KAAKgI,SAChB,EAEO,YAAA9E,eAAP,WACI,OAAOlD,KAAKkI,WAChB,EAEO,YAAArC,qBAAP,WACI,QAAS7F,KAAKgI,aAAehI,KAAKkI,WACtC,EAEO,YAAAE,qBAAP,WACIN,aAAaO,QAAQ,YAAarI,KAAKgI,WACvCF,aAAaO,QAAQ,cAAerI,KAAKkI,YAC7C,EAEO,YAAAI,oBAAP,WACItI,KAAKgI,UAAYF,aAAaC,QAAQ,aACtC/H,KAAKkI,YAAcJ,aAAaC,QAAQ,cAC5C,EAEO,YAAA3C,aAAP,SAAoBmD,GAChBvI,KAAKgI,UAAYO,EACbvI,KAAK2H,gBACL3H,KAAK2H,cAActB,UAAYrG,KAAKgI,UAE5C,EAEO,YAAA7C,eAAP,SAAsBoD,GAClBvI,KAAKkI,YAAcK,EACfvI,KAAK4H,kBACL5H,KAAK4H,gBAAgBvB,UAAYrG,KAAKkI,YAE9C,EAEO,YAAAhH,aAAP,SAAoBhC,GACZA,IAAS,EAAAd,IAAIe,KACba,KAAK2H,cAAc3D,UAAUC,IAAI,eACjCjE,KAAK4H,gBAAgB5D,UAAUuD,OAAO,gBAC/BrI,IAAS,EAAAd,IAAIsE,QACpB1C,KAAK4H,gBAAgB5D,UAAUC,IAAI,eACnCjE,KAAK2H,cAAc3D,UAAUuD,OAAO,eAE5C,EAEJ,EArGA,GAAa,EAAAzG,kBAAAA,C,gFCHb,iBAII,WAAY0B,EAAWgG,GACnBxI,KAAKwC,EAAIA,EACTxC,KAAKwI,EAAIA,CACb,CAiBJ,OAfkB,EAAAnG,kBAAd,SAAgCH,EAAO7C,GACnC,IAAImD,EACAgG,EAWJ,YAVoBC,IAAhBvG,EAAMwG,YAAuCD,IAAhBvG,EAAMyG,OACnCnG,EAAIN,EAAMwG,MACVF,EAAItG,EAAMyG,QAGVnG,EAAIN,EAAM0G,QAAU3I,SAAS4I,KAAKC,WAAa7I,SAAS8I,gBAAgBD,WACxEN,EAAItG,EAAM8G,QAAU/I,SAAS4I,KAAKI,UAAYhJ,SAAS8I,gBAAgBE,WAIpE,IAAI7G,EAFXI,GAAKnD,EAAO6J,WACZV,GAAKnJ,EAAO8J,UAEhB,EACJ,EAxBA,GAAa,EAAA/G,SAAAA,C,8jBCAb,aACA,SAIA,cAII,WAAoBnD,GAApB,MACI,YAAMA,IAAQ,K,OAuER,EAAA6C,gBAAkB,SAACI,GACzB,IAAI3D,EAAS,EAAK0D,4BAA4BC,GAC9C,EAAKS,QAAQpE,EACjB,EAEU,EAAAwD,YAAc,SAACG,GACrB,IAAI3D,EAAS,EAAK0D,4BAA4BC,GAC9C,EAAKY,QAAQvE,EACjB,EAOU,EAAAyD,aAAe,SAACE,GACtB,EAAKkH,UACT,EAEQ,EAAAC,qBAAuB,WACvB,EAAK5I,OACL,EAAKA,MAAM6I,yBAEnB,EA7FI,EAAKrI,KAAO,EAAAlC,SAASwK,O,CACzB,CA+GJ,OAtHoC,OASlB,EAAA5C,YAAd,SAA0B1H,GAItB,OAHKuK,EAAe3C,WAChB2C,EAAe3C,SAAW,IAAI2C,EAAevK,IAE1CuK,EAAe3C,QAC1B,EAEO,YAAA9F,MAAP,WACIf,KAAKyJ,gBAEDzJ,KAAKa,aACLb,KAAKa,YAAYgH,mBAGjB7H,KAAKS,OACLT,KAAKS,MAAM4E,aAAY,GAG3B,YAAMtE,MAAK,UACf,EAEQ,YAAA0I,cAAR,WACI,IAAI5L,EAAQiK,aAAaC,QAAQ,SAC7B2B,EAAW5B,aAAaC,QAAQ,YAEhClK,GAAS6L,IACKrC,QAAQ,gEAElBrH,KAAK2J,kBAEL7B,aAAahE,QAGzB,EAEQ,YAAA6F,gBAAR,WACI,IAAID,EAAmB5B,aAAaC,QAAQ,YACxC2B,IAAa,EAAAtL,IAAIe,IACjBa,KAAKd,KAAO,EAAAd,IAAIe,IACTuK,IAAa,EAAAtL,IAAIsE,QACxB1C,KAAKd,KAAO,EAAAd,IAAIsE,OAGpB1C,KAAKnC,MAAQ+L,KAAKC,MAAM/B,aAAaC,QAAQ,UAEzC/H,KAAKS,OACLT,KAAKS,MAAMqJ,oCAGX9J,KAAKa,aACLb,KAAKa,YAAYyH,qBAEzB,EAEQ,YAAAc,SAAR,WACItB,aAAaO,QAAQ,WAAYrI,KAAKd,KAAK6K,YAC9CjC,aAAaO,QAAQ,QAASuB,KAAKI,UAAUhK,KAAKnC,QAE3CmC,KAAKa,aACLb,KAAKa,YAAYuH,uBAGjBpI,KAAKS,OACLT,KAAKS,MAAMwJ,kCAEnB,EAYO,YAAArF,KAAP,WACI5E,KAAKoJ,WACL,YAAMxE,KAAI,UACd,EAYU,YAAAxB,sBAAV,WAEI0E,aAAahE,QAEb,YAAMV,sBAAqB,UAC/B,EAEU,YAAAjC,cAAV,WACI,YAAMA,cAAa,WACnBlB,SAAS4B,iBAAiB,mBAAoB7B,KAAKqJ,qBACvD,EAEU,YAAAxF,cAAV,WACI,YAAMA,cAAa,WACnB5D,SAAS0E,oBAAoB,mBAAoB3E,KAAKqJ,qBAC1D,EAEJ,EAtHA,CAHA,OAGoC3H,MAAvB,EAAA8H,eAAAA,C,iFCHb,aAEA,aAQI,wBA0CQ,KAAAU,UAAY,SAAChI,GACjB,IAAI6C,EAA2B6E,KAAKC,MAAM3H,EAAM4D,MAMhD,GAJK,EAAKqE,QAAW1E,MAAMV,EAAYoF,UACnC,EAAKA,OAASpF,EAAYoF,SAGzB,EAAK5D,aAAexB,EAAYO,MAAO,CACxC,EAAKiB,YAAcxB,EAAYO,MAE/B,EAAKiD,WAAaN,OAAO,WAAa,EAAK1B,YAAc,6BAEzD,IAAIT,EAAO,CACPsE,KAAM,EAAK7B,YAEf,EAAKxC,KAAKD,E,CAGV,EAAKmB,mBACL,EAAKA,kBAAkBlC,EAE/B,EAEQ,KAAAsF,QAAU,WACd,EAAKnD,kBACL5D,MAAM,gCACV,EAEQ,KAAAgH,QAAU,WACd,EAAKC,SACT,EAvEIvK,KAAKuK,SACT,CAuEJ,OArEY,YAAAA,QAAR,WACI,IAAIC,EAEAA,EADA,EAAAjH,MAAMkH,UACA,uBAEA,+CAGNzK,KAAKuG,cAAgBd,MAAMzF,KAAKmK,UAChCK,GAAO,gBAAkBxK,KAAKuG,YAAc,WAAavG,KAAKmK,OAAS,eAAiBnK,KAAKuI,YAGjGvI,KAAK0K,UAAY,IAAIC,UAAUH,GAE/BxK,KAAK0K,UAAUE,UAAY5K,KAAKkK,UAChClK,KAAK0K,UAAUG,QAAU7K,KAAKqK,QAC9BrK,KAAK0K,UAAUI,QAAU9K,KAAKsK,OAClC,EAEO,YAAAvE,KAAP,SAAYD,GACR9F,KAAK0K,UAAU3E,KAAK6D,KAAKI,UAAUlE,GACvC,EAEO,YAAAsB,MAAP,WACIpH,KAAK0K,UAAUI,QAAU,KACzB9K,KAAK0K,UAAUE,UAAY,KAC3B5K,KAAK0K,UAAUG,QAAU,KACzB7K,KAAK0K,UAAUtD,OACnB,EAEO,YAAAlC,eAAP,WACI,OAAOlF,KAAKuG,WAChB,EAEO,YAAAhB,cAAP,WACI,OAAOvF,KAAKuI,UAChB,EAiCJ,EAjFA,GAAa,EAAAvB,OAAAA,C,8ECJb,iBAOI,WAAmBxG,GAAnB,WAKQ,KAAAuK,cAAgB,WACpB,GAAI,EAAKC,SAAU,CACf,EAAKC,iBACL,IAAIC,EAAkB5I,KAAK6I,MAAM,EAAKF,eAAiB,IACnDG,EAAkB,EAAKH,eAAiB,GAC5C,EAAKI,UAAUhF,UAAY6E,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,C,CAGtE,EAAKC,UAAUrH,UAAUsH,SAAS,QAGnCC,aAAa,EAAKC,SAFlB,EAAKA,QAAUpH,WAAW,EAAK2G,cAAe,IAItD,EAjBI/K,KAAKqL,UAAYpL,SAASC,eAAeM,GACzCR,KAAKiL,eAAiB,CAC1B,CAiEJ,OAhDW,YAAA7J,IAAP,WACQpB,KAAKqL,YACLrL,KAAKqL,UAAUrH,UAAUuD,OAAO,QAChCvH,KAAK+K,gBAEb,EAEO,YAAAhH,KAAP,WACQ/D,KAAKwL,UACLD,aAAavL,KAAKwL,SAClBxL,KAAKqL,UAAUhF,UAAY,GAC3BrG,KAAKqL,UAAUrH,UAAUC,IAAI,QAErC,EAEO,YAAAqF,wBAAP,WACQrJ,SAASwL,OACTF,aAAavL,KAAKwL,SAElBxL,KAAKwL,QAAUpH,WAAWpE,KAAK+K,cAAe,IAEtD,EAEO,YAAApH,sBAAP,WACI,OAAI3D,KAAKqL,UACErL,KAAKqL,UAAUhF,UAEf,EAEf,EAEO,YAAA4D,iCAAP,WACInC,aAAaO,QAAQ,iBAAkBrI,KAAKiL,eAAelB,WAC/D,EAEO,YAAAD,kCAAP,WACI9J,KAAKiL,eAAiBS,SAAS5D,aAAaC,QAAQ,kBACxD,EAEO,YAAAlD,MAAP,WACI7E,KAAKiL,eAAiB,EACtBjL,KAAKgL,UAAW,CACpB,EAEO,YAAA3F,YAAP,SAAmB2F,GACfhL,KAAKgL,SAAWA,CACpB,EAEJ,EA3EA,GAAa,EAAAtK,MAAAA,C,8ECAb,8BAUA,QATkB,EAAA+J,QAAd,WACI,MAA6B,UAAtBkB,SAASC,UACa,cAAtBD,SAASE,QACpB,EAEc,EAAArI,UAAd,SAAwBsI,GACR,IAAIC,MAAMD,GAChBE,MACV,EACJ,EAVA,GAAa,EAAAzI,MAAAA,C,GCCT0I,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB1D,IAAjB2D,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUK,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,C,MCtBA,IAMII,EANJ,SAGA,SACA,SAIIC,EAAOzM,SAASC,eAAe,QAC/ByM,EAAY1M,SAASC,eAAe,UACpC0M,EAAa3M,SAASC,eAAe,WACrC2M,EAAa5M,SAASC,eAAe,WAErCK,EAAUN,SAASC,eAAe,WAElCb,EAASY,SAASC,eAAe,SAsBrC,SAAS4M,EAAS7L,GA6ClB,IACQ8L,KAAuB9M,SAASC,eAAe,kBAE/C6M,EAAgB/I,UAAUC,IAAI,QA7ClC,IACI,IAAIhF,EAAuB,CACvBkB,SAAU,QACVG,UAAW,UACXE,QAAS,QACTG,YAAa,YACbC,cAAe,cACf8F,YAAa,cAGb+F,EADAxL,IAAS,EAAAlC,SAAS0H,QACP,EAAAG,YAAYD,YAAY1H,GAExB,EAAAuK,eAAe7C,YAAY1H,IAEjCkF,UAAY,WACjBuI,EAAK1I,UAAUuD,OAAO,QACtBlI,EAAO2E,UAAUC,IAAI,QACrB1D,EAAQyD,UAAUC,IAAI,OAC1B,EACa,EAAAlF,SAAS0H,QACjBgG,EAAyB1L,QAK9B2L,EAAK1I,UAAUC,IAAI,QACnB5E,EAAO2E,UAAUuD,OAAO,QACxBhH,EAAQyD,UAAUuD,OAAO,O,CAC3B,MAAOyF,IAMb,SAAmB3J,GACf,IAAI0J,EAAuB9M,SAASC,eAAe,gBAC/C6M,IACAA,EAAgB/I,UAAUuD,OAAO,QACjCwF,EAAgB1G,UATN,uBAWlB,CAXQ4G,E,CAGR,CAvDAN,EAAU9K,iBAAiB,SAAS,WAChCiL,EAAS,EAAA/N,SAASwK,OACtB,IAAG,GAEHqD,EAAW/K,iBAAiB,SAAS,WACjCiL,EAAS,EAAA/N,SAAS0H,QACtB,IAAG,GAEHoG,EAAWhL,iBAAiB,SAAS,WACjCqL,KAAK,oBACT,IAAG,GAEH3M,EAAQsB,iBAAiB,SAAS,WACN,EAAA+E,YACnB6F,EAAyB7H,MAIlC,IAAG,E","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId);\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames(this.mode);\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event);\r\n    protected abstract canvasClick(event);\r\n\r\n    protected getColumnFromCursorPosition(event): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            let r: number;\r\n            for (r = BoardLogic.rows - 1; r >= 0; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, r);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                alert(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: any;\r\n    private countdownSpan: any;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.endGameDueToInactivity && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            alert('You win due to opponent inactivity!');\r\n            Utils.playSound(Sound.Win);\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.skipTurn && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            this.switchTurn();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit(): void {\r\n        let exitConfirmation: boolean = confirm('Network game in progress. Are you sure you want to quit?');\r\n\r\n        if (exitConfirmation) {\r\n            if (this.socket) {\r\n                this.socket.close();\r\n            }\r\n\r\n            super.exit();\r\n        }\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = ''; // Required by Chrome\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.playerNames && this.playerNames.bothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown;\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                this.socket.send({\r\n                    endGameDueToInactivity: true,\r\n                    currentTurn: playerColor\r\n                });\r\n\r\n                alert('You lose due to inactivity!');\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                this.socket.send({\r\n                    skipTurn: true,\r\n                    currentTurn: playerColor\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > 30) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = 60;\r\n        this.turnCountDownInterval = setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = 60;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n    \r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    public printPlayerNames(mode: GameMode) {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start(): void {\r\n        this.checkGameData();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.setRunnable(true);\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.moveDot(column);\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.landDot(column);\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","options","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","this","document","getElementById","canvasId","context","getContext","exitBtnId","exitBtn","timerId","timer","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","mode","indicateTurn","setGameEvents","set","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","addEventListener","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","winDialog","closeGameAfterWinning","message","alert","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","classList","add","resetValues","onGameEnd","setTimeout","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","exit","reset","onSocketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","setRunnable","color","getPlayerName","endGameDueToInactivity","isNaN","action","skipTurn","onSocketError","bothPlayersConnected","data","send","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","innerText","adaptCountDownColor","playerColor","Lose","Network","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","close","confirm","resetCountdown","remove","turnCountDownInterval","setInterval","clearInterval","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","playerRed","prompt","playerGreen","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","restoreLastGame","JSON","parse","setSecondsRunningFromLocalStorage","toString","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","errorMessageDiv","ex","showError","open"],"sourceRoot":""}