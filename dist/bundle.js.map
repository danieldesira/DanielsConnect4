{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/board-logic.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/constants.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/coin.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/dimensions.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/index.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/models/game-message.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/player-turn.js","webpack:///./src/lib/authentication.ts","webpack:///./src/lib/config.ts","webpack:///./src/lib/credits.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/dimensions-select.ts","webpack:///./src/lib/enums/dialog-ids.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/instructions.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///./src/main.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardLogic = void 0;\nvar constants_1 = require(\"./constants\");\nvar coin_1 = require(\"./enums/coin\");\nvar dimensions_1 = require(\"./enums/dimensions\");\nvar BoardLogic = /** @class */ (function () {\n    /**\n     * Initialises the board matrix given the board dimensions\n     * @param dim The board dimensions type\n     */\n    function BoardLogic(dim) {\n        var _this = this;\n        this.board = [];\n        /**\n         * Getter for the number of columns\n         * @returns The number of columns\n         */\n        this.getColumns = function () { return _this.columns; };\n        /**\n         * Getter for the number of rows\n         * @returns The number of rows\n         */\n        this.getRows = function () { return _this.rows; };\n        /**\n         * Getter for the board dimensions\n         * @returns The board dimensions\n         */\n        this.getDimensions = function () { return _this.dimensions; };\n        /**\n         * Getter for the board matrix\n         * @returns The board matrix\n         */\n        this.getBoard = function () { return _this.board; };\n        /**\n         * Resets the board matrix retaining the given dimensions\n         */\n        this.resetBoard = function () { return _this.initBoard(); };\n        switch (dim) {\n            case dimensions_1.BoardDimensions.Small:\n                this.columns = constants_1.dimensions.small.columns;\n                this.rows = constants_1.dimensions.small.rows;\n                break;\n            case dimensions_1.BoardDimensions.Medium:\n                this.columns = constants_1.dimensions.medium.columns;\n                this.rows = constants_1.dimensions.medium.rows;\n                break;\n            case dimensions_1.BoardDimensions.Large:\n                this.columns = constants_1.dimensions.large.columns;\n                this.rows = constants_1.dimensions.large.rows;\n                break;\n        }\n        this.dimensions = dim;\n        this.initBoard();\n    }\n    /**\n     * Initialises board matrix\n     */\n    BoardLogic.prototype.initBoard = function () {\n        this.board = new Array(this.columns);\n        for (var col = 0; col < this.columns; col++) {\n            this.board[col] = new Array(this.rows);\n            for (var row = 0; row < this.rows; row++) {\n                this.board[col][row] = coin_1.Coin.Empty;\n            }\n        }\n    };\n    /**\n     * Counts and checks the coin placeholders adjacent to the specified point (column x row). Matches may occurr,\n     * vertically, horizontally or diagonally.\n     * @param column - The column number of the starting point\n     * @param row - The row number of the starting point\n     * @param currentTurn - Coin color to be checked\n     * @returns Count of adjacent coins with the same color\n     */\n    BoardLogic.prototype.countConsecutiveCoins = function (column, row, currentTurn) {\n        var count = row;\n        var coinCount = 0;\n        // Vertical check\n        while (coinCount < 4 && count < this.rows && this.board[column][count] === currentTurn) {\n            coinCount++;\n            count++;\n        }\n        if (coinCount < 4) {\n            // Horizontal check\n            coinCount = 0;\n            count = column;\n            while (count < this.columns && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count++;\n            }\n            count = column - 1;\n            while (count > -1 && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count--;\n            }\n            // Diagonal checks\n            if (coinCount < 4) {\n                coinCount = 0;\n                var rowCount = row - 1;\n                var colCount = column + 1;\n                while (coinCount < 4 && rowCount > -1 && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount++; //right columns\n                    rowCount--; //upper rows\n                }\n                colCount = column;\n                rowCount = row;\n                while (coinCount < 4 && rowCount < this.rows && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount--; // left columns\n                    rowCount++; // lower rows\n                }\n                if (coinCount < 4) {\n                    coinCount = 0;\n                    rowCount = row - 1;\n                    colCount = column - 1;\n                    while (coinCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount--; // left columns\n                        rowCount--; // upper rows\n                    }\n                    colCount = column;\n                    rowCount = row;\n                    while (coinCount < 4 && rowCount < this.rows && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount++; // right columns\n                        rowCount++; // lower rows\n                    }\n                }\n            }\n        }\n        return coinCount;\n    };\n    /**\n     * Checks if the board matrix is full\n     * @returns True if full, false if not\n     */\n    BoardLogic.prototype.isBoardFull = function () {\n        var full = true;\n        for (var col = 0; col < this.columns; col++) {\n            // Check upper row in every column\n            if (this.board[col][0] === coin_1.Coin.Empty) {\n                full = false;\n                break;\n            }\n        }\n        return full;\n    };\n    /**\n     * Places coin in a specific column\n     * @param color The color of the coin\n     * @param column The specified column number\n     * @returns Row number where the coin was placed. -1 if column is full.\n     */\n    BoardLogic.prototype.putCoin = function (color, column) {\n        for (var row = this.rows - 1; row >= 0; row--) {\n            if (this.board[column][row] === coin_1.Coin.Empty) {\n                this.board[column][row] = color;\n                return row;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Board matrix setter\n     * @param board The new board matrix\n     */\n    BoardLogic.prototype.setBoard = function (board) {\n        this.board = board;\n    };\n    /**\n     * Sets a single board matrix item, at the specified row and column\n     * @param coin The coin color\n     * @param col The column number\n     * @param row The row number\n     */\n    BoardLogic.prototype.setBoardItem = function (coin, col, row) {\n        this.board[col][row] = coin;\n    };\n    return BoardLogic;\n}());\nexports.BoardLogic = BoardLogic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dimensions = exports.skipTurnMaxWait = void 0;\n/**\n * @constant {number} skipTurnMaxWait - The maximum number of seconds that are allowed before skipping turn.\n */\nexports.skipTurnMaxWait = 60;\n/**\n * @constant dimensions - The column & row board dimensions available.\n */\nexports.dimensions = {\n    small: {\n        columns: 6,\n        rows: 5\n    },\n    medium: {\n        columns: 7,\n        rows: 6\n    },\n    large: {\n        columns: 9,\n        rows: 8\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Coin = void 0;\nvar Coin;\n(function (Coin) {\n    Coin[Coin[\"Empty\"] = 0] = \"Empty\";\n    Coin[Coin[\"Red\"] = 1] = \"Red\";\n    Coin[Coin[\"Green\"] = 2] = \"Green\";\n    Coin[Coin[\"Pink\"] = 3] = \"Pink\";\n    Coin[Coin[\"Purple\"] = 4] = \"Purple\";\n    Coin[Coin[\"Gold\"] = 5] = \"Gold\";\n    Coin[Coin[\"Black\"] = 6] = \"Black\";\n})(Coin || (exports.Coin = Coin = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = void 0;\nvar BoardDimensions;\n(function (BoardDimensions) {\n    BoardDimensions[BoardDimensions[\"Small\"] = 1] = \"Small\";\n    BoardDimensions[BoardDimensions[\"Medium\"] = 2] = \"Medium\";\n    BoardDimensions[BoardDimensions[\"Large\"] = 3] = \"Large\";\n})(BoardDimensions || (exports.BoardDimensions = BoardDimensions = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = exports.dimensions = exports.skipTurnMaxWait = exports.switchTurn = exports.randomiseTurn = exports.GameMessage = exports.Coin = exports.default = void 0;\nvar board_logic_1 = require(\"./board-logic\");\nObject.defineProperty(exports, \"default\", { enumerable: true, get: function () { return board_logic_1.BoardLogic; } });\nvar coin_1 = require(\"./enums/coin\");\nObject.defineProperty(exports, \"Coin\", { enumerable: true, get: function () { return coin_1.Coin; } });\nvar game_message_1 = require(\"./models/game-message\");\nObject.defineProperty(exports, \"GameMessage\", { enumerable: true, get: function () { return game_message_1.GameMessage; } });\nvar player_turn_1 = require(\"./player-turn\");\nObject.defineProperty(exports, \"randomiseTurn\", { enumerable: true, get: function () { return player_turn_1.randomiseTurn; } });\nObject.defineProperty(exports, \"switchTurn\", { enumerable: true, get: function () { return player_turn_1.switchTurn; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"skipTurnMaxWait\", { enumerable: true, get: function () { return constants_1.skipTurnMaxWait; } });\nObject.defineProperty(exports, \"dimensions\", { enumerable: true, get: function () { return constants_1.dimensions; } });\nvar dimensions_1 = require(\"./enums/dimensions\");\nObject.defineProperty(exports, \"BoardDimensions\", { enumerable: true, get: function () { return dimensions_1.BoardDimensions; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameMessage = void 0;\nvar GameMessage = /** @class */ (function () {\n    function GameMessage() {\n    }\n    /**\n     * Tests if message is an initial message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is initial\n     * @public\n     * @static\n     */\n    GameMessage.isInitialMessage = function (msg) {\n        return (!isNaN(msg['gameId']) && msg['color'] && msg['dimensions'] && msg['playerName'])\n            || msg['opponentName'];\n    };\n    /**\n     * Tests if message is an inactivity message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents inactivity\n     * @public\n     * @static\n     */\n    GameMessage.isInactivityMessage = function (msg) {\n        return msg['endGameDueToInactivity'] && msg['currentTurn'];\n    };\n    /**\n     * Tests if message is an action message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents an action\n     * @public\n     * @static\n     */\n    GameMessage.isActionMessage = function (msg) {\n        return msg['action'] && !isNaN(msg['column']) && msg['color'];\n    };\n    /**\n     * Tests if message is a winner message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents win\n     * @public\n     * @static\n     */\n    GameMessage.isWinnerMessage = function (msg) {\n        return msg['winner'];\n    };\n    /**\n     * Tests if message is a tie message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents tie\n     * @public\n     * @static\n     */\n    GameMessage.isTieMessage = function (msg) {\n        return msg['tie'];\n    };\n    /**\n     * Tests if message is a current turn message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents current turn\n     * @public\n     * @static\n     */\n    GameMessage.isCurrentTurnMessage = function (msg) {\n        return msg['currentTurn'];\n    };\n    /**\n     * Tests if message is a disconnect message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represent a disconnection\n     * @public\n     * @static\n     */\n    GameMessage.isDisconnectMessage = function (msg) {\n        return msg['hardDisconnect'];\n    };\n    /**\n     * Tests if message is an error message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is an error\n     * @public\n     * @static\n     */\n    GameMessage.isErrorMessage = function (msg) {\n        return msg['error'];\n    };\n    return GameMessage;\n}());\nexports.GameMessage = GameMessage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.switchTurn = exports.randomiseTurn = void 0;\n/**\n * Randomises player number\n * @returns {number} Random player number (1 or 2)\n */\nfunction randomiseTurn() {\n    return Math.floor(Math.random() * 2) + 1;\n}\nexports.randomiseTurn = randomiseTurn;\n/**\n * Switches turn depending on input\n * @param {number} currentTurn - The current player number (1 or 2)\n * @returns {number} The opposing player number (1 -> 2 or 2 -> 1)\n */\nfunction switchTurn(currentTurn) {\n    return currentTurn === 1 ? 2 : 1;\n}\nexports.switchTurn = switchTurn;\n","import { BoardDimensions, PlayerInfo, PlayerSettings, PlayerStats } from \"@danieldesira/daniels-connect4-common\";\r\nimport config from \"./config\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        google: any;\r\n    }\r\n}\r\n\r\nexport async function handleGoogleSignon(response: any) {\r\n    const {credential} = response;\r\n    storeGoogleToken(credential);\r\n}\r\n\r\nfunction storeGoogleToken(token: string) {\r\n    const data = {\r\n        token,\r\n        service: 'google'\r\n    } as AuthenticationModel;\r\n    localStorage.setItem('auth', JSON.stringify(data));\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('auth');\r\n}\r\n\r\nexport function getToken(): AuthenticationModel | null {\r\n    const val = localStorage.getItem('auth');\r\n    return val ? JSON.parse(val) as AuthenticationModel : null;\r\n}\r\n\r\nexport async function getUserData() {\r\n    return await authGet(`${config.httpServer}/auth`) as PlayerInfo;\r\n}\r\n\r\nexport async function loadStats() {\r\n    const stats = await authGet(`${config.httpServer}/stats`) as PlayerStats;\r\n    if (stats) {\r\n        Dialog.notify({\r\n            id: DialogIds.PlayerStats,\r\n            title: 'Stats',\r\n            text: [\r\n                    `Wins: ${stats.wins} - ${stats.winPercent.toFixed(2)}%`,\r\n                    `Losses: ${stats.losses} - ${stats.lossPercent.toFixed(2)}%`\r\n                ]\r\n        });\r\n    }\r\n}\r\n\r\nexport function initGoogleSSO(showLoginLogout: Function) {\r\n    window.google.accounts.id.initialize({\r\n        client_id: '966331594657-sjtp3m7ooigjma726j7aa4kcf5qdu2v7.apps.googleusercontent.com',\r\n        callback: (response: any) => {\r\n            handleGoogleSignon(response);\r\n            showLoginLogout();\r\n        }\r\n    });\r\n    window.google.accounts.id.prompt();\r\n}\r\n\r\nexport async function updateSettings(dimensions: BoardDimensions) {\r\n    try {\r\n        const params = {\r\n            dimensions\r\n        };\r\n        await authPost(`${config.httpServer}/settings`, params);\r\n    } catch {\r\n        Dialog.notify({\r\n            title: 'Settings',\r\n            text: ['Error saving settings!'],\r\n            id: DialogIds.ServerError\r\n        });\r\n    }\r\n}\r\n\r\nexport async function getSettings(): Promise<PlayerSettings> {\r\n    return await authGet(`${config.httpServer}/settings`);\r\n}\r\n\r\nasync function authGet(url: string): Promise<any> {\r\n    const {token, service} = getToken();\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Authorization': token,\r\n            'Service': service\r\n        }\r\n    });\r\n    const data = (res.status >= 200 && res.status < 300 ? await res.json() : null);\r\n    return data;\r\n}\r\n\r\nasync function authPost(url: string, data: any) {\r\n    const {token, service} = getToken();\r\n    const res = await fetch(url, {\r\n        method: 'post',\r\n        headers: {\r\n            'Authorization': token,\r\n            'Service': service,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n    if (res.status < 200 || res.status >= 300) {\r\n        throw `HTTP Status Code ${res.status}`;\r\n    }\r\n}","import Utils from \"./utils\";\r\n\r\nconst config = Utils.isLocal() ? {\r\n    httpServer: 'http://localhost:3000',\r\n    wsServer: 'ws://localhost:3000'\r\n} : {\r\n    httpServer: 'https://daniels-connect4-server.adaptable.app',\r\n    wsServer: 'wss://daniels-connect4-server.adaptable.app'\r\n};\r\n\r\nexport default config;","import CreditsDialogOptions from \"./dialog/credits-dialog-options\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function openCredits() {\r\n    const options: CreditsDialogOptions = {\r\n        id: DialogIds.Credits,\r\n        title: 'Contributors',\r\n        text: [],\r\n        sections: [\r\n            {\r\n                title: 'Development',\r\n                contributors: ['Daniel Desira']\r\n            },\r\n            {\r\n                title: 'Code Review',\r\n                contributors: ['Sergiu Nimat']\r\n            },\r\n            {\r\n                title: 'UI/UX Advice',\r\n                contributors: ['Pierre Borġ', 'Martina Sultana', 'Jorge Montalbán', 'Abigail Magro']\r\n            },\r\n            {\r\n                title: 'Testing',\r\n                contributors: ['George Zaharia']\r\n            }\r\n        ]\r\n    };\r\n    Dialog.credit(options);\r\n}","import ConfirmationDialogOptions from \"./confirmation-dialog-options\";\r\nimport CreditsDialogOptions from \"./credits-dialog-options\";\r\nimport DialogOptions from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport PromptDialogOptions from \"./prompt-dialog-options\";\r\nimport PromptInput, { PromptSelect } from \"./prompt-input\";\r\n\r\nexport default class Dialog {\r\n    \r\n    private static modal(type: DialogType, options: DialogOptions) {\r\n        if (!document.getElementById(options.id)) {\r\n            const modal = document.createElement('div') as HTMLDivElement;\r\n            modal.tabIndex = 1;\r\n            modal.id = options.id;\r\n            modal.classList.add('dialog');\r\n\r\n            if (options.title) {\r\n                const h1 = document.createElement('h1') as HTMLHeadingElement;\r\n                h1.innerText = options.title;\r\n                h1.classList.add('dialog-title');\r\n                modal.appendChild(h1);\r\n                modal.appendChild(document.createElement('hr'));\r\n            }\r\n\r\n            const textContainer = document.createElement('div') as HTMLDivElement;\r\n            this.appendText(options.text, textContainer);\r\n            modal.appendChild(textContainer);\r\n\r\n            switch (type) {\r\n                case DialogType.Confirmation: {\r\n                    const o = options as ConfirmationDialogOptions;\r\n                    const btnContainer = document.createElement('div') as HTMLDivElement;\r\n                    btnContainer.classList.add('dialog-btn-container');\r\n                    modal.appendChild(btnContainer);\r\n\r\n                    this.appendBtn(btnContainer, 'Yes', () => {\r\n                        o.yesCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.yesColor, 'button');\r\n                    this.appendBtn(btnContainer, 'No', () => {\r\n                        o.noCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.noColor, 'button');\r\n                    break;\r\n                }\r\n                case DialogType.Notification: {\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Prompt: {\r\n                    const o = options as PromptDialogOptions;\r\n                    this.appendForm(modal, o);\r\n                    break;\r\n                }\r\n                case DialogType.Credits: {\r\n                    const o = options as CreditsDialogOptions;\r\n                    this.appendCredits(textContainer, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            document.body.appendChild(modal);\r\n        }\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement | HTMLFormElement,\r\n                text: string,\r\n                callback: any,\r\n                bgColor: string,\r\n                btnType: 'submit' | 'button' | 'reset') {\r\n        const btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = btnType;\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add(`dialog-btn-${bgColor}`);\r\n        if (btnType === 'button') {\r\n            btn.addEventListener('click', callback);\r\n        }\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendForm(modal: HTMLDivElement, options: PromptDialogOptions) {\r\n        const inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        modal.appendChild(inputContainer);\r\n\r\n        const form = document.createElement('form') as HTMLFormElement;\r\n        inputContainer.appendChild(form);\r\n        form.addEventListener('submit', (event: SubmitEvent) => {\r\n            event.preventDefault();\r\n            if (options.onOK) {\r\n                options.onOK();\r\n            }\r\n            this.closeModal(modal);\r\n        });\r\n\r\n        this.appendInputs(form, options.inputs);\r\n        this.appendSelects(form, options.selects);\r\n\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        form.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', null, 'green', 'submit');\r\n        this.appendBtn(btnContainer, 'Cancel', () => {\r\n            if (options.onCancel) {\r\n                options.onCancel();\r\n            }\r\n            this.closeModal(modal);\r\n        }, 'red', 'button');\r\n    }\r\n\r\n    private static appendInputs(form: HTMLFormElement, inputs: Array<PromptInput>) {\r\n        for (let i: number = 0; i < inputs.length; i++) {\r\n            const input = document.createElement('input');\r\n            input.type = inputs[i].type;\r\n            input.id = `dialog-input-${inputs[i].name}`;\r\n            input.name = `dialog-input-${inputs[i].name}`;\r\n            input.ariaPlaceholder = `Enter ${inputs[i].label}`;\r\n            input.placeholder = `Enter ${inputs[i].label}`;\r\n            input.maxLength = inputs[i].limit;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            input.required = inputs[i].required;\r\n            input.ariaRequired = inputs[i].required.toString();\r\n            form.appendChild(input);\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendSelects(form: HTMLFormElement, selects: Array<PromptSelect>) {\r\n        for (let i: number = 0; i < selects.length; i++) {\r\n            const select = document.createElement('select');\r\n            select.id = `dialog-select-${selects[i].name}`;\r\n            select.name = `dialog-select-${selects[i].name}`;\r\n            select.ariaPlaceholder = selects[i].label;\r\n            select.classList.add('dialog-input');\r\n            select.required = selects[i].required;\r\n            select.ariaRequired = selects[i].required.toString();\r\n            form.appendChild(select);\r\n\r\n            for (let j = 0; j < selects[i].options.length; j++) {\r\n                const option = document.createElement('option');\r\n                option.innerText = selects[i].options[j].text;\r\n                option.value = selects[i].options[j].value;\r\n                if (selects[i].default === parseInt(selects[i].options[j].value)) {\r\n                    option.selected = true;\r\n                    option.ariaSelected = \"true\";\r\n                }\r\n                select.appendChild(option);\r\n            }\r\n\r\n            const handleChange = selects[i].onChange;\r\n            if (handleChange) {\r\n                handleChange(select.selectedOptions[0].value);\r\n                select.addEventListener('change', () => handleChange(select.selectedOptions[0].value));\r\n            }\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement | HTMLFormElement) {\r\n        const br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendText(text: Array<string>, container: HTMLDivElement) {\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        for (let i: number = 0; i < text.length; i++) {\r\n            const p = document.createElement('p') as HTMLParagraphElement;\r\n            p.innerText = text[i];\r\n            container.appendChild(p);\r\n        }\r\n    }\r\n\r\n    private static appendCredits(container: HTMLDivElement, options: CreditsDialogOptions) {\r\n        for (let i: number = 0; i < options.sections.length; i++) {\r\n            const h2 = document.createElement('h2');\r\n            h2.innerText = options.sections[i].title;\r\n            container.appendChild(h2);\r\n            const ul = document.createElement('ul');\r\n            for (let j: number = 0; j < options.sections[i].contributors.length; j++) {\r\n                const li = document.createElement('li');\r\n                li.innerText = options.sections[i].contributors[j];\r\n                ul.appendChild(li);\r\n            }\r\n            container.appendChild(ul);\r\n        }\r\n    }\r\n\r\n    private static appendOKButton(modal: HTMLDivElement) {\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        modal.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', () => {\r\n            this.closeModal(modal);\r\n        }, 'green', 'button');\r\n    }\r\n\r\n    private static listenKeyboard(modal: HTMLDivElement) {\r\n        modal.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape' || event.key === 'Enter') {\r\n                this.closeModal(modal);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        if (document.body.contains(modal)) {\r\n            document.body.removeChild(modal);\r\n        }\r\n    }\r\n\r\n    public static confirm(options: ConfirmationDialogOptions) {\r\n        Dialog.modal(DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(options: DialogOptions) {\r\n        Dialog.modal(DialogType.Notification, options);\r\n    }\r\n\r\n    public static prompt(options: PromptDialogOptions) {\r\n        Dialog.modal(DialogType.Prompt, options);\r\n    }\r\n\r\n    public static credit(options: CreditsDialogOptions) {\r\n        Dialog.modal(DialogType.Credits, options);\r\n    }\r\n\r\n    public static closeAllOpenDialogs() {\r\n        const dialogs = document.getElementsByClassName('dialog') as HTMLCollectionOf<HTMLDivElement>;\r\n        for (let i: number = 0; i < dialogs.length; i++) {\r\n            this.closeModal(dialogs[i]);\r\n        }\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2,\r\n    Credits = 3\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport { PromptSelect } from \"./dialog/prompt-input\";\r\n\r\nconst dimensionsSelectData: PromptSelect = {\r\n    name: 'dimensions',\r\n    label: 'Dimensions',\r\n    required: true,\r\n    options: [\r\n        {\r\n            text: 'Small (6x5)',\r\n            value: BoardDimensions.Small.toString()\r\n        },\r\n        {\r\n            text: 'Medium (7x6)',\r\n            value: BoardDimensions.Medium.toString()\r\n        },\r\n        {\r\n            text: 'Large (9x8)',\r\n            value: BoardDimensions.Large.toString()\r\n        }\r\n    ],\r\n    default: 3,\r\n    onChange: () => {}\r\n};\r\n\r\nexport default dimensionsSelectData;","export enum DialogIds {\r\n    PlayerNames = 'player-input-dialog',\r\n    ServerError = 'server-error-dialog',\r\n    Instructions = 'instructions-dialog',\r\n    GameEnd = 'game-end-dialog',\r\n    ExitGame = 'exit-game-dialog',\r\n    ContinueGame = 'continue-game-dialog',\r\n    Saved = 'saved-notification-dialog',\r\n    PlayerStats = 'player-stats-dialog',\r\n    Settings = 'settings-dialog',\r\n    Credits = 'credits-dialog'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandCoin = './sounds/land-coin.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import Position from './position';\r\nimport PlayerNameSection from './player-name-section';\r\nimport GameOptions from './game-options';\r\nimport BoardLogic, { Coin, switchTurn } from '@danieldesira/daniels-connect4-common';\r\n\r\nexport default abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    protected context: CanvasRenderingContext2D;\r\n    protected board: BoardLogic;\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNameSection: PlayerNameSection;\r\n    private gameIndicatorsContainer: HTMLDivElement;\r\n    private gameMenu: HTMLDivElement;\r\n    protected timerSpan: HTMLSpanElement;\r\n    protected countdownSpan: HTMLSpanElement;\r\n\r\n    protected turn: Coin = Coin.Red;\r\n\r\n    private coinRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected currentCoinColumn: number = 4;\r\n    protected static moveLeftKeys: Array<string> = ['a', 'A', 'ArrowLeft'];\r\n    protected static moveRightKeys: Array<string> = ['d', 'D', 'ArrowRight'];\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNameSection = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n\r\n        if (options.gameIndicatorsId) {\r\n            this.gameIndicatorsContainer = document.getElementById(options.gameIndicatorsId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.menuId) {\r\n            this.gameMenu = document.getElementById(options.menuId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timerSpan = document.getElementById(options.timerId) as HTMLSpanElement;\r\n        }\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        this.showGame();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.initPlayerNames();\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        const boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = this.board.getColumns() - 1; col >= 0; col--) {\r\n            for (let row = this.board.getRows() - 1; row >= 0; row--) {\r\n                this.context.fillStyle = Game.getColor(this.board.getBoard()[col][row]);\r\n                this.drawCoin(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.addEventListener('click', this.exit);\r\n        document.body.addEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.addEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n    protected abstract handleKeyDown(event: KeyboardEvent): void;\r\n    protected abstract canvasTouchmove(event: TouchEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent | Touch): number {\r\n        const position = Position.getCursorPosition(event, this.canvas);\r\n        const column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        this.turn = switchTurn(this.turn);\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveCoin() {\r\n        this.clearUpper();\r\n        this.context.fillStyle = Game.getColor(this.turn);\r\n        this.paintCoinToDrop(this.currentCoinColumn);\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = this.board.putCoin(this.turn, this.currentCoinColumn);\r\n            \r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.drawCoin(this.currentCoinColumn, row);\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected abstract showWinDialog(winner: string, currentTurn: Coin);\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            this.resetValues();\r\n            this.hideGame();\r\n\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.clear();\r\n            }\r\n        }, 3000);\r\n    }\r\n\r\n    protected paintCoinToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.coinRadius, this.coinRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.removeEventListener('click', this.exit);\r\n        document.body.removeEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.removeEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.hideGame();\r\n        this.resetValues();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n    }\r\n\r\n    protected resizeCanvas = () => {\r\n        const topHeight = 100;\r\n\r\n        this.canvas.height = window.innerHeight - topHeight;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.coinRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.coinRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.board) {\r\n            this.colGap = this.canvas.width / this.board.getColumns();\r\n            this.rowGap = (this.canvas.height - topHeight) / this.board.getRows();\r\n            this.colOffset = this.colGap / 2;\r\n            this.paintBoard();\r\n        }\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Coin.Red;\r\n        this.board.resetBoard();\r\n        \r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.reset();\r\n        }\r\n    }\r\n\r\n    private drawCoin(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.coinRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNameSection && this.playerNameSection.areBothPlayersConnected();\r\n    }\r\n\r\n    private showGame() {\r\n        this.canvas.classList.remove('hide');\r\n        this.exitBtn.classList.remove('hide');\r\n        this.gameIndicatorsContainer.classList.remove('hide');\r\n        this.gameMenu.classList.add('hide');\r\n    }\r\n\r\n    private hideGame() {\r\n        this.canvas.classList.add('hide');\r\n        this.exitBtn.classList.add('hide');\r\n        this.gameIndicatorsContainer.classList.add('hide');\r\n        this.gameMenu.classList.remove('hide');\r\n    }\r\n\r\n    protected static getColor(color: Coin): string {\r\n        let value: string = '';\r\n        switch (color) {\r\n            case Coin.Empty:\r\n                value = 'lightyellow';\r\n                break;\r\n            case Coin.Red:\r\n                value = 'red';\r\n                break;\r\n            case Coin.Green:\r\n                value = 'greenyellow';\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function showInstructions() {\r\n    const text = [\r\n        'The principle behind Connect4 is simple:',\r\n        'The player who first places 4 coins next to each other, wins. You may ' +\r\n            'match horizontally, vertically or diagonally.',\r\n        'Furthermore, in Network Play, you must place your coin within 60 seconds. ' +\r\n            'If you fail to do so, you pass the turn to your opponent.',\r\n        'Further note that exiting in Same Device Play, saves game progress. You ' +\r\n            'will be presented with the option to continue the same game the next ' +\r\n            'time. This does not work for Network Play because your opponent might ' +\r\n            'not be available the next time and you might not even know him/her/them.',\r\n        'Good luck and have fun playing!'\r\n    ];\r\n    Dialog.notify({\r\n        id: DialogIds.Instructions,\r\n        text,\r\n        title: 'Instructions'\r\n    });\r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common/lib/enums/coin\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport Socket from \"./socket\";\r\nimport Utils from \"./utils\";\r\nimport { ActionMessage, BoardDimensions, CurrentTurnMessage, ErrorMessage, GameMessage, InitialMessage, WinnerMessage, skipTurnMaxWait } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport { getToken } from \"./authentication\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\n\r\nexport default class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n    private logoutBtn: HTMLButtonElement;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.logoutBtn = document.getElementById(options.logoutBtnId) as HTMLButtonElement;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): NetworkGame {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.board = new BoardLogic(BoardDimensions.Large);\r\n        const auth = getToken();\r\n        if (auth) {\r\n            this.defineSocket(auth);\r\n            this.startCountdown();\r\n            super.start();\r\n            document.body.classList.add('waiting');\r\n            this.disableLogoutBtn();\r\n            if (this.timerSpan) {\r\n                this.timerSpan.classList.add('hide');\r\n            }\r\n            if (this.countdownSpan) {\r\n                this.countdownSpan.classList.remove('hide');\r\n            }\r\n        } else {\r\n            Dialog.notify({\r\n                title: 'Error',\r\n                text: ['User not logged in!'],\r\n                id: DialogIds.ServerError\r\n            });\r\n        }\r\n    }\r\n\r\n    private defineSocket(auth: AuthenticationModel) {\r\n        this.socket = new Socket(auth);\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n        this.socket.onGameCancel = this.confirmExit;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n            if (this.socket && this.playerNameSection) {\r\n                if (data.opponentName) {\r\n                    this.toggleWaitingClass();\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerGreen(data.opponentName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerRed(data.opponentName);\r\n                    }\r\n                }\r\n    \r\n                if (data.playerName) {\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(data.playerName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerGreen(data.playerName);\r\n                    }\r\n                }\r\n        \r\n                if (data.color) {\r\n                    if (data.color === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(this.socket.getPlayerName());\r\n                    } else {\r\n                        this.playerNameSection.setPlayerGreen(this.socket.getPlayerName());\r\n                    }\r\n                }\r\n\r\n                if (data.dimensions) {\r\n                    this.board = new BoardLogic(data.dimensions);\r\n                    this.resizeCanvas();\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isActionMessage(messageData)) {\r\n            const data = messageData as ActionMessage;\r\n            if (data.action === 'mousemove') {\r\n                this.currentCoinColumn = data.column;\r\n                this.moveCoin();\r\n            }\r\n    \r\n            if (data.action === 'click') {\r\n                this.turn = data.color;\r\n                this.currentCoinColumn = data.column;\r\n                this.landCoin();\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.turnCountDown = skipTurnMaxWait;\r\n            this.toggleWaitingClass();\r\n        }\r\n\r\n        if (GameMessage.isWinnerMessage(messageData)) {\r\n            const data = messageData as WinnerMessage;\r\n            let winner: string = null;\r\n            if (this.playerNameSection) {\r\n                if (data.winner === Coin.Red) {\r\n                    winner = `${this.playerNameSection.getPlayerRed()} (Red)`;\r\n                } else {\r\n                    winner = `${this.playerNameSection.getPlayerGreen()} (Green)`;\r\n                }\r\n            }\r\n            this.showWinDialog(winner, data.winner);\r\n\r\n            this.closeGameAfterWinning();\r\n            document.body.classList.remove('waiting');\r\n            this.enableLogoutBtn();\r\n        }\r\n\r\n        if (GameMessage.isTieMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Game resulted in tie!'],\r\n                title: null\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.enableLogoutBtn();\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.toggleWaitingClass();\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.indicateTurn(this.turn);\r\n            }\r\n        }\r\n\r\n        if (GameMessage.isDisconnectMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Your opponent disconnected. You win!'],\r\n                title: 'We have a winner!'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.enableLogoutBtn();\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isErrorMessage(messageData)) {\r\n            const data = messageData as ErrorMessage;\r\n            Dialog.closeAllOpenDialogs();\r\n            Dialog.notify({\r\n                id: DialogIds.ServerError,\r\n                text: [data.error],\r\n                title: 'Error'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.enableLogoutBtn();\r\n            this.closeGameAfterWinning();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n        this.enableLogoutBtn();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'click',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n            \r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            // Assume the game is still going on\r\n            this.switchTurn();\r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.paintCoinToDrop(this.currentCoinColumn);\r\n            Utils.playSound(Sound.LandCoin);\r\n            this.toggleWaitingClass();\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    private toggleWaitingClass() {\r\n        if (this.socket.getPlayerColor() === this.turn) {\r\n            document.body.classList.remove('waiting');\r\n        } else {\r\n            document.body.classList.add('waiting');\r\n        }\r\n    }\r\n\r\n    public exit = () => {\r\n        Dialog.confirm({\r\n            id: DialogIds.ExitGame,\r\n            title: null,\r\n            text: ['Network game in progress. Are you sure you want to quit?'],\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {},\r\n            yesColor: 'red',\r\n            noColor: 'green'\r\n        });\r\n    };\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n        Dialog.closeAllOpenDialogs();\r\n        document.body.classList.remove('waiting');\r\n        this.enableLogoutBtn();\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected showWinDialog(winner: string, currentTurn: Coin) {\r\n        const winMsg: Array<string> = [];\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.socket && this.socket.getPlayerColor() === currentTurn) {\r\n            winMsg.push('You win!');\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg.push('You lose!');\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'Game Ends'\r\n        });\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n    };\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > skipTurnMaxWait / 2) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let data: GameMessage;\r\n\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                data = {\r\n                    column: this.currentCoinColumn,\r\n                    action: 'click',\r\n                    color: this.turn\r\n                };\r\n                this.socket.send(data);\r\n\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n\r\n    private disableLogoutBtn() {\r\n        this.logoutBtn.disabled = true;\r\n        this.logoutBtn.ariaDisabled = 'true';\r\n    }\r\n\r\n    private enableLogoutBtn() {\r\n        this.logoutBtn.disabled = false;\r\n        this.logoutBtn.ariaDisabled = 'false';\r\n    }\r\n    \r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public initPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan && !this.playerGreen) {\r\n            this.playerGreenSpan.innerText = waiting;\r\n        }\r\n        if (this.playerRedSpan && !this.playerRed) {\r\n            this.playerRedSpan.innerText = waiting;\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed = (): string => this.playerRed;\r\n    public getPlayerGreen = (): string => this.playerGreen;\r\n    public areBothPlayersConnected = (): boolean => !!this.playerRed && !!this.playerGreen;\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Coin) {\r\n        if (turn === Coin.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export default class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event: MouseEvent | Touch, canvas: HTMLCanvasElement): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        } else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Utils from \"./utils\";\r\nimport Timer from \"./timer\";\r\nimport { BoardDimensions, Coin, randomiseTurn } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport PreviousGameData from \"./models/previous-game-data\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\nimport dimensionsSelectData from \"./dimensions-select\";\r\n\r\nexport default class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n    private timer: Timer;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        \r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): SameDeviceGame {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    private setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n        if (this.countdownSpan) {\r\n            this.countdownSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        this.setUpPlayerNames();\r\n        \r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n\r\n        const onPromptOK = () => {\r\n            const redInput = document.getElementById('dialog-input-red') as HTMLInputElement;\r\n            const greenInput = document.getElementById('dialog-input-green') as HTMLInputElement;\r\n            if (redInput.value && greenInput.value && redInput.value.trim()\r\n                    && greenInput.value.trim()) {\r\n                this.playerNameSection?.setPlayerRed(redInput.value);\r\n                this.playerNameSection?.setPlayerGreen(greenInput.value);\r\n                this.setTimer();\r\n            }\r\n\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            this.board = new BoardLogic(dimensions);\r\n        };\r\n\r\n        if (!gameData) {\r\n            dimensionsSelectData.onChange = (value: string) => {\r\n                const dimensions = parseInt(value);\r\n                this.board = new BoardLogic(dimensions);\r\n                this.resizeCanvas();\r\n            };\r\n            Dialog.prompt({\r\n                id: DialogIds.PlayerNames,\r\n                title: 'Input Players',\r\n                text: ['Please enter player names! (10 characters or less.)'],\r\n                onOK: () => onPromptOK(),\r\n                onCancel: this.exit,\r\n                inputs: [\r\n                    {\r\n                        label: 'Player Red',\r\n                        name: 'red',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    },\r\n                    {\r\n                        label: 'Player Green',\r\n                        name: 'green',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    }\r\n                ],\r\n                selects: [dimensionsSelectData]\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkGameData() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        if (gameData) {\r\n            Dialog.confirm({\r\n                id: DialogIds.ContinueGame,\r\n                title: null,\r\n                text: ['Do you want to continue playing the previous game?'],\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame,\r\n                yesColor: 'green',\r\n                noColor: 'red'\r\n            });\r\n        } else {\r\n            this.turn = randomiseTurn();\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        this.clearGameData();\r\n        this.turn = randomiseTurn();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        this.turn = gameData.nextTurn;\r\n        this.board = new BoardLogic(gameData.dimensions);\r\n        this.board.setBoard(gameData.board);\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunning(gameData.secondsRunning);\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setPlayerGreen(gameData.playerGreen);\r\n            this.playerNameSection.setPlayerRed(gameData.playerRed);\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            const gameData: PreviousGameData = {\r\n                nextTurn: this.turn,\r\n                board: this.board.getBoard(),\r\n                secondsRunning: this.timer?.getSecondsRunning(),\r\n                playerRed: this.playerNameSection?.getPlayerRed(),\r\n                playerGreen: this.playerNameSection?.getPlayerGreen(),\r\n                dimensions: this.board.getDimensions()\r\n            };\r\n            localStorage.setItem('gameData', JSON.stringify(gameData));\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        this.saveGame();\r\n        Dialog.closeAllOpenDialogs();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.clearGameData();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            const coinCount = this.board.countConsecutiveCoins(this.currentCoinColumn, row, this.turn);\r\n\r\n            if (coinCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.turn === Coin.Red) {\r\n                    winner = `${this.playerNameSection?.getPlayerRed()} (Red)`;\r\n                } else if (this.turn === Coin.Green) {\r\n                    winner = `${this.playerNameSection?.getPlayerGreen()} (Green)`;\r\n                }\r\n\r\n                this.showWinDialog(winner, this.turn);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.board.isBoardFull()) {\r\n                const message: string = `${this.playerNameSection?.getPlayerRed()} (Red) and ${this.playerNameSection?.getPlayerGreen()} (Green) are tied!`;\r\n                Dialog.notify({\r\n                    id: DialogIds.GameEnd,\r\n                    title: 'Tie',\r\n                    text: [message]\r\n                });\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = Game.getColor(this.turn);\r\n                this.paintCoinToDrop(this.currentCoinColumn);\r\n                Utils.playSound(Sound.LandCoin);\r\n            }\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected showWinDialog(winner: string, _: Coin) {\r\n        const winMsg: Array<string> = new Array();\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.timer) {\r\n            winMsg.push(`Time taken: ${this.timer.getTimeInStringFormat()}`);\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'We have a winner!'\r\n        });\r\n    }\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n\r\n    private clearGameData() {\r\n        localStorage.removeItem('gameData');\r\n    }\r\n\r\n}","import { getToken } from \"./authentication\";\r\nimport config from \"./config\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { Coin, GameMessage, InitialMessage } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Coin;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n    public onGameCancel: Function;\r\n\r\n    public constructor(auth: AuthenticationModel) {\r\n        this.connect(auth);\r\n    }\r\n\r\n    private connect(auth: AuthenticationModel) {\r\n        let url: string = `${config.wsServer}?token=${auth.token}&service=${auth.service}`;\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += `&playerColor=${this.playerColor}&gameId=${this.gameId}`;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send = (data: GameMessage) => this.webSocket.send(JSON.stringify(data));\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor = (): Coin => this.playerColor;\r\n    public getPlayerName = (): string => this.playerName;\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        const messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n\r\n            if (!this.gameId) {\r\n                this.gameId = data.gameId;\r\n            }\r\n\r\n            if (!this.playerName) {\r\n                this.playerName = data.playerName;\r\n            }\r\n            \r\n            if (!this.playerColor) {\r\n                this.playerColor = data.color;\r\n            }\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.closeAllOpenDialogs();\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            text: ['Problem connecting to server!'],\r\n            title: 'Error'\r\n        });\r\n\r\n        document.body.classList.remove('waiting');\r\n    };\r\n\r\n    private onClose = () => {\r\n        const auth = getToken();\r\n        if (auth) {\r\n            this.connect(auth);\r\n        }\r\n    };\r\n}","export default class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private interval: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        const minutes: number = Math.floor(this.secondsRunning / 60);\r\n        const seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = `${minutes}:${(seconds < 10 ? '0' : '')}${seconds}`;\r\n        \r\n        if (this.timerSpan.classList.contains('hide')) {\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearInterval(this.interval);\r\n        } else {\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    \r\n    public setSecondsRunning(secondsRunning: number) {\r\n        this.secondsRunning = secondsRunning;\r\n    }\r\n\r\n    public getSecondsRunning = () => this.secondsRunning;   \r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export default class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        const audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport { getSettings, getUserData, initGoogleSSO, loadStats, logout, updateSettings } from \"./lib/authentication\";\r\nimport Dialog from \"./lib/dialog/dialog\";\r\nimport { DialogIds } from \"./lib/enums/dialog-ids\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\nimport GameOptions from \"./lib/game-options\";\r\nimport NetworkGame from \"./lib/network-game\";\r\nimport SameDeviceGame from \"./lib/same-device-game\";\r\nimport dimensionsSelect from \"./lib/dimensions-select\";\r\nimport openCredits from \"./lib/credits\";\r\nimport showInstructions from \"./lib/instructions\";\r\n\r\nconst samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nconst networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nconst instructionsBtn = document.getElementById('instructions') as HTMLButtonElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n});\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n});\r\n\r\nfunction initGame(mode: GameMode) {\r\n    try {\r\n        const options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            countdownId: 'countdown',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            menuId: 'menu',\r\n            gameIndicatorsId: 'gameIndicators',\r\n            logoutBtnId: 'logout'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            const connect4 = NetworkGame.getInstance(options);\r\n            connect4.start();\r\n        } else {\r\n            const connect4 = SameDeviceGame.getInstance(options);\r\n            connect4.start();\r\n        }\r\n    } catch (ex) {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem encountered!']\r\n        });\r\n        console.error(ex);\r\n    }\r\n}\r\n\r\ninstructionsBtn.addEventListener('click', showInstructions);\r\n\r\nconst shareBtn = document.getElementById('shareBtn') as HTMLAnchorElement;\r\nshareBtn.addEventListener('click', (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    if (navigator.canShare) {\r\n        const shareData = {\r\n            url: location.href,\r\n            title: `Daniel's Connect4`\r\n        };\r\n        navigator.share(shareData)\r\n            .catch((err) => console.error(`Problem while sharing: ${err}`));\r\n    } else {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem opening share menu!']\r\n        });\r\n    }\r\n});\r\n\r\nconst googleSignonBtn = document.getElementById('googleSignon') as HTMLButtonElement;\r\ngoogleSignonBtn.addEventListener('click', () => {\r\n    initGoogleSSO(showLoginLogout);\r\n});\r\n\r\nshowLoginLogout();\r\n\r\nconst logoutBtn = document.getElementById('logout') as HTMLButtonElement;\r\nlogoutBtn.addEventListener('click', () => {\r\n    logout();\r\n    showLoginLogout();\r\n});\r\n\r\nconst statsBtn = document.getElementById('stats') as HTMLButtonElement;\r\nstatsBtn.addEventListener('click', async () => {\r\n    await loadStats();\r\n});\r\n\r\nconst settingsBtn = document.getElementById('settings') as HTMLButtonElement;\r\nsettingsBtn.addEventListener('click', async () => {\r\n    dimensionsSelect.onChange = null;\r\n    const settings = await getSettings();\r\n    dimensionsSelect.default = settings.dimensions;\r\n    Dialog.prompt({\r\n        id: DialogIds.Settings,\r\n        title: 'Settings',\r\n        text: [],\r\n        inputs: [],\r\n        selects: [dimensionsSelect],\r\n        onOK: async () => {\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            await updateSettings(dimensions);\r\n        },\r\n        onCancel: null\r\n    });\r\n});\r\n\r\nasync function showLoginLogout() {\r\n    const loginBtns = document.getElementById('login-btns') as HTMLDivElement;\r\n    const loggedInArea = document.getElementById('slidebar') as HTMLDivElement;\r\n    if (localStorage.getItem('auth')) {\r\n        loginBtns.classList.add('hide');\r\n        loggedInArea.classList.remove('hide');\r\n        await loadUserData();\r\n    } else {\r\n        loginBtns.classList.remove('hide');\r\n        loggedInArea.classList.add('hide');\r\n    }\r\n}\r\n\r\nasync function loadUserData() {\r\n    const user = await getUserData();\r\n    if (user) {\r\n        const userName = document.getElementById('authPlayerName') as HTMLButtonElement;\r\n        userName.innerText = user.user;\r\n        const authPlayerPicture = document.getElementById('authPlayerPicture') as HTMLImageElement;\r\n        authPlayerPicture.src = user.picUrl;\r\n    } else {\r\n        logout();\r\n        showLoginLogout();\r\n    }\r\n}\r\n\r\nconst creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\ncreditsBtn.addEventListener('click', openCredits);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["Object","defineProperty","exports","value","BoardLogic","constants_1","coin_1","dimensions_1","dim","_this","this","board","getColumns","columns","getRows","rows","getDimensions","dimensions","getBoard","resetBoard","initBoard","BoardDimensions","Small","small","Medium","medium","Large","large","prototype","Array","col","row","Coin","Empty","countConsecutiveCoins","column","currentTurn","count","coinCount","rowCount","colCount","isBoardFull","full","putCoin","color","setBoard","setBoardItem","coin","skipTurnMaxWait","switchTurn","randomiseTurn","GameMessage","board_logic_1","enumerable","get","game_message_1","player_turn_1","isInitialMessage","msg","isNaN","isInactivityMessage","isActionMessage","isWinnerMessage","isTieMessage","isCurrentTurnMessage","isDisconnectMessage","isErrorMessage","Math","floor","random","handleGoogleSignon","response","data","token","service","localStorage","setItem","JSON","stringify","getToken","val","getItem","parse","authGet","url","fetch","headers","res","status","json","authPost","method","body","removeItem","httpServer","stats","notify","id","DialogIds","PlayerStats","title","text","wins","winPercent","toFixed","losses","lossPercent","showLoginLogout","window","google","accounts","initialize","client_id","callback","prompt","params","ServerError","config","isLocal","wsServer","options","Credits","sections","contributors","credit","modal","type","document","getElementById","createElement","tabIndex","classList","add","h1","innerText","appendChild","textContainer","appendText","DialogType","Confirmation","btnContainer","appendBtn","yesCallback","closeModal","yesColor","noCallback","noColor","Notification","appendOKButton","listenKeyboard","Prompt","o","appendForm","appendCredits","container","bgColor","btnType","btn","addEventListener","inputContainer","form","event","preventDefault","onOK","appendInputs","inputs","appendSelects","selects","onCancel","i","length","input","name","ariaPlaceholder","label","placeholder","maxLength","limit","required","ariaRequired","toString","appendBrElement","select","j","option","default","parseInt","selected","ariaSelected","handleChange","onChange","selectedOptions","br","p","h2","ul","li","key","contains","removeChild","confirm","Dialog","closeAllOpenDialogs","dialogs","getElementsByClassName","dimensionsSelectData","GameMode","Sound","turn","Red","currentCoinColumn","resizeCanvas","canvas","height","innerHeight","width","innerWidth","coinRadius","colGap","rowGap","colOffset","paintBoard","canvasId","context","getContext","exitBtnId","exitBtn","playerRedId","playerGreenId","playerNameSection","gameIndicatorsId","gameIndicatorsContainer","menuId","gameMenu","timerId","timerSpan","countdownId","countdownSpan","start","showGame","initPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","getColor","drawCoin","canvasMousemove","canvasClick","beforeUnload","exit","handleKeyDown","canvasTouchmove","getColumnFromCursorPosition","position","getCursorPosition","round","x","moveCoin","clearUpper","paintCoinToDrop","landCoin","closeGameAfterWinning","cleanUpEvents","setTimeout","resetValues","hideGame","clear","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","reset","areBothPlayersConnected","remove","Green","moveLeftKeys","moveRightKeys","Instructions","onSocketMessage","messageData","socket","opponentName","toggleWaitingClass","getPlayerColor","setPlayerGreen","setPlayerRed","playerName","getPlayerName","action","turnCountDown","winner","getPlayerRed","getPlayerGreen","showWinDialog","enableLogoutBtn","GameEnd","error","onSocketError","send","firstTouch","changedTouches","ExitGame","confirmExit","close","returnValue","turnCountDownCallback","adaptCountDownColor","includes","logoutBtn","logoutBtnId","getInstance","NetworkGame","instance","auth","defineSocket","startCountdown","disableLogoutBtn","onMessageCallback","onErrorCallback","onGameCancel","stopCountdown","playSound","LandCoin","winMsg","push","Win","Lose","resetCountdown","turnCountDownInterval","setInterval","clearInterval","disabled","ariaDisabled","playerRed","playerGreen","playerRedSpan","playerGreenSpan","waiting","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","Position","offsetLeft","offsetTop","setTimer","timer","set","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","clearGameData","saveGame","stop","pageVisibilityChange","pauseWhenDocumentHidden","SameDeviceGame","checkGameData","setUpPlayerNames","PlayerNames","redInput","greenInput","trim","dimensionsSelect","onPromptOK","ContinueGame","gameData","nextTurn","setSecondsRunning","secondsRunning","getSecondsRunning","message","_","getTimeInStringFormat","webSocket","playerColor","onMessage","gameId","onError","onClose","connect","WebSocket","onmessage","onerror","onclose","timerCallback","minutes","seconds","interval","hidden","location","protocol","hostname","path","Audio","play","samePCBtn","networkBtn","instructionsBtn","initGame","mode","Network","ex","console","loginBtns","loggedInArea","loadUserData","getUserData","user","src","picUrl","logout","SamePC","navigator","canShare","shareData","href","share","catch","err","initGoogleSSO","loadStats","getSettings","settings","Settings","updateSettings","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call"],"sourceRoot":""}