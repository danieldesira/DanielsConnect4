{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","import { ConfirmationDialogOptions } from \"./confirmation-dialog-options\";\r\nimport { DialogOptions } from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport { PromptDialogOptions } from \"./prompt-dialog-options\";\r\nimport { PromptInput } from \"./PromptInput\";\r\n\r\nexport class Dialog {\r\n    \r\n    private static modal(text: string, type: DialogType, options: DialogOptions = null) {\r\n        let modal = document.createElement('div') as HTMLDivElement;\r\n        modal.classList.add('dialog');\r\n\r\n        let textContainer = document.createElement('div') as HTMLDivElement;\r\n        textContainer.classList.add('text');\r\n        textContainer.classList.add('dialog-text');\r\n        textContainer.innerText = text;\r\n        modal.appendChild(textContainer);\r\n\r\n        let btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        modal.appendChild(btnContainer);\r\n\r\n        switch (type) {\r\n            case DialogType.Confirmation: {\r\n                let o = options as ConfirmationDialogOptions;\r\n                this.appendBtn(btnContainer, 'Yes', () => {\r\n                    o.yesCallback();\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                this.appendBtn(btnContainer, 'No', () => {\r\n                    o.noCallback();\r\n                    this.closeModal(modal);\r\n                }, 'grey');\r\n                break;\r\n            }\r\n            case DialogType.Notification: {\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                break;\r\n            }\r\n            case DialogType.Prompt: {\r\n                let o = options as PromptDialogOptions;\r\n                this.appendInputs(modal, o.inputs);\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    let error: string = o.onOK();\r\n                    if (error) {\r\n                        this.appendError(modal, error);\r\n                    } else {\r\n                        this.closeModal(modal);\r\n                    }\r\n                }, 'green');\r\n                break;\r\n            }\r\n        }\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement, text: string, callback: any, bgColor: string) {\r\n        let btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = 'button';\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add('dialog-btn-' + bgColor);\r\n        btn.addEventListener('click', callback);\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendInputs(modal: HTMLDivElement, inputs: Array<PromptInput>) {\r\n        let inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        for (let i: number = 0; i < inputs.length; i++) {\r\n            let label = document.createElement('label') as HTMLLabelElement;\r\n            label.innerText = inputs[i].name + ': ';\r\n            label.classList.add('text');\r\n            inputContainer.appendChild(label);\r\n\r\n            let input = document.createElement('input') as HTMLInputElement;\r\n            input.type = inputs[i].type;\r\n            input.id = inputs[i].name;\r\n            input.name = inputs[i].name;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            inputContainer.appendChild(input);\r\n\r\n            this.appendBrElement(inputContainer);\r\n            this.appendBrElement(inputContainer);\r\n        }\r\n        modal.appendChild(inputContainer);\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement) {\r\n        let br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendError(container: HTMLDivElement, text: string) {\r\n        let errorDiv = document.getElementById('dialogError') as HTMLDivElement;\r\n        if (!errorDiv) {\r\n            errorDiv = document.createElement('div');\r\n            errorDiv.id = 'dialogError';\r\n            errorDiv.classList.add('red-text');\r\n            errorDiv.classList.add('text');\r\n            errorDiv.classList.add('dialog-error');\r\n            container.appendChild(errorDiv);\r\n        }\r\n        errorDiv.innerText = text;\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        document.body.removeChild(modal);\r\n    }\r\n\r\n    public static confirm(text: string, options: ConfirmationDialogOptions) {\r\n        Dialog.modal(text, DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(text: string) {\r\n        Dialog.modal(text, DialogType.Notification);\r\n    }\r\n\r\n    public static prompt(text: string, options: PromptDialogOptions) {\r\n        Dialog.modal(text, DialogType.Prompt, options);\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2\r\n}","export enum Dot {\r\n    Empty = 'lightyellow',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\nimport { Dialog } from './dialog/dialog';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames();\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            let r: number;\r\n            for (r = BoardLogic.rows - 1; r >= 0; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, r);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.showWinDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                Dialog.notify(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showWinDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNames && this.playerNames.areBothPlayersConnected();\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n    private countdownSpan: HTMLSpanElement;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            this.setTimer();\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.endGameDueToInactivity && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            Dialog.notify('You win due to opponent inactivity!');\r\n            Utils.playSound(Sound.Win);\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.skipTurn && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            this.switchTurn();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit() {\r\n        Dialog.confirm('Network game in progress. Are you sure you want to quit?', {\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {}\r\n        });\r\n    }\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                this.socket.send({\r\n                    endGameDueToInactivity: true,\r\n                    currentTurn: playerColor\r\n                });\r\n\r\n                Dialog.notify('You lose due to inactivity!');\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                this.socket.send({\r\n                    skipTurn: true,\r\n                    currentTurn: playerColor\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > 30) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = 60;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = 60;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n    \r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames(action: Function) {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            Dialog.prompt('Please enter player names!', {\r\n                onOK: () => this.onPromptOK(action),\r\n                inputs: [\r\n                    {\r\n                        name: 'red',\r\n                        type: 'text'\r\n                    },\r\n                    {\r\n                        name: 'green',\r\n                        type: 'text'\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    private onPromptOK = (action: Function): string => {\r\n        let redInput = document.getElementById('red') as HTMLInputElement;\r\n        let greenInput = document.getElementById('green') as HTMLInputElement;\r\n        if (redInput && greenInput) {\r\n            if (redInput.value && greenInput.value && redInput.value.trim() && greenInput.value.trim()) {\r\n                this.playerRed = redInput.value;\r\n                this.playerGreen = greenInput.value;\r\n                this.printPlayerNames();\r\n                action();\r\n                return null;\r\n            } else {\r\n                return 'No empty fields allowed!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    public printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (!this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (!this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public areBothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames(this.setTimer);\r\n        }\r\n\r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            Dialog.confirm('Do you want to continue playing the previous game?', {\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame\r\n            });\r\n        } else {\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        localStorage.clear();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            localStorage.setItem('nextTurn', this.turn.toString());\r\n            localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n            if (this.playerNames) {\r\n                this.playerNames.saveIntoLocalStorage();\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.saveSecondsRunningToLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            let color: string;\r\n            if (this.playerColor === Dot.Red) {\r\n                color = 'red';\r\n            } else {\r\n                color = 'green';\r\n            }\r\n\r\n            Dialog.prompt('You are ' + color + '. Please enter your name.', {\r\n                onOK: () => this.onPlayerNameInput(color),\r\n                inputs: [{\r\n                    name: color,\r\n                    type: 'text'\r\n                }]\r\n            });\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onPlayerNameInput = (color: string): string => {\r\n        let playerNameField = document.getElementById(color) as HTMLInputElement;\r\n\r\n        if (playerNameField) {\r\n            if (playerNameField.value && playerNameField.value.trim()) {\r\n                this.playerName = playerNameField.value;\r\n                let data = {\r\n                    name: this.playerName\r\n                };\r\n                this.send(data);\r\n                return null;\r\n            } else {\r\n                return 'Field may not be empty!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.notify('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu') as HTMLDivElement;\r\nlet samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nlet networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nlet creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\n\r\nlet exitBtn = document.getElementById('exitBtn') as HTMLButtonElement;\r\n\r\nlet canvas = document.getElementById('board') as HTMLCanvasElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","modal","text","type","options","document","createElement","classList","add","textContainer","innerText","appendChild","btnContainer","DialogType","Confirmation","this","appendBtn","yesCallback","closeModal","noCallback","Notification","Prompt","appendInputs","inputs","error","onOK","appendError","body","container","callback","bgColor","btn","addEventListener","inputContainer","i","length","label","name","input","id","appendBrElement","br","errorDiv","getElementById","removeChild","confirm","Dialog","notify","prompt","GameMode","Sound","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","setTimer","timer","set","canvasId","context","getContext","exitBtnId","exitBtn","timerId","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","showWinDialog","closeGameAfterWinning","message","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","resetValues","onGameEnd","setTimeout","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","exit","reset","areBothPlayersConnected","onSocketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","color","getPlayerName","endGameDueToInactivity","isNaN","action","skipTurn","onSocketError","data","send","confirmExit","close","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","toString","adaptCountDownColor","playerColor","Lose","mode","Network","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","winDialog","resetCountdown","remove","turnCountDownInterval","setInterval","clearInterval","onPromptOK","redInput","greenInput","value","trim","playerRed","playerGreen","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","JSON","parse","setSecondsRunningFromLocalStorage","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","onPlayerNameInput","playerNameField","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","networkBtn","creditsBtn","initGame","errorMessageDiv","ex","showError","open"],"sourceRoot":""}