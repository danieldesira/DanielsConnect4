{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/board-logic.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/dot.js","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/models/action-message.ts","webpack:///./src/lib/models/game-message.ts","webpack:///./src/lib/models/inactivity-message.ts","webpack:///./src/lib/models/player-name-message.ts","webpack:///./src/lib/models/skip-turn-message.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardLogic = void 0;\nvar dot_1 = require(\"./enums/dot\");\nvar BoardLogic = exports.BoardLogic = /** @class */ (function () {\n    function BoardLogic() {\n    }\n    BoardLogic.initBoard = function (board) {\n        for (var col = 0; col < BoardLogic.columns; col++) {\n            board[col] = new Array(BoardLogic.rows);\n            for (var row = 0; row < BoardLogic.rows; row++) {\n                board[col][row] = dot_1.Dot.Empty;\n            }\n        }\n    };\n    BoardLogic.countConsecutiveDots = function (board, column, row, currentTurn) {\n        var count = row;\n        var dotCount = 0;\n        // Vertical check\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\n            dotCount++;\n            count++;\n        }\n        if (dotCount < 4) {\n            // Horizontal check\n            dotCount = 0;\n            count = column;\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\n                dotCount++;\n                count++;\n            }\n            count = column - 1;\n            while (count > -1 && board[count][row] === currentTurn) {\n                dotCount++;\n                count--;\n            }\n            // Diagonal checks\n            if (dotCount < 4) {\n                dotCount = 0;\n                var rowCount = row - 1;\n                var colCount = column + 1;\n                while (dotCount < 4 && rowCount > -1 && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\n                    dotCount++;\n                    colCount++; //right columns\n                    rowCount--; //upper rows\n                }\n                colCount = column;\n                rowCount = row;\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\n                    dotCount++;\n                    colCount--; // left columns\n                    rowCount++; // lower rows\n                }\n                if (dotCount < 4) {\n                    dotCount = 0;\n                    rowCount = row - 1;\n                    colCount = column - 1;\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\n                        dotCount++;\n                        colCount--; // left columns\n                        rowCount--; // upper rows\n                    }\n                    colCount = column;\n                    rowCount = row;\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\n                        dotCount++;\n                        colCount++; // right columns\n                        rowCount++; // lower rows\n                    }\n                }\n            }\n        }\n        return dotCount;\n    };\n    BoardLogic.isBoardFull = function (board) {\n        var full = true;\n        for (var col = 0; col < BoardLogic.columns; col++) {\n            // Check upper row in every column\n            if (board[col][0] === dot_1.Dot.Empty) {\n                full = false;\n                break;\n            }\n        }\n        return full;\n    };\n    BoardLogic.putDot = function (board, color, column) {\n        for (var row = BoardLogic.rows - 1; row >= 0; row--) {\n            if (board[column][row] === dot_1.Dot.Empty) {\n                board[column][row] = color;\n                return row;\n            }\n        }\n        return -1;\n    };\n    BoardLogic.columns = 9;\n    BoardLogic.rows = 8;\n    return BoardLogic;\n}());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dot = void 0;\nvar Dot;\n(function (Dot) {\n    Dot[\"Empty\"] = \"lightyellow\";\n    Dot[\"Red\"] = \"red\";\n    Dot[\"Green\"] = \"greenyellow\";\n})(Dot = exports.Dot || (exports.Dot = {}));\n","import { ConfirmationDialogOptions } from \"./confirmation-dialog-options\";\r\nimport { DialogOptions } from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport { PromptDialogOptions } from \"./prompt-dialog-options\";\r\nimport { PromptInput } from \"./prompt-input\";\r\n\r\nexport class Dialog {\r\n    \r\n    private static modal(text: Array<string>, type: DialogType, options: DialogOptions = null) {\r\n        let modal = document.createElement('div') as HTMLDivElement;\r\n        modal.classList.add('dialog');\r\n\r\n        let textContainer = document.createElement('div') as HTMLDivElement;\r\n        this.appendText(text, textContainer);\r\n        modal.appendChild(textContainer);\r\n\r\n        let btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        \r\n        switch (type) {\r\n            case DialogType.Confirmation: {\r\n                let o = options as ConfirmationDialogOptions;\r\n                this.appendBtn(btnContainer, 'Yes', () => {\r\n                    o.yesCallback();\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                this.appendBtn(btnContainer, 'No', () => {\r\n                    o.noCallback();\r\n                    this.closeModal(modal);\r\n                }, 'red');\r\n                break;\r\n            }\r\n            case DialogType.Notification: {\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                break;\r\n            }\r\n            case DialogType.Prompt: {\r\n                let o = options as PromptDialogOptions;\r\n                this.appendInputs(modal, o.inputs);\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    let error: string = o.onOK();\r\n                    if (error) {\r\n                        this.appendError(modal, error);\r\n                    } else {\r\n                        this.closeModal(modal);\r\n                    }\r\n                }, 'green');\r\n                break;\r\n            }\r\n        }\r\n        modal.appendChild(btnContainer);\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement, text: string, callback: any, bgColor: string) {\r\n        let btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = 'button';\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add('dialog-btn-' + bgColor);\r\n        btn.addEventListener('click', callback);\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendInputs(modal: HTMLDivElement, inputs: Array<PromptInput>) {\r\n        let inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        for (let i: number = 0; i < inputs.length; i++) {\r\n            let label = document.createElement('label') as HTMLLabelElement;\r\n            label.innerText = inputs[i].name + ': ';\r\n            label.classList.add('text');\r\n            inputContainer.appendChild(label);\r\n\r\n            let input = document.createElement('input') as HTMLInputElement;\r\n            input.type = inputs[i].type;\r\n            input.id = inputs[i].name;\r\n            input.name = inputs[i].name;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            inputContainer.appendChild(input);\r\n\r\n            this.appendBrElement(inputContainer);\r\n            this.appendBrElement(inputContainer);\r\n        }\r\n        modal.appendChild(inputContainer);\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement) {\r\n        let br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendError(container: HTMLDivElement, text: string) {\r\n        let errorDiv = document.getElementById('dialogError') as HTMLDivElement;\r\n        if (!errorDiv) {\r\n            errorDiv = document.createElement('div');\r\n            errorDiv.id = 'dialogError';\r\n            errorDiv.classList.add('red-text');\r\n            errorDiv.classList.add('text');\r\n            errorDiv.classList.add('dialog-error');\r\n            container.appendChild(errorDiv);\r\n        }\r\n        errorDiv.innerText = text;\r\n    }\r\n\r\n    private static appendText(text: Array<string>, container: HTMLDivElement) {\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        for (let i: number = 0; i < text.length; i++) {\r\n            let p = document.createElement('p') as HTMLParagraphElement;\r\n            p.innerText = text[i];\r\n            container.appendChild(p);\r\n        }\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        if (document.body.contains(modal)) {\r\n            document.body.removeChild(modal);\r\n        }\r\n    }\r\n\r\n    public static confirm(text: Array<string>, options: ConfirmationDialogOptions) {\r\n        Dialog.modal(text, DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(text: Array<string>) {\r\n        Dialog.modal(text, DialogType.Notification);\r\n    }\r\n\r\n    public static prompt(text: Array<string>, options: PromptDialogOptions) {\r\n        Dialog.modal(text, DialogType.Prompt, options);\r\n    }\r\n\r\n    public static closeAllOpenDialogs() {\r\n        let dialogs = document.getElementsByClassName('dialog') as HTMLCollectionOf<HTMLDivElement>;\r\n        for (let i: number = 0; i < dialogs.length; i++) {\r\n            this.closeModal(dialogs[i]);\r\n        }\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { Dialog } from './dialog/dialog';\r\nimport { BoardLogic } from '@danieldesira/daniels-connect4-common/lib/board-logic';\r\nimport { Dot } from '@danieldesira/daniels-connect4-common/lib/enums/dot';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNameSection: PlayerNameSection;\r\n    private gameIndicatorsContainer: HTMLDivElement;\r\n    private gameMenu: HTMLDivElement;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNameSection = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n\r\n        if (options.gameIndicatorsId) {\r\n            this.gameIndicatorsContainer = document.getElementById(options.gameIndicatorsId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.menuId) {\r\n            this.gameMenu = document.getElementById(options.menuId) as HTMLDivElement;\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        this.showGame();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.printPlayerNames();\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.addEventListener('click', this.exit);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        if (this.board[column][0] === Dot.Empty) {\r\n            let row = BoardLogic.putDot(this.board, this.turn, column);\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, row);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNameSection) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNameSection.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNameSection.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.showWinDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNameSection) {\r\n                    message += this.playerNameSection.getPlayerRed() + ' (Red) and ' + this.playerNameSection.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                Dialog.notify([message]);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showWinDialog(winner: string) {\r\n        let winMsg: Array<string> = new Array();\r\n        winMsg.push(winner + ' wins!');\r\n        if (this.timer) {\r\n            winMsg.push('Time taken: ' + this.timer.getTimeInStringFormat());\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        setTimeout(() => {\r\n            this.hideGame();\r\n        }, 3000);\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.removeEventListener('click', this.exit);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.hideGame();\r\n        this.resetValues();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNameSection && this.playerNameSection.areBothPlayersConnected();\r\n    }\r\n\r\n    private showGame() {\r\n        this.canvas.classList.remove('hide');\r\n        this.exitBtn.classList.remove('hide');\r\n        this.gameIndicatorsContainer.classList.remove('hide');\r\n        this.gameMenu.classList.add('hide');\r\n    }\r\n\r\n    private hideGame() {\r\n        this.canvas.classList.add('hide');\r\n        this.exitBtn.classList.add('hide');\r\n        this.gameIndicatorsContainer.classList.add('hide');\r\n        this.gameMenu.classList.remove('hide');\r\n    }\r\n\r\n}","import { GameMessage } from \"./game-message\";\r\n\r\nexport class ActionMessage extends GameMessage {\r\n    public constructor(column: number, action: string) {\r\n        super();\r\n        this.column = column;\r\n        this.action = action;\r\n    }\r\n\r\n    public column: number;\r\n    public action: string;\r\n}","export class GameMessage {\r\n\r\n    public static isInitialMessage(msg: GameMessage): boolean {\r\n        return (!isNaN(msg['gameId']) && msg['color']) || msg['opponentName'];\r\n    }\r\n\r\n    public static isInactivityMessage(msg: GameMessage): boolean {\r\n        return msg['endGameDueToInactivity'] && msg['currentTurn'];\r\n    }\r\n\r\n    public static isActionMessage(msg: GameMessage): boolean {\r\n        return msg['action'] && !isNaN(msg['column']);\r\n    }\r\n\r\n    public static isSkipTurnMessage(msg: GameMessage): boolean {\r\n        return msg['skipTurn'] && msg['currentTurn'];\r\n    }\r\n    \r\n}","import { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { GameMessage } from \"./game-message\";\r\n\r\nexport class InactivityMessage extends GameMessage {\r\n    public constructor(endGame: boolean, currentTurn: Dot) {\r\n        super();\r\n        this.endGameDueToInactivity = endGame;\r\n        this.currentTurn = currentTurn;\r\n    }\r\n\r\n    public endGameDueToInactivity: boolean;\r\n    public currentTurn: Dot;\r\n}","import { GameMessage } from \"./game-message\";\r\n\r\nexport class PlayerNameMessage extends GameMessage {\r\n    public constructor(name: string) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    public name: string;\r\n}","\r\nimport { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { GameMessage } from \"./game-message\";\r\n\r\nexport class SkipTurnMessage extends GameMessage {\r\n    public constructor(skipTurn: boolean, currentTurn: Dot) {\r\n        super();\r\n        this.skipTurn = skipTurn;\r\n        this.currentTurn = currentTurn;\r\n    }\r\n\r\n    public skipTurn: boolean;\r\n    public currentTurn: Dot;\r\n}","import { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { Dialog } from \"./dialog/dialog\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { ActionMessage } from \"./models/action-message\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { InactivityMessage } from \"./models/inactivity-message\";\r\nimport { InitialMessage } from \"./models/initial-message\";\r\nimport { SkipTurnMessage } from \"./models/skip-turn-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n    private countdownSpan: HTMLSpanElement;\r\n    private static countDownMaxSeconds: number = 60;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n        this.socket.onInputPlayerNameInDialog = this.onInputPlayerNameInDialog;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            let data = messageData as InitialMessage;\r\n            if (data.opponentName && this.socket && this.playerNameSection) {\r\n                if (this.socket.getPlayerColor() === Dot.Red) {\r\n                    this.playerNameSection.setPlayerGreen(data.opponentName);\r\n                } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                    this.playerNameSection.setPlayerRed(data.opponentName);\r\n                }\r\n    \r\n                this.setTimer();\r\n            }\r\n    \r\n            if (data.color && this.socket && this.playerNameSection) {\r\n                if (data.color === Dot.Red) {\r\n                    this.playerNameSection.setPlayerRed(this.socket.getPlayerName());\r\n                } else {\r\n                    this.playerNameSection.setPlayerGreen(this.socket.getPlayerName());\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isInactivityMessage(messageData)) {\r\n            let data = messageData as InactivityMessage;\r\n            if (data.currentTurn !== this.socket.getPlayerColor()) {\r\n                Dialog.notify(['You win due to opponent inactivity!']);\r\n                Utils.playSound(Sound.Win);\r\n                this.closeGameAfterWinning();\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isActionMessage(messageData)) {\r\n            let data = messageData as ActionMessage;\r\n            if (data.action === 'mousemove') {\r\n                this.moveDot(data.column);\r\n            }\r\n    \r\n            if (data.action === 'click') {\r\n                this.landDot(data.column);\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isSkipTurnMessage(messageData)) {\r\n            let data = messageData as SkipTurnMessage;\r\n            if (data.skipTurn && data.currentTurn !== this.socket.getPlayerColor()) {\r\n                this.switchTurn();\r\n            }\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = new ActionMessage(column, 'mousemove');\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = new ActionMessage(column, 'click');\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        Dialog.confirm(['Network game in progress. Are you sure you want to quit?'], {\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {}\r\n        });\r\n    };\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n        Dialog.closeAllOpenDialogs();\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected showWinDialog(winner: string) {\r\n        let winMsg: Array<string> = new Array();\r\n        winMsg.push(winner + ' wins!');\r\n        if (this.timer) {\r\n            winMsg.push('Time taken: ' + this.timer.getTimeInStringFormat());\r\n        }\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg.push('You win!');\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg.push('You lose!');\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                let data = new InactivityMessage(true, playerColor);\r\n                this.socket.send(data);\r\n\r\n                Dialog.notify(['You lose due to inactivity!']);\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                let data = new SkipTurnMessage(true, playerColor);\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > NetworkGame.countDownMaxSeconds / 2) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = NetworkGame.countDownMaxSeconds;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = NetworkGame.countDownMaxSeconds;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n\r\n    private onInputPlayerNameInDialog = (playerName: string) => {\r\n        if (this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNameSection.setPlayerRed(playerName);\r\n            } else {\r\n                this.playerNameSection.setPlayerGreen(playerName);\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { Dialog } from \"./dialog/dialog\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames(action: Function) {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            Dialog.prompt(['Please enter player names!'], {\r\n                onOK: () => this.onPromptOK(action),\r\n                inputs: [\r\n                    {\r\n                        name: 'red',\r\n                        type: 'text'\r\n                    },\r\n                    {\r\n                        name: 'green',\r\n                        type: 'text'\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    private onPromptOK = (action: Function): string => {\r\n        let redInput = document.getElementById('red') as HTMLInputElement;\r\n        let greenInput = document.getElementById('green') as HTMLInputElement;\r\n        if (redInput && greenInput) {\r\n            if (redInput.value && greenInput.value && redInput.value.trim() && greenInput.value.trim()) {\r\n                this.playerRed = redInput.value;\r\n                this.playerGreen = greenInput.value;\r\n                this.printPlayerNames();\r\n                action();\r\n                return null;\r\n            } else {\r\n                return 'No empty fields allowed!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    public printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (!this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (!this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public areBothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { Dialog } from \"./dialog/dialog\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setUpPlayerNames(this.setTimer);\r\n        }\r\n\r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            Dialog.confirm(['Do you want to continue playing the previous game?'], {\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame\r\n            });\r\n        } else {\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        localStorage.clear();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            localStorage.setItem('nextTurn', this.turn.toString());\r\n            localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.saveIntoLocalStorage();\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.saveSecondsRunningToLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        this.saveGame();\r\n        Dialog.closeAllOpenDialogs();\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dot } from \"@danieldesira/daniels-connect4-common/lib/enums/dot\";\r\nimport { Dialog } from \"./dialog/dialog\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { InitialMessage } from \"./models/initial-message\";\r\nimport { PlayerNameMessage } from \"./models/player-name-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n    public onInputPlayerNameInDialog: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: GameMessage) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            let data = messageData as InitialMessage;\r\n\r\n            if (!this.gameId) {\r\n                this.gameId = data.gameId;\r\n            }\r\n            \r\n            if (!this.playerColor) {\r\n                this.playerColor = data.color;\r\n    \r\n                let color: string;\r\n                if (this.playerColor === Dot.Red) {\r\n                    color = 'red';\r\n                } else {\r\n                    color = 'green';\r\n                }\r\n    \r\n                Dialog.prompt(['You are ' + color + '. Please enter your name.'], {\r\n                    onOK: () => this.onPlayerNameInput(color),\r\n                    inputs: [{\r\n                        name: color,\r\n                        type: 'text'\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onPlayerNameInput = (color: string): string => {\r\n        let playerNameField = document.getElementById(color) as HTMLInputElement;\r\n\r\n        if (playerNameField) {\r\n            if (playerNameField.value && playerNameField.value.trim()) {\r\n                this.playerName = playerNameField.value;\r\n                this.onInputPlayerNameInDialog(this.playerName);\r\n                let data = new PlayerNameMessage(this.playerName);\r\n                this.send(data);\r\n                return null;\r\n            } else {\r\n                return 'Field may not be empty!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.notify(['Problem connecting to server!']);\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private interval: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        \r\n        if (this.timerSpan.classList.contains('hide')) {\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearInterval(this.interval);\r\n        } else {\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nlet networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nlet creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown',\r\n            menuId: 'menu',\r\n            gameIndicatorsId: 'gameIndicators'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["Object","defineProperty","exports","value","BoardLogic","dot_1","initBoard","board","col","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","putDot","color","modal","text","type","options","document","createElement","classList","add","textContainer","this","appendText","appendChild","btnContainer","DialogType","Confirmation","appendBtn","yesCallback","closeModal","noCallback","Notification","Prompt","appendInputs","inputs","error","onOK","appendError","body","container","callback","bgColor","btn","innerText","addEventListener","inputContainer","i","length","label","name","input","id","appendBrElement","br","errorDiv","getElementById","p","contains","removeChild","confirm","Dialog","notify","prompt","closeAllOpenDialogs","dialogs","getElementsByClassName","GameMode","Sound","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","setTimer","timer","set","canvasId","context","getContext","exitBtnId","exitBtn","timerId","Timer","playerRedId","playerGreenId","playerNameSection","PlayerNameSection","gameIndicatorsId","gameIndicatorsContainer","menuId","gameMenu","start","showGame","printPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","canvasMousemove","canvasClick","beforeUnload","exit","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","winner","getPlayerRed","getPlayerGreen","showWinDialog","closeGameAfterWinning","message","Utils","playSound","LandDot","winMsg","push","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","resetValues","setTimeout","hideGame","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","reset","areBothPlayersConnected","remove","action","GameMessage","ActionMessage","isInitialMessage","msg","isNaN","isInactivityMessage","isActionMessage","isSkipTurnMessage","endGame","endGameDueToInactivity","InactivityMessage","PlayerNameMessage","skipTurn","SkipTurnMessage","onSocketMessage","messageData","data","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","getPlayerName","onSocketError","send","confirmExit","close","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","toString","adaptCountDownColor","playerColor","Lose","onInputPlayerNameInDialog","playerName","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","resetCountdown","countDownMaxSeconds","turnCountDownInterval","setInterval","clearInterval","onPromptOK","redInput","greenInput","trim","playerRed","playerGreen","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SameDeviceGame","checkGameData","nextTurn","JSON","parse","setSecondsRunningFromLocalStorage","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","onPlayerNameInput","playerNameField","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","interval","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call","samePCBtn","networkBtn","creditsBtn","initGame","mode","errorMessageDiv","Network","ex","showError","SamePC","open"],"sourceRoot":""}