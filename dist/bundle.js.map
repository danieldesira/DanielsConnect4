{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId);\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames(this.mode);\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event);\r\n    protected abstract canvasClick(event);\r\n\r\n    protected getColumnFromCursorPosition(event): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = BoardLogic.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                alert(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: any;\r\n    private countdownSpan: any;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData: GameMessage) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.endGameDueToInactivity && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            alert('You win due to opponent inactivity!');\r\n            Utils.playSound(Sound.Win);\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.skipTurn && messageData.currentTurn !== this.socket.getPlayerColor()) {\r\n            this.switchTurn();\r\n        }\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit(): void {\r\n        let exitConfirmation: boolean = confirm('Network game in progress. Are you sure you want to quit?');\r\n\r\n        if (exitConfirmation) {\r\n            if (this.socket) {\r\n                this.socket.close();\r\n            }\r\n\r\n            super.exit();\r\n        }\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = ''; // Required by Chrome\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.playerNames && this.playerNames.bothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown;\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                this.socket.send({\r\n                    endGameDueToInactivity: true,\r\n                    currentTurn: playerColor\r\n                });\r\n\r\n                alert('You lose due to inactivity!');\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                this.socket.send({\r\n                    skipTurn: true,\r\n                    currentTurn: playerColor\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > 30) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = 60;\r\n        this.turnCountDownInterval = setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = 60;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n    \r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    public printPlayerNames(mode: GameMode) {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start(): void {\r\n        this.checkGameData();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.setRunnable(true);\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.moveDot(column);\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        let column = this.getColumnFromCursorPosition(event);\r\n        this.landDot(column);\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv: any = document.getElementById('errorMessage');\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","options","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","paintBoard","this","document","getElementById","canvasId","context","getContext","exitBtnId","exitBtn","timerId","timer","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","mode","indicateTurn","setGameEvents","set","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","Math","PI","closePath","fill","addEventListener","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","event","position","Position","getCursorPosition","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","winDialog","closeGameAfterWinning","message","alert","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","classList","add","resetValues","onGameEnd","setTimeout","clearRect","removeEventListener","exit","reset","Game","socketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","setRunnable","color","getPlayerName","endGameDueToInactivity","isNaN","action","skipTurn","bothPlayersConnected","data","send","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","innerText","adaptCountDownColor","playerColor","Lose","Network","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","stopCountdown","close","confirm","resetCountdown","remove","turnCountDownInterval","setInterval","clearInterval","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","playerRed","prompt","playerGreen","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","restoreLastGame","JSON","parse","setSecondsRunningFromLocalStorage","toString","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","errorMessageDiv","ex","showError","open"],"sourceRoot":""}