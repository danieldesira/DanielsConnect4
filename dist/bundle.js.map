{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    // Network game state\r\n    private socket: WebSocket;\r\n    private playerColor: Dot;\r\n    private gameId: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        } else if (this.mode === GameMode.Network && this.playerColor) { // This client's color should be defined\r\n            let playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            if (this.playerColor === Dot.Red) {\r\n                this.playerRed = playerName;\r\n            } else if (this.playerColor === Dot.Green) {\r\n                this.playerGreen = playerName;\r\n            }\r\n        }\r\n\r\n        this.printPlayerNames();\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.turn === this.playerColor && this.opponentConnected())) {\r\n            let position: Position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.turn === this.playerColor && this.opponentConnected())) {\r\n            let position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(JSON.stringify(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (this.isBoardFull()) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timerSpan) {\r\n            winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.playerColor === this.turn) {\r\n                winMsg += 'You win!';\r\n            } else {\r\n                winMsg += 'You lose!';\r\n            }\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd !== undefined && this.onGameEnd !== null) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        if (this.mode !== GameMode.Network || this.opponentConnected()) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        this.timerInterval = setTimeout(this.timerCallback, 1000);\r\n        console.log('interval value ' + this.timerInterval);\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network) {\r\n            if (document.hidden) {\r\n                clearTimeout(this.timerInterval);\r\n            } else {\r\n                this.timerInterval = setTimeout(this.timerCallback, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network && this.socket) {\r\n                this.socket.close();\r\n                this.socket = null;\r\n            }\r\n            this.onGameEnd();\r\n            this.stopTimer();\r\n            this.clearPlayerNames();\r\n        }\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearTimeout(this.timerInterval);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n            console.log(this.timerInterval);\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        if (this.mode === GameMode.Network) {\r\n            let url: string;\r\n            if (Utils.isLocal()) {\r\n                url = 'ws://localhost:443/';\r\n            } else {\r\n                //to set url to deployed location\r\n            }\r\n\r\n            this.socket = new WebSocket(url);\r\n\r\n            this.socket.onmessage = this.socketMessage;\r\n            this.socket.onerror = this.socketError;\r\n        }\r\n    }\r\n\r\n    private socketMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n            this.setUpPlayerNames();\r\n            let data = { name: null };\r\n            if (this.playerColor === Dot.Red) {\r\n                data.name = this.playerRed;\r\n            } else if (this.playerColor === Dot.Green) {\r\n                data.name = this.playerGreen;\r\n            }\r\n            this.socket.send(JSON.stringify(data));\r\n        }\r\n\r\n        if (messageData.opponentName) {\r\n            if (this.playerColor === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.playerColor === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private socketError = (event) => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private isBoardFull(): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < Game.columns; col++) {\r\n            // Check upper row in every column\r\n            if (this.board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static clearAllIntervals(interval: number) {\r\n        for (let count = 1; count <= interval; count++) {\r\n            clearInterval(count);\r\n        }console.log('cleared until interval ' + interval);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","Red","canvasMousemove","event","mode","SamePC","playerColor","opponentConnected","position","getCursorPosition","column","Math","round","x","colGap","moveDot","Network","socket","data","action","send","JSON","stringify","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","timerInterval","setTimeout","console","log","pageVisibilityChange","document","hidden","clearTimeout","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","parse","color","setUpPlayerNames","name","playerRed","Green","playerGreen","opponentName","playerGreenSpan","playerRedSpan","gameId","message","alert","win","closeGameByWinning","socketError","this","getElementById","context","getContext","col","row","Empty","exitBtn","start","defineSocket","checkGameData","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","playerName","printPlayerNames","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","checkDotCount","winner","winDialog","isBoardFull","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","classList","add","onGameEnd","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","parseInt","exit","close","remove","url","Utils","isLocal","WebSocket","onmessage","onerror","full","location","protocol","hostname","clearAllIntervals","interval","clearInterval","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}