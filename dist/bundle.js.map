{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static checkDotCount(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Socket } from './socket';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    private socket: Socket;\r\n\r\n    private timer: Timer;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (exitBtnId) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId) {\r\n            this.timer = new Timer(timerId);\r\n        }\r\n\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: any): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(options.canvasId, options.exitBtnId, options.timerId, options.playerRedId, options.playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    public start() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.checkGameData();\r\n            this.setUpPlayerNames();\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        } else if (this.mode === GameMode.Network) {\r\n            this.defineSocket();\r\n        }\r\n        \r\n        this.printPlayerNames();\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position: Position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = BoardLogic.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = BoardLogic.checkDotCount(this.board, column, row, this.turn);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.socket.getPlayerColor() === this.turn) {\r\n                winMsg += 'You win!';\r\n                Utils.playSound(Sound.Win);\r\n            } else {\r\n                winMsg += 'You lose!';\r\n                Utils.playSound(Sound.Lose);\r\n            }\r\n        } else {\r\n            Utils.playSound(Sound.Win);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            // Clear game data\r\n            localStorage.clear();\r\n        }\r\n\r\n        this.cleanUpEvents();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network && this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network) {\r\n                this.socket.close();\r\n            }\r\n            this.onGameEnd();\r\n            this.clearPlayerNames();\r\n            this.resetValues();\r\n\r\n            if (this.timer) {\r\n                this.timer.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerRed = this.socket.getPlayerName();\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerGreen = this.socket.getPlayerName();\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private timeout: number;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance({\r\n        canvasId: 'board',\r\n        exitBtnId: 'exitBtn',\r\n        timerId: 'timer',\r\n        playerRedId: 'playerRed',\r\n        playerGreenId: 'playerGreen'\r\n    });\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","checkDotCount","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","turn","Red","canvasMousemove","event","mode","SamePC","socket","getPlayerColor","opponentConnected","position","Position","getCursorPosition","canvas","Math","round","x","colGap","moveDot","Network","data","action","send","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","pageVisibilityChange","timer","pauseWhenDocumentHidden","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","paintBoard","socketMessage","messageData","opponentName","playerGreen","playerGreenSpan","innerText","Green","playerRed","playerRedSpan","setRunnable","color","getPlayerName","win","closeGameByWinning","isNaN","this","document","getElementById","context","getContext","exitBtn","Timer","getInstance","options","Game","instance","start","checkGameData","setUpPlayerNames","defineSocket","printPlayerNames","setGameEvents","set","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","winner","winDialog","alert","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","Lose","cleanUpEvents","clearPlayerNames","stop","classList","add","resetValues","onGameEnd","setTimeout","clearRect","removeEventListener","setItem","toString","JSON","stringify","saveSecondsRunningToLocalStorage","parse","setSecondsRunningFromLocalStorage","exit","close","Socket","onMessageCallback","reset","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","onMessage","gameId","playerColor","playerName","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","remove","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}