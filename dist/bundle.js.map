{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/enums/dot.ts","webpack:///./src/enums/game-mode.ts","webpack:///./src/game.ts","webpack:///./src/position.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.NETWORK;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum Dot {\r\n    EMPTY = 'black',\r\n    RED = 'red',\r\n    GREEN = 'greenyellow'\r\n}","export enum GameMode {\r\n    SAME_PC = 1,\r\n    NETWORK = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    // Network game state\r\n    private socket: WebSocket;\r\n    private playerColor: Dot;\r\n    private gameId: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        } else if (this.mode === GameMode.NETWORK && this.playerColor) { // This client's color should be defined\r\n            let playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            if (this.playerColor === Dot.RED) {\r\n                this.playerRed = playerName;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                this.playerGreen = playerName;\r\n            }\r\n        }\r\n\r\n        // Print player names on screen\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private moveDot = (event) => {\r\n        if (this.mode === GameMode.SAME_PC || this.turn === this.playerColor) {\r\n            this.clearUpper();\r\n\r\n            let position: Position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            \r\n            this.context.fillStyle = this.turn;\r\n\r\n            this.paintDotToDrop(column);\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SAME_PC || this.turn === this.playerColor) {\r\n            let position = this.getCursorPosition(event);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.EMPTY) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.EMPTY) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 Dots\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Dot.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                // Clear game data\r\n                localStorage.clear();\r\n\r\n                this.cleanUpEvents();\r\n                this.stopTimer();\r\n                this.clearPlayerNames();\r\n\r\n                // Run delegate function to return to main menu, in case it is defined\r\n                if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n                    setTimeout(this.onGameEnd, 3000);\r\n                }\r\n            }\r\n            \r\n            // Switches turn\r\n            if (this.turn === Dot.RED) {\r\n                this.turn = Dot.GREEN;\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.turn = Dot.RED;\r\n            }\r\n\r\n            this.context.fillStyle = this.turn;\r\n\r\n            this.paintDotToDrop(column);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.NETWORK) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            clearInterval(this.timerInterval);\r\n        } else {\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.RED) {\r\n            this.turn = Dot.RED;\r\n        } else if (nextTurn === Dot.GREEN) {\r\n            this.turn = Dot.GREEN;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            this.saveGame();\r\n        }\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        if (this.mode === GameMode.NETWORK) {\r\n            this.socket = new WebSocket('ws://localhost:443/');\r\n\r\n            this.socket.onmessage = this.socketMessage;\r\n        }\r\n    }\r\n\r\n    private socketMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n            this.setUpPlayerNames();\r\n            let data = { name: null };\r\n            if (this.playerColor === Dot.RED) {\r\n                data.name = this.playerRed;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                data.name = this.playerGreen;\r\n            }\r\n            this.socket.send(JSON.stringify(data));\r\n        }\r\n\r\n        if (messageData.opponentName) {\r\n            if (this.playerColor === Dot.RED) {\r\n                this.playerGreen = messageData.opponentName;\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            } else if (this.playerColor === Dot.GREEN) {\r\n                this.playerRed = messageData.opponentName;\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (messageData.win) {\r\n            //todo: logic to close game\r\n        }\r\n\r\n        if (messageData.column && messageData.mousemove) {\r\n            //todo: call existing logic for opponent mousemove\r\n        }\r\n\r\n        if (messageData.column && messageData.click) {\r\n            this.landDot(messageData.column);//to test this\r\n        }\r\n    };\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","socketsBtn","creditsBtn","exitBtn","canvas","Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","RED","moveDot","event","mode","SAME_PC","playerColor","clearUpper","position","getCursorPosition","column","Math","round","x","colGap","context","fillStyle","paintDotToDrop","canvasClick","landDot","beforeUnload","saveGame","NETWORK","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","pageVisibilityChange","document","hidden","clearInterval","timerInterval","setInterval","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","JSON","parse","data","color","setUpPlayerNames","name","playerRed","GREEN","playerGreen","socket","send","stringify","opponentName","playerGreenSpan","playerRedSpan","gameId","message","alert","win","mousemove","click","this","getElementById","getContext","col","row","EMPTY","start","defineSocket","checkGameData","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","playerName","boardGradient","createLinearGradient","addColorStop","fillRect","beginPath","arc","PI","closePath","fill","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","r","checkDotCount","winner","classList","add","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","onGameEnd","setTimeout","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","parseInt","exit","remove","WebSocket","onmessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","open"],"sourceRoot":""}