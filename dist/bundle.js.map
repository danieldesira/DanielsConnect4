{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static checkDotCount(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Socket } from './socket';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    private socket: Socket;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(canvasId, exitBtnId, timerId, playerRedId, playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    public start() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.checkGameData();\r\n            this.setUpPlayerNames();\r\n        } else if (this.mode === GameMode.Network) {\r\n            this.defineSocket();\r\n        }\r\n        \r\n        this.printPlayerNames();\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position: Position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = BoardLogic.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = BoardLogic.checkDotCount(this.board, column, row, this.turn);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timerSpan) {\r\n            winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.socket.getPlayerColor() === this.turn) {\r\n                winMsg += 'You win!';\r\n                Utils.playSound(Sound.Win);\r\n            } else {\r\n                winMsg += 'You lose!';\r\n                Utils.playSound(Sound.Lose);\r\n            }\r\n        } else {\r\n            Utils.playSound(Sound.Win);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            // Clear game data\r\n            localStorage.clear();\r\n        }\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        if (this.mode !== GameMode.Network || this.opponentConnected()) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network) {\r\n            if (document.hidden) {\r\n                clearTimeout(this.timeout);\r\n            } else {\r\n                this.timeout = setTimeout(this.timerCallback, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network) {\r\n                this.socket.close();\r\n            }\r\n            this.onGameEnd();\r\n            this.stopTimer();\r\n            this.clearPlayerNames();\r\n            this.resetValues();\r\n        }\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerRed = this.socket.getPlayerName();\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerGreen = this.socket.getPlayerName();\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private resetValues() {\r\n        this.secondsRunning = 0;\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n        this.socket.close();\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private timeout: number;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","checkDotCount","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","turn","Red","canvasMousemove","event","mode","SamePC","socket","getPlayerColor","opponentConnected","position","Position","getCursorPosition","canvas","Math","round","x","colGap","moveDot","Network","data","action","send","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","classList","contains","clearTimeout","timeout","setTimeout","pageVisibilityChange","document","hidden","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","paintBoard","socketMessage","messageData","opponentName","playerGreen","playerGreenSpan","Green","playerRed","playerRedSpan","color","getPlayerName","win","closeGameByWinning","isNaN","this","getElementById","context","getContext","exitBtn","getInstance","Game","instance","start","checkGameData","setUpPlayerNames","defineSocket","printPlayerNames","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","winner","winDialog","alert","Utils","playSound","LandDot","winMsg","Win","Lose","cleanUpEvents","stopTimer","clearPlayerNames","add","resetValues","onGameEnd","clearRect","removeEventListener","setItem","toString","JSON","stringify","parse","parseInt","exit","close","remove","Socket","onMessageCallback","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","onMessage","gameId","playerColor","playerName","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}