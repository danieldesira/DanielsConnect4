{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/board-logic.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/constants.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/coin.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/dimensions.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/index.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/models/game-message.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/player-turn.js","webpack:///./src/lib/authentication.ts","webpack:///./src/lib/changelog.ts","webpack:///./src/lib/config.ts","webpack:///./src/lib/credits.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/dimensions-select.ts","webpack:///./src/lib/enums/dialog-ids.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/instructions.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/settings-dialog.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///./src/main.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardLogic = void 0;\nvar constants_1 = require(\"./constants\");\nvar coin_1 = require(\"./enums/coin\");\nvar dimensions_1 = require(\"./enums/dimensions\");\nvar BoardLogic = /** @class */ (function () {\n    /**\n     * Initialises the board matrix given the board dimensions\n     * @param dim The board dimensions type\n     */\n    function BoardLogic(dim) {\n        var _this = this;\n        this.board = [];\n        /**\n         * Getter for the number of columns\n         * @returns The number of columns\n         */\n        this.getColumns = function () { return _this.columns; };\n        /**\n         * Getter for the number of rows\n         * @returns The number of rows\n         */\n        this.getRows = function () { return _this.rows; };\n        /**\n         * Getter for the board dimensions\n         * @returns The board dimensions\n         */\n        this.getDimensions = function () { return _this.dimensions; };\n        /**\n         * Getter for the board matrix\n         * @returns The board matrix\n         */\n        this.getBoard = function () { return _this.board; };\n        /**\n         * Resets the board matrix retaining the given dimensions\n         */\n        this.resetBoard = function () { return _this.initBoard(); };\n        switch (dim) {\n            case dimensions_1.BoardDimensions.Small:\n                this.columns = constants_1.dimensions.small.columns;\n                this.rows = constants_1.dimensions.small.rows;\n                break;\n            case dimensions_1.BoardDimensions.Medium:\n                this.columns = constants_1.dimensions.medium.columns;\n                this.rows = constants_1.dimensions.medium.rows;\n                break;\n            case dimensions_1.BoardDimensions.Large:\n                this.columns = constants_1.dimensions.large.columns;\n                this.rows = constants_1.dimensions.large.rows;\n                break;\n        }\n        this.dimensions = dim;\n        this.initBoard();\n    }\n    /**\n     * Initialises board matrix\n     */\n    BoardLogic.prototype.initBoard = function () {\n        this.board = new Array(this.columns);\n        for (var col = 0; col < this.columns; col++) {\n            this.board[col] = new Array(this.rows);\n            for (var row = 0; row < this.rows; row++) {\n                this.board[col][row] = coin_1.Coin.Empty;\n            }\n        }\n    };\n    /**\n     * Counts and checks the coin placeholders adjacent to the specified point (column x row). Matches may occurr,\n     * vertically, horizontally or diagonally.\n     * @param column - The column number of the starting point\n     * @param row - The row number of the starting point\n     * @param currentTurn - Coin color to be checked\n     * @returns Count of adjacent coins with the same color\n     */\n    BoardLogic.prototype.countConsecutiveCoins = function (column, row, currentTurn) {\n        var count = row;\n        var coinCount = 0;\n        // Vertical check\n        while (coinCount < 4 && count < this.rows && this.board[column][count] === currentTurn) {\n            coinCount++;\n            count++;\n        }\n        if (coinCount < 4) {\n            // Horizontal check\n            coinCount = 0;\n            count = column;\n            while (count < this.columns && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count++;\n            }\n            count = column - 1;\n            while (count > -1 && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count--;\n            }\n            // Diagonal checks\n            if (coinCount < 4) {\n                coinCount = 0;\n                var rowCount = row - 1;\n                var colCount = column + 1;\n                while (coinCount < 4 && rowCount > -1 && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount++; //right columns\n                    rowCount--; //upper rows\n                }\n                colCount = column;\n                rowCount = row;\n                while (coinCount < 4 && rowCount < this.rows && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount--; // left columns\n                    rowCount++; // lower rows\n                }\n                if (coinCount < 4) {\n                    coinCount = 0;\n                    rowCount = row - 1;\n                    colCount = column - 1;\n                    while (coinCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount--; // left columns\n                        rowCount--; // upper rows\n                    }\n                    colCount = column;\n                    rowCount = row;\n                    while (coinCount < 4 && rowCount < this.rows && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount++; // right columns\n                        rowCount++; // lower rows\n                    }\n                }\n            }\n        }\n        return coinCount;\n    };\n    /**\n     * Checks if the board matrix is full\n     * @returns True if full, false if not\n     */\n    BoardLogic.prototype.isBoardFull = function () {\n        var full = true;\n        for (var col = 0; col < this.columns; col++) {\n            // Check upper row in every column\n            if (this.board[col][0] === coin_1.Coin.Empty) {\n                full = false;\n                break;\n            }\n        }\n        return full;\n    };\n    /**\n     * Places coin in a specific column\n     * @param color The color of the coin\n     * @param column The specified column number\n     * @returns Row number where the coin was placed. -1 if column is full.\n     */\n    BoardLogic.prototype.putCoin = function (color, column) {\n        for (var row = this.rows - 1; row >= 0; row--) {\n            if (this.board[column][row] === coin_1.Coin.Empty) {\n                this.board[column][row] = color;\n                return row;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Board matrix setter\n     * @param board The new board matrix\n     */\n    BoardLogic.prototype.setBoard = function (board) {\n        this.board = board;\n    };\n    /**\n     * Sets a single board matrix item, at the specified row and column\n     * @param coin The coin color\n     * @param col The column number\n     * @param row The row number\n     */\n    BoardLogic.prototype.setBoardItem = function (coin, col, row) {\n        this.board[col][row] = coin;\n    };\n    return BoardLogic;\n}());\nexports.BoardLogic = BoardLogic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dimensions = exports.skipTurnMaxWait = void 0;\n/**\n * @constant {number} skipTurnMaxWait - The maximum number of seconds that are allowed before skipping turn.\n */\nexports.skipTurnMaxWait = 60;\n/**\n * @constant dimensions - The column & row board dimensions available.\n */\nexports.dimensions = {\n    small: {\n        columns: 6,\n        rows: 5\n    },\n    medium: {\n        columns: 7,\n        rows: 6\n    },\n    large: {\n        columns: 9,\n        rows: 8\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Coin = void 0;\nvar Coin;\n(function (Coin) {\n    Coin[Coin[\"Empty\"] = 0] = \"Empty\";\n    Coin[Coin[\"Red\"] = 1] = \"Red\";\n    Coin[Coin[\"Green\"] = 2] = \"Green\";\n    Coin[Coin[\"Pink\"] = 3] = \"Pink\";\n    Coin[Coin[\"Purple\"] = 4] = \"Purple\";\n    Coin[Coin[\"Gold\"] = 5] = \"Gold\";\n    Coin[Coin[\"Black\"] = 6] = \"Black\";\n})(Coin || (exports.Coin = Coin = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = void 0;\nvar BoardDimensions;\n(function (BoardDimensions) {\n    BoardDimensions[BoardDimensions[\"Small\"] = 1] = \"Small\";\n    BoardDimensions[BoardDimensions[\"Medium\"] = 2] = \"Medium\";\n    BoardDimensions[BoardDimensions[\"Large\"] = 3] = \"Large\";\n})(BoardDimensions || (exports.BoardDimensions = BoardDimensions = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = exports.dimensions = exports.skipTurnMaxWait = exports.switchTurn = exports.randomiseTurn = exports.GameMessage = exports.Coin = exports.default = void 0;\nvar board_logic_1 = require(\"./board-logic\");\nObject.defineProperty(exports, \"default\", { enumerable: true, get: function () { return board_logic_1.BoardLogic; } });\nvar coin_1 = require(\"./enums/coin\");\nObject.defineProperty(exports, \"Coin\", { enumerable: true, get: function () { return coin_1.Coin; } });\nvar game_message_1 = require(\"./models/game-message\");\nObject.defineProperty(exports, \"GameMessage\", { enumerable: true, get: function () { return game_message_1.GameMessage; } });\nvar player_turn_1 = require(\"./player-turn\");\nObject.defineProperty(exports, \"randomiseTurn\", { enumerable: true, get: function () { return player_turn_1.randomiseTurn; } });\nObject.defineProperty(exports, \"switchTurn\", { enumerable: true, get: function () { return player_turn_1.switchTurn; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"skipTurnMaxWait\", { enumerable: true, get: function () { return constants_1.skipTurnMaxWait; } });\nObject.defineProperty(exports, \"dimensions\", { enumerable: true, get: function () { return constants_1.dimensions; } });\nvar dimensions_1 = require(\"./enums/dimensions\");\nObject.defineProperty(exports, \"BoardDimensions\", { enumerable: true, get: function () { return dimensions_1.BoardDimensions; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameMessage = void 0;\nvar GameMessage = /** @class */ (function () {\n    function GameMessage() {\n    }\n    /**\n     * Tests if message is an initial message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is initial\n     * @public\n     * @static\n     */\n    GameMessage.isInitialMessage = function (msg) {\n        return (!isNaN(msg['gameId']) && msg['color'] && msg['dimensions'] && msg['playerName'])\n            || msg['opponentName'];\n    };\n    /**\n     * Tests if message is an inactivity message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents inactivity\n     * @public\n     * @static\n     */\n    GameMessage.isInactivityMessage = function (msg) {\n        return msg['endGameDueToInactivity'] && msg['currentTurn'];\n    };\n    /**\n     * Tests if message is an action message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents an action\n     * @public\n     * @static\n     */\n    GameMessage.isActionMessage = function (msg) {\n        return msg['action'] && !isNaN(msg['column']) && msg['color'];\n    };\n    /**\n     * Tests if message is a winner message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents win\n     * @public\n     * @static\n     */\n    GameMessage.isWinnerMessage = function (msg) {\n        return msg['winner'];\n    };\n    /**\n     * Tests if message is a tie message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents tie\n     * @public\n     * @static\n     */\n    GameMessage.isTieMessage = function (msg) {\n        return msg['tie'];\n    };\n    /**\n     * Tests if message is a current turn message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents current turn\n     * @public\n     * @static\n     */\n    GameMessage.isCurrentTurnMessage = function (msg) {\n        return msg['currentTurn'];\n    };\n    /**\n     * Tests if message is a disconnect message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represent a disconnection\n     * @public\n     * @static\n     */\n    GameMessage.isDisconnectMessage = function (msg) {\n        return msg['hardDisconnect'];\n    };\n    /**\n     * Tests if message is an error message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is an error\n     * @public\n     * @static\n     */\n    GameMessage.isErrorMessage = function (msg) {\n        return msg['error'];\n    };\n    return GameMessage;\n}());\nexports.GameMessage = GameMessage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.switchTurn = exports.randomiseTurn = void 0;\n/**\n * Randomises player number\n * @returns {number} Random player number (1 or 2)\n */\nfunction randomiseTurn() {\n    return Math.floor(Math.random() * 2) + 1;\n}\nexports.randomiseTurn = randomiseTurn;\n/**\n * Switches turn depending on input\n * @param {number} currentTurn - The current player number (1 or 2)\n * @returns {number} The opposing player number (1 -> 2 or 2 -> 1)\n */\nfunction switchTurn(currentTurn) {\n    return currentTurn === 1 ? 2 : 1;\n}\nexports.switchTurn = switchTurn;\n","import { BoardDimensions, PlayerInfo, PlayerSettings, PlayerStats } from \"@danieldesira/daniels-connect4-common\";\r\nimport config from \"./config\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        google: any;\r\n    }\r\n}\r\n\r\nexport default class Authentication {\r\n    public static async handleGoogleSignon(response: any) {\r\n        const {credential} = response;\r\n        Authentication.storeGoogleToken(credential);\r\n    }\r\n\r\n    private static storeGoogleToken(token: string) {\r\n        const data = {\r\n            token,\r\n            service: 'google'\r\n        } as AuthenticationModel;\r\n        localStorage.setItem('auth', JSON.stringify(data));\r\n    }\r\n\r\n    public static logout = () => localStorage.removeItem('auth');\r\n\r\n    public static getToken(): AuthenticationModel | null {\r\n        const val = localStorage.getItem('auth');\r\n        return val ? JSON.parse(val) as AuthenticationModel : null;\r\n    }\r\n\r\n    public static getUserData = async () => await Authentication.authGet(`${config.httpServer}/auth`) as PlayerInfo;\r\n\r\n    public static async loadStats() {\r\n        const stats = await Authentication.authGet(`${config.httpServer}/stats`) as PlayerStats;\r\n        if (stats) {\r\n            Dialog.notify({\r\n                id: DialogIds.PlayerStats,\r\n                title: 'Stats',\r\n                text: [\r\n                        `Wins: ${stats.wins} - ${stats.winPercent.toFixed(2)}%`,\r\n                        `Losses: ${stats.losses} - ${stats.lossPercent.toFixed(2)}%`\r\n                    ]\r\n            });\r\n        }\r\n    }\r\n\r\n    public static initGoogleSSO(callback: Function) {\r\n        window?.google?.accounts?.id?.initialize({\r\n            client_id: '966331594657-sjtp3m7ooigjma726j7aa4kcf5qdu2v7.apps.googleusercontent.com',\r\n            callback: (response: any) => {\r\n                Authentication.handleGoogleSignon(response);\r\n                callback();\r\n            }\r\n        });\r\n        window?.google?.accounts?.id?.prompt();\r\n    }\r\n\r\n    public static renderGoogleBtn(containerId: string) {\r\n        const container = document.getElementById(containerId);\r\n        window?.google?.accounts?.id?.renderButton(container, {\r\n            type: 'standard',\r\n            theme: 'outline',\r\n            size: 'large'\r\n        });\r\n    }\r\n\r\n    public static async updateSettings(dimensions: BoardDimensions) {\r\n        try {\r\n            const params = {\r\n                dimensions\r\n            };\r\n            await Authentication.authPost(`${config.httpServer}/settings`, params);\r\n        } catch {\r\n            Dialog.notify({\r\n                title: 'Settings',\r\n                text: ['Error saving settings!'],\r\n                id: DialogIds.ServerError\r\n            });\r\n        }\r\n    }\r\n\r\n    public static getSettings = async (): Promise<PlayerSettings> => await Authentication.authGet(`${config.httpServer}/settings`);\r\n    \r\n    private static async authGet(url: string): Promise<any> {\r\n        const auth = Authentication.getToken();\r\n        if (auth) {\r\n            const {token, service} = auth;\r\n            const res = await fetch(url, {\r\n                headers: {\r\n                    'Authorization': token,\r\n                    'Service': service\r\n                }\r\n            });\r\n            const data = (res.status >= 200 && res.status < 300 ? await res.json() : null);\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static async authPost(url: string, data: any) {\r\n        const {token, service} = Authentication.getToken();\r\n        const res = await fetch(url, {\r\n            method: 'post',\r\n            headers: {\r\n                'Authorization': token,\r\n                'Service': service,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n        if (res.status < 200 || res.status >= 300) {\r\n            throw `HTTP Status Code ${res.status}`;\r\n        }\r\n    }\r\n\r\n    public static isLoggedIn = (): boolean => !!localStorage.getItem('auth');\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function openChangelog() {\r\n    Dialog.changelog({\r\n        id: DialogIds.Changelog,\r\n        title: 'Daniel`s Connect4 Version History',\r\n        releases: [\r\n            {\r\n                version: '0.3.7',\r\n                status: 'Beta',\r\n                dateTime: '19/10/2023 10:15AM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Upgraded Common library to 0.2',\r\n                            'Minor code cleanup'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Dialogs:',\r\n                        subPoints: [\r\n                            'Fixed regression in dialog inputs making text visible again',\r\n                            'Credits as dialog',\r\n                            'Menu dialog replacing the slider',\r\n                            'Adapted button colors for dark mode',\r\n                            'Changelog dialog',\r\n                            '\"text\" made an optional parameter'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Opted for official Google signon button in attempt to solve issue with iOS'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.6.1',\r\n                status: 'Beta',\r\n                dateTime: '08/10/2023 0:30AM Malta time',\r\n                points: [\r\n                    { text: 'Applied quick fix for credits and changelog pages in dark mode' },\r\n                    { text: 'Changed dialog text color to white' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.6',\r\n                status: 'Beta',\r\n                dateTime: '07/10/2023 4:30PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Installed Concurrently and combined Webpack and Serve scripts',\r\n                            'Code cleanup'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'UI:',\r\n                        subPoints: [\r\n                            'Changed main menu text color to darkblue',\r\n                            'Moved version number to button of screen',\r\n                            'Smaller menu buttons',\r\n                            'Experimental dark mode support'\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.5',\r\n                status: 'Beta',\r\n                dateTime: '03/10/2023 5:30PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Multiple dimensions'\r\n                    },\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Code cleanup',\r\n                            'Send token in request header'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'UI:',\r\n                        subPoints: [\r\n                            'Consistent look and feel across browsers and transperant borders for buttons',\r\n                            'Included favicon in changelog and credits pages',\r\n                            'Player stats show in a dialog',\r\n                            'Centered inputs in dialogs',\r\n                            'Timer and countdown placeholders differentiated to prevent programmatic \"confusion\"'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Logout if Google token is no longer valid'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.4',\r\n                status: 'Beta',\r\n                dateTime: '05/08/2023 11:00PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Google SSO:',\r\n                        subPoints: [\r\n                            'Solve JS error that at times prevented SSO popup to launch',\r\n                            'Enable logout button in case of WebSocket connection failure',\r\n                            'Retain authentication across page refreshes and browser tabs'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Internal: Cleanup localStorage management'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.3',\r\n                status: 'Beta',\r\n                dateTime: '05/08/2023',\r\n                points: [\r\n                    {\r\n                        text: '(Responsive) UI:',\r\n                        subPoints: [\r\n                            'Solve zoomed in canvas on Chrome for Android',\r\n                            'Responsive dialog inputs',\r\n                            'Centered dialog titles',\r\n                            'Swapped error div for dialogs',\r\n                            'Added favicon'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Installed and configured a micro-web server for dev environment',\r\n                            'Removed redundant \"build\" script',\r\n                            'New \"config\" file to store environment URLs',\r\n                            'Removed \"css-loader\" and \"style-loader\" from dev dependencies'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Introduced Google signon button which is now required for network play'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.2',\r\n                status: 'Beta',\r\n                dateTime: '23/07/2023',\r\n                points: [\r\n                    {\r\n                        text: 'Dialogs:',\r\n                        subPoints: [\r\n                            'Refactored library to accept only one options parameter for all public methods',\r\n                            'Solved the \"form not connected\" console warning on Chromium-based browsers',\r\n                            'Added title parameter to options',\r\n                            'Notifications are closed when \"Escape\" or \"Enter\" keys are pressed'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Game controls:',\r\n                        subPoints: [\r\n                            'Fixed minor issue with keybindings: limit was set 10, now taken from \"BoardLogic.columns\"',\r\n                            'Touchscreen moves to act like mouse moves'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Credits link turned black'\r\n                    },\r\n                    {\r\n                        text: 'Error messages for Share icon'\r\n                    },\r\n                    {\r\n                        text: 'Updated game instructions and fixed the random line breaks'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.1',\r\n                status: 'Beta',\r\n                dateTime: '22/07/2023',\r\n                points: [\r\n                    { text: 'Github icon points to my Github profile' },\r\n                    { text: 'Email icon subject set to \"Connect4\"' },\r\n                    { text: 'Added links to my official Instagram and Facebook pages' },\r\n                    { text: 'Added Share button' },\r\n                    { text: 'Change cursor to `progress` while waiting for opponent' },\r\n                    { text: 'Introduced keyboard shortcuts during game play' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3',\r\n                status: 'Beta',\r\n                dateTime: '18/07/2023',\r\n                points: [\r\n                    {\r\n                        text: 'Minor UI changes:',\r\n                        subPoints: [\r\n                            'Improved board spacing',\r\n                            'Empty spots are now light yellow',\r\n                            'Menu style and text changes',\r\n                            'Changed font to Source-Sans-Pro',\r\n                            'Neater top section',\r\n                            'Report bugs links',\r\n                            'Fixed bug(#30) where last row was not being displayed on smaller screen resolutions',\r\n                            'Hovering over buttons turns cursor into pointer',\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Introduced custom dialogs'\r\n                    },\r\n                    {\r\n                        text: 'Player name inputs:',\r\n                        subPoints: [\r\n                            'Validation preventing blank player names',\r\n                            'Player names restricted to 10 characters'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Refactoring and code cleanup',\r\n                            'Set up \"npm start\" script'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'First turn (red/green) selected by random'\r\n                    },\r\n                    {\r\n                        text: 'Network mode:',\r\n                        subPoints: [\r\n                            'Exit game in case of connection error',\r\n                            'Winner is now determined by server',\r\n                            'Disabled timer',\r\n                            'Removed logic to stop game in case of inactivity',\r\n                            '\"Skip turn\" is now handled by the server'\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.2.1',\r\n                status: 'Alpha',\r\n                dateTime: '27/03/2023',\r\n                points: [\r\n                    { text: 'Network mode: Attempt to reconnect after connection is closed' },\r\n                    { text: 'Network mode: Cleanup events when connection is closed manually' },\r\n                    { text: 'Further refactoring into smaller modules' },\r\n                    { text: 'Current turn player is now underlined and italicised' },\r\n                    { text: 'Network mode: Inactivity countdown system' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.2',\r\n                status: 'Alpha',\r\n                dateTime: '14/02/2023',\r\n                points: [\r\n                    { text: 'Added credits page' },\r\n                    { text: 'Noscript notice' },\r\n                    { text: 'Minor fix: Removed vertical scrollbar when first visiting main menu' },\r\n                    { text: 'Minor code cleanup: Printing coin colors simplified due to string enum as well as some other refactoring' },\r\n                    { text: 'Network play' },\r\n                    { text: 'Full board detection' },\r\n                    { text: 'Sound effects for wins, loses and coin drops' },\r\n                    { text: 'UI: Board space distributed more evenly' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.1.3.1',\r\n                status: 'Alpha',\r\n                dateTime: '16/01/2023',\r\n                points: [{text: 'Continue UI changes to make it look better as well as improve experience on mobile devices'}]\r\n            },\r\n            {\r\n                version: '0.1.3',\r\n                status: 'Alpha',\r\n                dateTime: '15/01/2023',\r\n                points: [\r\n                    { text: 'Internal: Configured Webpack to produce a single minified file and sourcemap' },\r\n                    { text: 'Minor UI changes: Blue background for player names and version number as link to release notes' },\r\n                    { text: 'Fix: Coin responds to moves inline with respective column' },\r\n                    { text: 'Improvement: Timer paused when browser tab is inactive' },\r\n                    { text: 'Improvement: Dynamic canvas resizing' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.1.2',\r\n                status: 'Alpha',\r\n                dateTime: '10/01/2023',\r\n                points: [\r\n                    { text: 'Internal: eliminated inline styles' },\r\n                    { text: 'Bug fix: Hidden Exit button when game ends' },\r\n                    { text: 'Implement timer on top' },\r\n                    { text: 'Heading placed inline' },\r\n                    { text: 'Print names for Green and Red players on the top' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.1.1',\r\n                status: 'Alpha',\r\n                dateTime: '09/01/2023',\r\n                points: [\r\n                    { text: 'Internal code adjustment (issue 1) - Adjusted board array to read board[col][row]' },\r\n                    { text: 'Styled main menu and introduced release notes link' },\r\n                    { text: 'Ported save game state feature from the other implementation (cleaner and also saves when closing the page!)' }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.1',\r\n                status: 'Alpha',\r\n                dateTime: '06/01/2023',\r\n                points: [\r\n                    { text: 'Port from old version adapted to TypeScript syntax and some refactoring (excluding a few features)' },\r\n                    { text: 'Fixed bug - clearing marker above the board as mouse moves' },\r\n                    { text: 'New - Prompts for names for Red and Green players' }\r\n                ]\r\n            }\r\n        ]\r\n    });\r\n}","import Utils from \"./utils\";\r\n\r\nconst config = Utils.isLocal() ? {\r\n    httpServer: 'http://localhost:3000',\r\n    wsServer: 'ws://localhost:3000'\r\n} : {\r\n    httpServer: 'https://daniels-connect4-server.adaptable.app',\r\n    wsServer: 'wss://daniels-connect4-server.adaptable.app'\r\n};\r\n\r\nexport default config;","import CreditsDialogOptions from \"./dialog/options/credits-dialog-options\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function openCredits() {\r\n    const options: CreditsDialogOptions = {\r\n        id: DialogIds.Credits,\r\n        title: 'Contributors',\r\n        sections: [\r\n            {\r\n                title: 'Development',\r\n                contributors: ['Daniel Desira']\r\n            },\r\n            {\r\n                title: 'Code Review',\r\n                contributors: ['Sergiu Nimat']\r\n            },\r\n            {\r\n                title: 'UI/UX Advice',\r\n                contributors: ['Pierre Borġ', 'Martina Sultana', 'Jorge Montalbán', 'Abigail Magro']\r\n            },\r\n            {\r\n                title: 'Testing',\r\n                contributors: ['George Zaharia']\r\n            }\r\n        ]\r\n    };\r\n    Dialog.credit(options);\r\n}","import ConfirmationDialogOptions from \"./options/confirmation-dialog-options\";\r\nimport CreditsDialogOptions from \"./options/credits-dialog-options\";\r\nimport DialogOptions from \"./options/dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport MenuDialogOptions from \"./options/menu-dialog-options\";\r\nimport PromptDialogOptions from \"./options/prompt-dialog-options\";\r\nimport PromptInput, { PromptSelect } from \"./options/prompt-input\";\r\nimport ChangelogDialogOptions from \"./options/changelog-dialog-options\";\r\n\r\nexport default class Dialog {\r\n    \r\n    private static modal(type: DialogType, options: DialogOptions) {\r\n        if (!document.getElementById(options.id)) {\r\n            const modal = document.createElement('div') as HTMLDivElement;\r\n            modal.tabIndex = 1;\r\n            modal.id = options.id;\r\n            modal.classList.add('dialog');\r\n\r\n            if (options.title) {\r\n                const h1 = document.createElement('h1') as HTMLHeadingElement;\r\n                h1.innerText = options.title;\r\n                h1.classList.add('dialog-title');\r\n                modal.appendChild(h1);\r\n                modal.appendChild(document.createElement('hr'));\r\n            }\r\n\r\n            const textContainer = document.createElement('div') as HTMLDivElement;\r\n            this.appendText(options.text, textContainer);\r\n            modal.appendChild(textContainer);\r\n\r\n            switch (type) {\r\n                case DialogType.Confirmation: {\r\n                    const o = options as ConfirmationDialogOptions;\r\n                    const btnContainer = document.createElement('div') as HTMLDivElement;\r\n                    btnContainer.classList.add('dialog-btn-container');\r\n                    modal.appendChild(btnContainer);\r\n\r\n                    this.appendBtn(btnContainer, 'Yes', () => {\r\n                        o.yesCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.yesColor, 'button');\r\n                    this.appendBtn(btnContainer, 'No', () => {\r\n                        o.noCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.noColor, 'button');\r\n                    break;\r\n                }\r\n                case DialogType.Notification: {\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Prompt: {\r\n                    const o = options as PromptDialogOptions;\r\n                    this.appendForm(modal, o);\r\n                    break;\r\n                }\r\n                case DialogType.Credits: {\r\n                    const o = options as CreditsDialogOptions;\r\n                    this.appendCredits(textContainer, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Menu: {\r\n                    const o = options as MenuDialogOptions;\r\n                    this.appendMenu(modal, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Changelog: {\r\n                    const o = options as ChangelogDialogOptions;\r\n                    this.appendChangelog(modal, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            document.body.appendChild(modal);\r\n        }\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement | HTMLFormElement,\r\n                text: string,\r\n                callback: any,\r\n                bgColor: string,\r\n                btnType: 'submit' | 'button' | 'reset') {\r\n        const btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = btnType;\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add(`dialog-btn-${bgColor}`);\r\n        if (btnType === 'button') {\r\n            btn.addEventListener('click', callback);\r\n        }\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendForm(modal: HTMLDivElement, options: PromptDialogOptions) {\r\n        const inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        modal.appendChild(inputContainer);\r\n\r\n        const form = document.createElement('form') as HTMLFormElement;\r\n        inputContainer.appendChild(form);\r\n        form.addEventListener('submit', (event: SubmitEvent) => {\r\n            event.preventDefault();\r\n            if (options.onOK) {\r\n                options.onOK();\r\n            }\r\n            this.closeModal(modal);\r\n        });\r\n\r\n        this.appendInputs(form, options.inputs);\r\n        this.appendSelects(form, options.selects);\r\n\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        form.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', null, 'green', 'submit');\r\n        this.appendBtn(btnContainer, 'Cancel', () => {\r\n            if (options.onCancel) {\r\n                options.onCancel();\r\n            }\r\n            this.closeModal(modal);\r\n        }, 'red', 'button');\r\n    }\r\n\r\n    private static appendInputs(form: HTMLFormElement, inputs: Array<PromptInput>) {\r\n        for (const i of inputs) {\r\n            const input = document.createElement('input');\r\n            input.type = i.type;\r\n            input.id = `dialog-input-${i.name}`;\r\n            input.name = `dialog-input-${i.name}`;\r\n            input.ariaPlaceholder = `Enter ${i.label}`;\r\n            input.placeholder = `Enter ${i.label}`;\r\n            input.maxLength = i.limit;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            input.required = i.required;\r\n            input.ariaRequired = i.required.toString();\r\n            form.appendChild(input);\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendSelects(form: HTMLFormElement, selects: Array<PromptSelect>) {\r\n        for (const s of selects) {\r\n            const select = document.createElement('select');\r\n            select.id = `dialog-select-${s.name}`;\r\n            select.name = `dialog-select-${s.name}`;\r\n            select.ariaPlaceholder = s.label;\r\n            select.classList.add('dialog-input');\r\n            select.required = s.required;\r\n            select.ariaRequired = s.required.toString();\r\n            form.appendChild(select);\r\n\r\n            for (const o of s.options) {\r\n                const option = document.createElement('option');\r\n                option.innerText = o.text;\r\n                option.value = o.value;\r\n                if (s.default === parseInt(o.value)) {\r\n                    option.selected = true;\r\n                    option.ariaSelected = \"true\";\r\n                }\r\n                select.appendChild(option);\r\n            }\r\n\r\n            const handleChange = s.onChange;\r\n            if (handleChange) {\r\n                handleChange(select.selectedOptions[0].value);\r\n                select.addEventListener('change', () => handleChange(select.selectedOptions[0].value));\r\n            }\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement | HTMLFormElement) {\r\n        const br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendText(text: Array<string>|undefined, container: HTMLDivElement) {\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        if (text) {\r\n            for (const t of text) {\r\n                const p = document.createElement('p') as HTMLParagraphElement;\r\n                p.innerText = t;\r\n                container.appendChild(p);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static appendCredits(container: HTMLDivElement, options: CreditsDialogOptions) {\r\n        for (const section of options.sections) {\r\n            const h2 = document.createElement('h2');\r\n            h2.innerText = section.title;\r\n            container.appendChild(h2);\r\n            const ul = document.createElement('ul');\r\n            for (const contributor of section.contributors) {\r\n                const li = document.createElement('li');\r\n                li.innerText = contributor;\r\n                ul.appendChild(li);\r\n            }\r\n            container.appendChild(ul);\r\n        }\r\n    }\r\n\r\n    private static appendOKButton(modal: HTMLDivElement) {\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        modal.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', () => {\r\n            this.closeModal(modal);\r\n        }, 'green', 'button');\r\n    }\r\n\r\n    private static listenKeyboard(modal: HTMLDivElement) {\r\n        modal.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape' || event.key === 'Enter') {\r\n                this.closeModal(modal);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static appendMenu(modal: HTMLDivElement, options: MenuDialogOptions) {\r\n        const container = document.createElement('div');\r\n        container.classList.add('dialog-menu-container');\r\n        modal.appendChild(container);\r\n        for (const b of options.buttons) {\r\n            const button = document.createElement('button');\r\n            button.type = 'button';\r\n            button.innerText = b.text;\r\n            button.classList.add('dialog-btn');\r\n            button.classList.add(`dialog-btn-${b.color}`);\r\n            button.classList.add('text');\r\n            button.addEventListener('click', b.callback);\r\n            container.appendChild(button);\r\n        }\r\n    }\r\n\r\n    private static appendChangelog(modal: HTMLDivElement, options: ChangelogDialogOptions) {\r\n        const container = document.createElement('div');\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        modal.appendChild(container);\r\n        for (const release of options.releases) {\r\n            const h2 = document.createElement('h2');\r\n            h2.innerText = `${release.version} (${release.status} release - ${release.dateTime})`;\r\n            container.appendChild(h2);\r\n            const ul = document.createElement('ul');\r\n            container.appendChild(ul);\r\n            for (const point of release.points) {\r\n                const outerLi = document.createElement('li');\r\n                outerLi.innerText = point.text;\r\n                ul.appendChild(outerLi);\r\n                if (point.subPoints && point.subPoints.length > 0) {\r\n                    const ol = document.createElement('ol');\r\n                    outerLi.appendChild(ol);\r\n                    for (const subPoint of point.subPoints) {\r\n                        const innerLi = document.createElement('li');\r\n                        innerLi.innerText = subPoint;\r\n                        ol.appendChild(innerLi);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        if (document.body.contains(modal)) {\r\n            document.body.removeChild(modal);\r\n        }\r\n    }\r\n\r\n    public static confirm(options: ConfirmationDialogOptions) {\r\n        Dialog.modal(DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(options: DialogOptions) {\r\n        Dialog.modal(DialogType.Notification, options);\r\n    }\r\n\r\n    public static prompt(options: PromptDialogOptions) {\r\n        Dialog.modal(DialogType.Prompt, options);\r\n    }\r\n\r\n    public static credit(options: CreditsDialogOptions) {\r\n        Dialog.modal(DialogType.Credits, options);\r\n    }\r\n\r\n    public static menu(options: MenuDialogOptions) {\r\n        Dialog.modal(DialogType.Menu, options);\r\n    }\r\n\r\n    public static changelog(options: ChangelogDialogOptions) {\r\n        Dialog.modal(DialogType.Changelog, options);\r\n    }\r\n\r\n    public static closeAllOpenDialogs() {\r\n        const dialogs = document.getElementsByClassName('dialog') as HTMLCollectionOf<HTMLDivElement>;\r\n        for (let i: number = 0; i < dialogs.length; i++) {\r\n            this.closeModal(dialogs[i]);\r\n        }\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2,\r\n    Credits = 3,\r\n    Menu = 4,\r\n    Changelog = 5\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport { PromptSelect } from \"./dialog/options/prompt-input\";\r\n\r\nconst dimensionsSelectData: PromptSelect = {\r\n    name: 'dimensions',\r\n    label: 'Dimensions',\r\n    required: true,\r\n    options: [\r\n        {\r\n            text: 'Small (6x5)',\r\n            value: BoardDimensions.Small.toString()\r\n        },\r\n        {\r\n            text: 'Medium (7x6)',\r\n            value: BoardDimensions.Medium.toString()\r\n        },\r\n        {\r\n            text: 'Large (9x8)',\r\n            value: BoardDimensions.Large.toString()\r\n        }\r\n    ],\r\n    default: 3,\r\n    onChange: () => {}\r\n};\r\n\r\nexport default dimensionsSelectData;","export enum DialogIds {\r\n    PlayerNames = 'player-input-dialog',\r\n    ServerError = 'server-error-dialog',\r\n    Instructions = 'instructions-dialog',\r\n    GameEnd = 'game-end-dialog',\r\n    ExitGame = 'exit-game-dialog',\r\n    ContinueGame = 'continue-game-dialog',\r\n    Saved = 'saved-notification-dialog',\r\n    PlayerStats = 'player-stats-dialog',\r\n    Settings = 'settings-dialog',\r\n    Credits = 'credits-dialog',\r\n    AccountMenu = 'account-menu-dialog',\r\n    LogoutDisabled = 'logout-disabled-dialog',\r\n    Changelog = 'changelog-dialog'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandCoin = './sounds/land-coin.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import Position from './position';\r\nimport PlayerNameSection from './player-name-section';\r\nimport GameOptions from './game-options';\r\nimport BoardLogic, { Coin, switchTurn } from '@danieldesira/daniels-connect4-common';\r\n\r\nexport default abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    protected context: CanvasRenderingContext2D;\r\n    protected board: BoardLogic;\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNameSection: PlayerNameSection;\r\n    private gameIndicatorsContainer: HTMLDivElement;\r\n    private gameMenu: HTMLDivElement;\r\n    protected timerSpan: HTMLSpanElement;\r\n    protected countdownSpan: HTMLSpanElement;\r\n\r\n    protected turn: Coin = Coin.Red;\r\n\r\n    private coinRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected currentCoinColumn: number = 4;\r\n    protected static moveLeftKeys: Array<string> = ['a', 'A', 'ArrowLeft'];\r\n    protected static moveRightKeys: Array<string> = ['d', 'D', 'ArrowRight'];\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNameSection = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n\r\n        if (options.gameIndicatorsId) {\r\n            this.gameIndicatorsContainer = document.getElementById(options.gameIndicatorsId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.menuId) {\r\n            this.gameMenu = document.getElementById(options.menuId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timerSpan = document.getElementById(options.timerId) as HTMLSpanElement;\r\n        }\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        this.showGame();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.initPlayerNames();\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        const boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = this.board.getColumns() - 1; col >= 0; col--) {\r\n            for (let row = this.board.getRows() - 1; row >= 0; row--) {\r\n                this.context.fillStyle = Game.getColor(this.board.getBoard()[col][row]);\r\n                this.drawCoin(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.addEventListener('click', this.exit);\r\n        document.body.addEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.addEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n    protected abstract handleKeyDown(event: KeyboardEvent): void;\r\n    protected abstract canvasTouchmove(event: TouchEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent | Touch): number {\r\n        const position = Position.getCursorPosition(event, this.canvas);\r\n        const column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        this.turn = switchTurn(this.turn);\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveCoin() {\r\n        this.clearUpper();\r\n        this.context.fillStyle = Game.getColor(this.turn);\r\n        this.paintCoinToDrop(this.currentCoinColumn);\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = this.board.putCoin(this.turn, this.currentCoinColumn);\r\n            \r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.drawCoin(this.currentCoinColumn, row);\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected abstract showWinDialog(winner: string, currentTurn: Coin);\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            this.resetValues();\r\n            this.hideGame();\r\n\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.clear();\r\n            }\r\n        }, 3000);\r\n    }\r\n\r\n    protected paintCoinToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.coinRadius, this.coinRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.removeEventListener('click', this.exit);\r\n        document.body.removeEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.removeEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.hideGame();\r\n        this.resetValues();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n    }\r\n\r\n    protected resizeCanvas = () => {\r\n        const topHeight = 100;\r\n\r\n        this.canvas.height = window.innerHeight - topHeight;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.coinRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.coinRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.board) {\r\n            this.colGap = this.canvas.width / this.board.getColumns();\r\n            this.rowGap = (this.canvas.height - topHeight) / this.board.getRows();\r\n            this.colOffset = this.colGap / 2;\r\n            this.paintBoard();\r\n        }\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Coin.Red;\r\n        this.board.resetBoard();\r\n        \r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.reset();\r\n        }\r\n    }\r\n\r\n    private drawCoin(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.coinRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNameSection && this.playerNameSection.areBothPlayersConnected();\r\n    }\r\n\r\n    private showGame() {\r\n        this.canvas.classList.remove('hide');\r\n        this.exitBtn.classList.remove('hide');\r\n        this.gameIndicatorsContainer.classList.remove('hide');\r\n        this.gameMenu.classList.add('hide');\r\n    }\r\n\r\n    private hideGame() {\r\n        this.canvas.classList.add('hide');\r\n        this.exitBtn.classList.add('hide');\r\n        this.gameIndicatorsContainer.classList.add('hide');\r\n        this.gameMenu.classList.remove('hide');\r\n    }\r\n\r\n    protected static getColor(color: Coin): string {\r\n        let value: string = '';\r\n        switch (color) {\r\n            case Coin.Empty:\r\n                value = 'lightyellow';\r\n                break;\r\n            case Coin.Red:\r\n                value = 'red';\r\n                break;\r\n            case Coin.Green:\r\n                value = 'greenyellow';\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function showInstructions() {\r\n    const text = [\r\n        'The principle behind Connect4 is simple:',\r\n        'The player who first places 4 coins next to each other, wins. You may ' +\r\n            'match horizontally, vertically or diagonally.',\r\n        'Furthermore, in Network Play, you must place your coin within 60 seconds. ' +\r\n            'If you fail to do so, you pass the turn to your opponent.',\r\n        'Further note that exiting in Same Device Play, saves game progress. You ' +\r\n            'will be presented with the option to continue the same game the next ' +\r\n            'time. This does not work for Network Play because your opponent might ' +\r\n            'not be available the next time and you might not even know him/her/them.',\r\n        'Good luck and have fun playing!'\r\n    ];\r\n    Dialog.notify({\r\n        id: DialogIds.Instructions,\r\n        text,\r\n        title: 'Instructions'\r\n    });\r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common/lib/enums/coin\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport Socket from \"./socket\";\r\nimport Utils from \"./utils\";\r\nimport { ActionMessage, BoardDimensions, CurrentTurnMessage, ErrorMessage, GameMessage, InitialMessage, WinnerMessage, skipTurnMaxWait } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport Authentication from \"./authentication\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\n\r\nexport default class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): NetworkGame {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.board = new BoardLogic(BoardDimensions.Large);\r\n        const auth = Authentication.getToken();\r\n        if (auth) {\r\n            this.defineSocket(auth);\r\n            this.startCountdown();\r\n            super.start();\r\n            document.body.classList.add('waiting');\r\n            if (this.timerSpan) {\r\n                this.timerSpan.classList.add('hide');\r\n            }\r\n            if (this.countdownSpan) {\r\n                this.countdownSpan.classList.remove('hide');\r\n            }\r\n        } else {\r\n            Dialog.notify({\r\n                title: 'Error',\r\n                text: ['User not logged in!'],\r\n                id: DialogIds.ServerError\r\n            });\r\n        }\r\n    }\r\n\r\n    private defineSocket(auth: AuthenticationModel) {\r\n        this.socket = new Socket(auth);\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n        this.socket.onGameCancel = this.confirmExit;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n            if (this.socket && this.playerNameSection) {\r\n                if (data.opponentName) {\r\n                    this.toggleWaitingClass();\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerGreen(data.opponentName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerRed(data.opponentName);\r\n                    }\r\n                }\r\n    \r\n                if (data.playerName) {\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(data.playerName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerGreen(data.playerName);\r\n                    }\r\n                }\r\n        \r\n                if (data.color) {\r\n                    if (data.color === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(this.socket.getPlayerName());\r\n                    } else {\r\n                        this.playerNameSection.setPlayerGreen(this.socket.getPlayerName());\r\n                    }\r\n                }\r\n\r\n                if (data.dimensions) {\r\n                    this.board = new BoardLogic(data.dimensions);\r\n                    this.resizeCanvas();\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isActionMessage(messageData)) {\r\n            const data = messageData as ActionMessage;\r\n            if (data.action === 'mousemove') {\r\n                this.currentCoinColumn = data.column;\r\n                this.moveCoin();\r\n            }\r\n    \r\n            if (data.action === 'click') {\r\n                this.turn = data.color;\r\n                this.currentCoinColumn = data.column;\r\n                this.landCoin();\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.turnCountDown = skipTurnMaxWait;\r\n            this.toggleWaitingClass();\r\n        }\r\n\r\n        if (GameMessage.isWinnerMessage(messageData)) {\r\n            const data = messageData as WinnerMessage;\r\n            let winner: string = null;\r\n            if (this.playerNameSection) {\r\n                if (data.winner === Coin.Red) {\r\n                    winner = `${this.playerNameSection.getPlayerRed()} (Red)`;\r\n                } else {\r\n                    winner = `${this.playerNameSection.getPlayerGreen()} (Green)`;\r\n                }\r\n            }\r\n            this.showWinDialog(winner, data.winner);\r\n\r\n            this.closeGameAfterWinning();\r\n            document.body.classList.remove('waiting');\r\n        }\r\n\r\n        if (GameMessage.isTieMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Game resulted in tie!'],\r\n                title: null\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.toggleWaitingClass();\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.indicateTurn(this.turn);\r\n            }\r\n        }\r\n\r\n        if (GameMessage.isDisconnectMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Your opponent disconnected. You win!'],\r\n                title: 'We have a winner!'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isErrorMessage(messageData)) {\r\n            const data = messageData as ErrorMessage;\r\n            Dialog.closeAllOpenDialogs();\r\n            Dialog.notify({\r\n                id: DialogIds.ServerError,\r\n                text: [data.error],\r\n                title: 'Error'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'click',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n            \r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            // Assume the game is still going on\r\n            this.switchTurn();\r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.paintCoinToDrop(this.currentCoinColumn);\r\n            Utils.playSound(Sound.LandCoin);\r\n            this.toggleWaitingClass();\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    private toggleWaitingClass() {\r\n        if (this.socket.getPlayerColor() === this.turn) {\r\n            document.body.classList.remove('waiting');\r\n        } else {\r\n            document.body.classList.add('waiting');\r\n        }\r\n    }\r\n\r\n    public exit = () => {\r\n        Dialog.confirm({\r\n            id: DialogIds.ExitGame,\r\n            title: null,\r\n            text: ['Network game in progress. Are you sure you want to quit?'],\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {},\r\n            yesColor: 'red',\r\n            noColor: 'green'\r\n        });\r\n    };\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n        Dialog.closeAllOpenDialogs();\r\n        document.body.classList.remove('waiting');\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected showWinDialog(winner: string, currentTurn: Coin) {\r\n        const winMsg: Array<string> = [];\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.socket && this.socket.getPlayerColor() === currentTurn) {\r\n            winMsg.push('You win!');\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg.push('You lose!');\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'Game Ends'\r\n        });\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n    };\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > skipTurnMaxWait / 2) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let data: GameMessage;\r\n\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                data = {\r\n                    column: this.currentCoinColumn,\r\n                    action: 'click',\r\n                    color: this.turn\r\n                };\r\n                this.socket.send(data);\r\n\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n    \r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public initPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan && !this.playerGreen) {\r\n            this.playerGreenSpan.innerText = waiting;\r\n        }\r\n        if (this.playerRedSpan && !this.playerRed) {\r\n            this.playerRedSpan.innerText = waiting;\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed = (): string => this.playerRed;\r\n    public getPlayerGreen = (): string => this.playerGreen;\r\n    public areBothPlayersConnected = (): boolean => !!this.playerRed && !!this.playerGreen;\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Coin) {\r\n        if (turn === Coin.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export default class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event: MouseEvent | Touch, canvas: HTMLCanvasElement): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        } else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Utils from \"./utils\";\r\nimport Timer from \"./timer\";\r\nimport { BoardDimensions, Coin, randomiseTurn } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport PreviousGameData from \"./models/previous-game-data\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\nimport dimensionsSelectData from \"./dimensions-select\";\r\n\r\nexport default class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n    private timer: Timer;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        \r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): SameDeviceGame {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    private setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n        if (this.countdownSpan) {\r\n            this.countdownSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        this.setUpPlayerNames();\r\n        \r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n\r\n        const onPromptOK = () => {\r\n            const redInput = document.getElementById('dialog-input-red') as HTMLInputElement;\r\n            const greenInput = document.getElementById('dialog-input-green') as HTMLInputElement;\r\n            if (redInput.value && greenInput.value && redInput.value.trim()\r\n                    && greenInput.value.trim()) {\r\n                this.playerNameSection?.setPlayerRed(redInput.value);\r\n                this.playerNameSection?.setPlayerGreen(greenInput.value);\r\n                this.setTimer();\r\n            }\r\n\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            this.board = new BoardLogic(dimensions);\r\n        };\r\n\r\n        if (!gameData) {\r\n            dimensionsSelectData.onChange = (value: string) => {\r\n                const dimensions = parseInt(value);\r\n                this.board = new BoardLogic(dimensions);\r\n                this.resizeCanvas();\r\n            };\r\n            Dialog.prompt({\r\n                id: DialogIds.PlayerNames,\r\n                title: 'Input Players',\r\n                text: ['Please enter player names! (10 characters or less.)'],\r\n                onOK: () => onPromptOK(),\r\n                onCancel: this.exit,\r\n                inputs: [\r\n                    {\r\n                        label: 'Player Red',\r\n                        name: 'red',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    },\r\n                    {\r\n                        label: 'Player Green',\r\n                        name: 'green',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    }\r\n                ],\r\n                selects: [dimensionsSelectData]\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkGameData() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        if (gameData) {\r\n            Dialog.confirm({\r\n                id: DialogIds.ContinueGame,\r\n                title: null,\r\n                text: ['Do you want to continue playing the previous game?'],\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame,\r\n                yesColor: 'green',\r\n                noColor: 'red'\r\n            });\r\n        } else {\r\n            this.turn = randomiseTurn();\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        this.clearGameData();\r\n        this.turn = randomiseTurn();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        this.turn = gameData.nextTurn;\r\n        this.board = new BoardLogic(gameData.dimensions);\r\n        this.board.setBoard(gameData.board);\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunning(gameData.secondsRunning);\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setPlayerGreen(gameData.playerGreen);\r\n            this.playerNameSection.setPlayerRed(gameData.playerRed);\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            const gameData: PreviousGameData = {\r\n                nextTurn: this.turn,\r\n                board: this.board.getBoard(),\r\n                secondsRunning: this.timer?.getSecondsRunning(),\r\n                playerRed: this.playerNameSection?.getPlayerRed(),\r\n                playerGreen: this.playerNameSection?.getPlayerGreen(),\r\n                dimensions: this.board.getDimensions()\r\n            };\r\n            localStorage.setItem('gameData', JSON.stringify(gameData));\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        this.saveGame();\r\n        Dialog.closeAllOpenDialogs();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.clearGameData();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            const coinCount = this.board.countConsecutiveCoins(this.currentCoinColumn, row, this.turn);\r\n\r\n            if (coinCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.turn === Coin.Red) {\r\n                    winner = `${this.playerNameSection?.getPlayerRed()} (Red)`;\r\n                } else if (this.turn === Coin.Green) {\r\n                    winner = `${this.playerNameSection?.getPlayerGreen()} (Green)`;\r\n                }\r\n\r\n                this.showWinDialog(winner, this.turn);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.board.isBoardFull()) {\r\n                const message: string = `${this.playerNameSection?.getPlayerRed()} (Red) and ${this.playerNameSection?.getPlayerGreen()} (Green) are tied!`;\r\n                Dialog.notify({\r\n                    id: DialogIds.GameEnd,\r\n                    title: 'Tie',\r\n                    text: [message]\r\n                });\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = Game.getColor(this.turn);\r\n                this.paintCoinToDrop(this.currentCoinColumn);\r\n                Utils.playSound(Sound.LandCoin);\r\n            }\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected showWinDialog(winner: string, _: Coin) {\r\n        const winMsg: Array<string> = new Array();\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.timer) {\r\n            winMsg.push(`Time taken: ${this.timer.getTimeInStringFormat()}`);\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'We have a winner!'\r\n        });\r\n    }\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n\r\n    private clearGameData() {\r\n        localStorage.removeItem('gameData');\r\n    }\r\n\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport Authentication from \"./authentication\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport dimensionsSelect from \"./dimensions-select\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default async function openSettings() {\r\n    dimensionsSelect.onChange = null;\r\n    const settings = await Authentication.getSettings();\r\n    dimensionsSelect.default = settings.dimensions;\r\n    Dialog.prompt({\r\n        id: DialogIds.Settings,\r\n        title: 'Settings',\r\n        text: [],\r\n        inputs: [],\r\n        selects: [dimensionsSelect],\r\n        onOK: async () => {\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            await Authentication.updateSettings(dimensions);\r\n        },\r\n        onCancel: null\r\n    });\r\n}","import Authentication from \"./authentication\";\r\nimport config from \"./config\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { Coin, GameMessage, InitialMessage } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Coin;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n    public onGameCancel: Function;\r\n\r\n    public constructor(auth: AuthenticationModel) {\r\n        this.connect(auth);\r\n    }\r\n\r\n    private connect(auth: AuthenticationModel) {\r\n        let url: string = `${config.wsServer}?token=${auth.token}&service=${auth.service}`;\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += `&playerColor=${this.playerColor}&gameId=${this.gameId}`;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send = (data: GameMessage) => this.webSocket.send(JSON.stringify(data));\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor = (): Coin => this.playerColor;\r\n    public getPlayerName = (): string => this.playerName;\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        const messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n\r\n            if (!this.gameId) {\r\n                this.gameId = data.gameId;\r\n            }\r\n\r\n            if (!this.playerName) {\r\n                this.playerName = data.playerName;\r\n            }\r\n            \r\n            if (!this.playerColor) {\r\n                this.playerColor = data.color;\r\n            }\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.closeAllOpenDialogs();\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            text: ['Problem connecting to server!'],\r\n            title: 'Error'\r\n        });\r\n\r\n        document.body.classList.remove('waiting');\r\n    };\r\n\r\n    private onClose = () => {\r\n        const auth = Authentication.getToken();\r\n        if (auth) {\r\n            this.connect(auth);\r\n        }\r\n    };\r\n}","export default class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private interval: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        const minutes: number = Math.floor(this.secondsRunning / 60);\r\n        const seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = `${minutes}:${(seconds < 10 ? '0' : '')}${seconds}`;\r\n        \r\n        if (this.timerSpan.classList.contains('hide')) {\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearInterval(this.interval);\r\n        } else {\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    \r\n    public setSecondsRunning(secondsRunning: number) {\r\n        this.secondsRunning = secondsRunning;\r\n    }\r\n\r\n    public getSecondsRunning = () => this.secondsRunning;   \r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export default class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        const audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","import Authentication from \"./lib/authentication\";\r\nimport Dialog from \"./lib/dialog/dialog\";\r\nimport { DialogIds } from \"./lib/enums/dialog-ids\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\nimport GameOptions from \"./lib/game-options\";\r\nimport NetworkGame from \"./lib/network-game\";\r\nimport SameDeviceGame from \"./lib/same-device-game\";\r\nimport openCredits from \"./lib/credits\";\r\nimport showInstructions from \"./lib/instructions\";\r\nimport openSettings from \"./lib/settings-dialog\";\r\nimport openChangelog from \"./lib/changelog\";\r\n\r\nconst samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nconst networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nconst instructionsBtn = document.getElementById('instructions') as HTMLButtonElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n});\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n});\r\n\r\nfunction initGame(mode: GameMode) {\r\n    try {\r\n        const options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            countdownId: 'countdown',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            menuId: 'menu',\r\n            gameIndicatorsId: 'gameIndicators'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            const connect4 = NetworkGame.getInstance(options);\r\n            connect4.start();\r\n        } else {\r\n            const connect4 = SameDeviceGame.getInstance(options);\r\n            connect4.start();\r\n        }\r\n    } catch (ex) {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem encountered!']\r\n        });\r\n        console.error(ex);\r\n    }\r\n}\r\n\r\ninstructionsBtn.addEventListener('click', showInstructions);\r\n\r\nconst shareBtn = document.getElementById('shareBtn') as HTMLAnchorElement;\r\nshareBtn.addEventListener('click', (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    if (navigator.canShare) {\r\n        const shareData = {\r\n            url: location.href,\r\n            title: `Daniel's Connect4`\r\n        };\r\n        navigator.share(shareData)\r\n            .catch((err) => console.error(`Problem while sharing: ${err}`));\r\n    } else {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem opening share menu!']\r\n        });\r\n    }\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n    Authentication.initGoogleSSO(async () => {\r\n        showLoginLogout();\r\n        await loadUserData();\r\n    });\r\n    Authentication.renderGoogleBtn('googleSignonContainer');\r\n});\r\n\r\nfunction showLoginLogout() {\r\n    const loginBtns = document.getElementById('login-btns') as HTMLDivElement;\r\n    const loggedInArea = document.getElementById('logged-in') as HTMLDivElement;\r\n    if (localStorage.getItem('auth')) {\r\n        loginBtns.classList.add('hide');\r\n        loggedInArea.classList.remove('hide');\r\n    } else {\r\n        loginBtns.classList.remove('hide');\r\n        loggedInArea.classList.add('hide');\r\n    }\r\n}\r\n\r\nasync function loadUserData() {\r\n    const user = await Authentication.getUserData();\r\n    if (user) {\r\n        const userName = document.getElementById('authPlayerName');\r\n        userName.innerText = user.user;\r\n        authPlayerPicture.src = user.picUrl;\r\n    } else {\r\n        Authentication.logout();\r\n        showLoginLogout();\r\n    }\r\n}\r\n\r\nconst creditsBtn = document.getElementById('credits') as HTMLAnchorElement;\r\ncreditsBtn.addEventListener('click', (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    openCredits();\r\n});\r\n\r\nconst changelogLink = document.getElementById('changelog') as HTMLAnchorElement;\r\nchangelogLink.addEventListener('click', (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    openChangelog();\r\n})\r\n\r\nconst authPlayerPicture = document.getElementById('authPlayerPicture') as HTMLImageElement;\r\nauthPlayerPicture.addEventListener('click', () => {\r\n    const userText = document.getElementById('authPlayerName');\r\n    Dialog.menu({\r\n        id: DialogIds.AccountMenu,\r\n        title: userText.innerText,\r\n        text: [],\r\n        buttons: [\r\n            {\r\n                text: 'Load Stats',\r\n                callback: async () => await Authentication.loadStats(),\r\n                color: 'green'\r\n            },\r\n            {\r\n                text: 'Settings',\r\n                callback: openSettings,\r\n                color: 'green'\r\n            },\r\n            {\r\n                text: 'Logout',\r\n                callback: () => {\r\n                    const canvas = document.getElementById('board');\r\n                    const countdown = document.getElementById('countdown');\r\n                    if (canvas.classList.contains('hide') || countdown.classList.contains('hide')) {\r\n                        Authentication.logout();\r\n                        showLoginLogout();\r\n                        Dialog.closeAllOpenDialogs();\r\n                    } else {\r\n                        Dialog.notify({\r\n                            id: DialogIds.LogoutDisabled,\r\n                            title: 'Logout Disabled',\r\n                            text: ['You may not logout while Network Game is in progress.']\r\n                        });\r\n                    }\r\n                },\r\n                color: 'red'\r\n            }\r\n        ]\r\n    });\r\n});\r\n\r\n(async () => {\r\n    showLoginLogout();\r\n    await loadUserData();\r\n})();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["Object","defineProperty","exports","value","BoardLogic","constants_1","coin_1","dimensions_1","dim","_this","this","board","getColumns","columns","getRows","rows","getDimensions","dimensions","getBoard","resetBoard","initBoard","BoardDimensions","Small","small","Medium","medium","Large","large","prototype","Array","col","row","Coin","Empty","countConsecutiveCoins","column","currentTurn","count","coinCount","rowCount","colCount","isBoardFull","full","putCoin","color","setBoard","setBoardItem","coin","skipTurnMaxWait","switchTurn","randomiseTurn","GameMessage","board_logic_1","enumerable","get","game_message_1","player_turn_1","isInitialMessage","msg","isNaN","isInactivityMessage","isActionMessage","isWinnerMessage","isTieMessage","isCurrentTurnMessage","isDisconnectMessage","isErrorMessage","Math","floor","random","handleGoogleSignon","response","credential","storeGoogleToken","token","data","service","localStorage","setItem","JSON","stringify","getToken","val","getItem","parse","loadStats","authGet","httpServer","stats","notify","id","DialogIds","PlayerStats","title","text","wins","winPercent","toFixed","losses","lossPercent","initGoogleSSO","callback","window","google","accounts","initialize","client_id","prompt","renderGoogleBtn","containerId","container","document","getElementById","renderButton","type","theme","size","updateSettings","params","authPost","ServerError","url","auth","fetch","headers","res","status","json","method","body","logout","removeItem","getUserData","getSettings","isLoggedIn","Authentication","changelog","Changelog","releases","version","dateTime","points","subPoints","config","isLocal","wsServer","options","Credits","sections","contributors","credit","modal","createElement","tabIndex","classList","add","h1","innerText","appendChild","textContainer","appendText","DialogType","Confirmation","btnContainer","appendBtn","yesCallback","closeModal","yesColor","noCallback","noColor","Notification","appendOKButton","listenKeyboard","Prompt","o","appendForm","appendCredits","Menu","appendMenu","appendChangelog","bgColor","btnType","btn","addEventListener","inputContainer","form","event","preventDefault","onOK","appendInputs","inputs","appendSelects","selects","onCancel","i","input","name","ariaPlaceholder","label","placeholder","maxLength","limit","required","ariaRequired","toString","appendBrElement","s","select","option","default","parseInt","selected","ariaSelected","handleChange","onChange","selectedOptions","br","t","p","section","h2","ul","contributor","li","key","buttons","b","button","release","point","outerLi","length","ol","subPoint","innerLi","contains","removeChild","confirm","Dialog","menu","closeAllOpenDialogs","dialogs","getElementsByClassName","dimensionsSelectData","GameMode","Sound","turn","Red","currentCoinColumn","resizeCanvas","canvas","height","innerHeight","width","innerWidth","coinRadius","colGap","rowGap","colOffset","paintBoard","canvasId","context","getContext","exitBtnId","exitBtn","playerRedId","playerGreenId","playerNameSection","gameIndicatorsId","gameIndicatorsContainer","menuId","gameMenu","timerId","timerSpan","countdownId","countdownSpan","start","showGame","initPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","getColor","drawCoin","canvasMousemove","canvasClick","beforeUnload","exit","handleKeyDown","canvasTouchmove","getColumnFromCursorPosition","position","getCursorPosition","round","x","moveCoin","clearUpper","paintCoinToDrop","landCoin","closeGameAfterWinning","cleanUpEvents","setTimeout","resetValues","hideGame","clear","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","reset","areBothPlayersConnected","remove","Green","moveLeftKeys","moveRightKeys","Instructions","onSocketMessage","messageData","socket","opponentName","toggleWaitingClass","getPlayerColor","setPlayerGreen","setPlayerRed","playerName","getPlayerName","action","turnCountDown","winner","getPlayerRed","getPlayerGreen","showWinDialog","GameEnd","error","onSocketError","send","firstTouch","changedTouches","ExitGame","confirmExit","close","returnValue","turnCountDownCallback","adaptCountDownColor","includes","getInstance","NetworkGame","instance","defineSocket","startCountdown","onMessageCallback","onErrorCallback","onGameCancel","stopCountdown","playSound","LandCoin","winMsg","push","Win","Lose","resetCountdown","turnCountDownInterval","setInterval","clearInterval","playerRed","playerGreen","playerRedSpan","playerGreenSpan","waiting","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","Position","offsetLeft","offsetTop","setTimer","timer","set","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","clearGameData","saveGame","stop","pageVisibilityChange","pauseWhenDocumentHidden","SameDeviceGame","checkGameData","setUpPlayerNames","PlayerNames","redInput","greenInput","trim","dimensionsSelect","onPromptOK","ContinueGame","gameData","nextTurn","setSecondsRunning","secondsRunning","getSecondsRunning","message","_","getTimeInStringFormat","settings","Settings","webSocket","playerColor","onMessage","gameId","onError","onClose","connect","WebSocket","onmessage","onerror","onclose","timerCallback","minutes","seconds","interval","hidden","location","protocol","hostname","path","Audio","play","samePCBtn","networkBtn","instructionsBtn","initGame","mode","Network","ex","console","showLoginLogout","loginBtns","loggedInArea","loadUserData","user","authPlayerPicture","src","picUrl","SamePC","navigator","canShare","shareData","href","share","catch","err","userText","AccountMenu","countdown","LogoutDisabled","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call"],"sourceRoot":""}