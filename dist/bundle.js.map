{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/dot.ts","webpack:///./src/game-mode.ts","webpack:///./src/game.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum Dot {\r\n    EMPTY = 0,\r\n    RED = 1,\r\n    GREEN = 2\r\n}","export enum GameMode {\r\n    SAME_PC = 1\r\n}","import { GameMode } from './game-mode';\r\nimport { Dot } from './dot';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n        this.resizeCanvas();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData(){\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        }\r\n\r\n        // Print player names on screen\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                if (this.board[col][row] === Dot.RED) {\r\n                    this.context.fillStyle = 'red';\r\n                } else if (this.board[col][row] === Dot.GREEN) {\r\n                    this.context.fillStyle = 'greenyellow';\r\n                } else {\r\n                    this.context.fillStyle = 'black';\r\n                }\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.addEventListener('click', this.landDot, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private moveDot = (event) => {\r\n        this.clearUpper();\r\n\r\n        let position: Position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        \r\n        if (this.turn == Dot.RED) {\r\n            this.context.fillStyle = 'red';\r\n        } else if (this.turn == Dot.GREEN) {\r\n            this.context.fillStyle = 'greenyellow';\r\n        }\r\n\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot = (event) => {\r\n        let position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.EMPTY) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === 0) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (this.turn === Dot.RED) {\r\n                this.context.fillStyle = 'red';\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.context.fillStyle = 'greenyellow';\r\n            }\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 Dots\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Dot.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                // Clear game data\r\n                localStorage.clear();\r\n\r\n                this.cleanUpEvents();\r\n                this.stopTimer();\r\n                this.clearPlayerNames();\r\n\r\n                // Run delegate function to return to main menu, in case it is defined\r\n                if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n                    setTimeout(this.onGameEnd, 3000);\r\n                }\r\n            }\r\n            \r\n            // Switches turn\r\n            if (this.turn === Dot.RED) {\r\n                this.turn = Dot.GREEN;\r\n                this.context.fillStyle = 'greenyellow';\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.turn = Dot.RED;\r\n                this.context.fillStyle = 'red';\r\n            }\r\n\r\n            this.paintDotToDrop(column);\r\n\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.rowGap - this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = () => {\r\n        this.saveGame();\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            clearInterval(this.timerInterval);\r\n        } else {\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.removeEventListener('click', this.landDot, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        this.turn = parseInt(localStorage.getItem('nextTurn'));\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        this.saveGame();\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.circleRadius = Math.max(this.canvas.width / Game.columns - 65, 10);\r\n            this.colGap = 75;\r\n            this.rowGap = this.canvas.height / (Game.rows + 1) + this.circleRadius;\r\n        } else {\r\n            this.circleRadius = Math.max(this.canvas.height / Game.rows - 65, 10);\r\n            this.colGap = this.canvas.width / (Game.columns + 1) + this.circleRadius;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        // If mobile/tablet screen, use a small radius\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 10;\r\n        }\r\n\r\n        this.paintBoard();\r\n    }\r\n\r\n}\r\n\r\nclass Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","exitBtn","canvas","Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","RED","moveDot","event","clearUpper","position","getCursorPosition","column","Math","round","x","colGap","context","fillStyle","GREEN","paintDotToDrop","landDot","row","EMPTY","r","rows","beginPath","arc","rowGap","circleRadius","PI","closePath","fill","checkDotCount","winner","playerRed","playerGreen","classList","add","winMsg","timerSpan","innerText","alert","localStorage","clear","cleanUpEvents","stopTimer","clearPlayerNames","undefined","onGameEnd","setTimeout","beforeUnload","saveGame","timerCallback","secondsRunning","minutes","floor","seconds","pageVisibilityChange","document","hidden","clearInterval","timerInterval","setInterval","resizeCanvas","height","window","innerHeight","width","innerWidth","max","paintBoard","this","getElementById","getContext","col","playerRedSpan","playerGreenSpan","start","checkGameData","setUpPlayerNames","setGameEvents","setTimer","mode","SAME_PC","getItem","nextTurn","confirm","restoreLastGame","prompt","boardGradient","createLinearGradient","addColorStop","fillRect","y","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","JSON","stringify","parseInt","parse","exit","remove","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}