{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static checkDotCount(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { GameMode } from './enums/game-mode';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    protected playerNames: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    protected mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId);\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNames = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames(this.mode);\r\n            this.playerNames.switchTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event);\r\n    protected abstract canvasClick(event);\r\n\r\n    protected getColumnFromCursorPosition(): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.switchTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = BoardLogic.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = BoardLogic.checkDotCount(this.board, column, row, this.turn);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                alert(message);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: any;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.Network;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition();\r\n            this.moveDot(column);\r\n\r\n            let data = {\r\n                action: 'mousemove',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected())) {\r\n            let column = this.getColumnFromCursorPosition();\r\n\r\n            let data = {\r\n                action: 'click',\r\n                column: column\r\n            };\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit(): void {\r\n        let exitConfirmation: boolean = confirm('Network game in progress. Are you sure you want to quit?');\r\n\r\n        if (exitConfirmation) {\r\n            if (this.socket) {\r\n                this.socket.close();\r\n            }\r\n\r\n            super.exit();\r\n        }\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = ''; // Required by Chrome\r\n    }\r\n\r\n    protected winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        winMsg += '\\n';\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg += 'You win!';\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg += 'You lose!';\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n\r\n        if (this.socket && this.turn === this.socket.getPlayerColor()) {\r\n            this.skipTurn = true;\r\n            this.endGameDueToInactivity = true;\r\n            this.turnCountDown = 60;\r\n            this.turnCountDownInterval = setInterval(this.turnCountDownCallback, 1000);\r\n        } else {\r\n            clearInterval(this.turnCountDownInterval);\r\n        }\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        this.turnCountDown--;\r\n\r\n        if (this.turnCountDown <= 0) {\r\n            if (this.endGameDueToInactivity) {\r\n                // to-do: end game and send flag to server\r\n            }\r\n\r\n            if (this.skipTurn) {\r\n                this.switchTurn();\r\n                // to-do: send message to server to let the opponent's client know that the turn switched\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    public printPlayerNames(mode: GameMode) {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public switchTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { GameMode } from \"./enums/game-mode\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        this.mode = GameMode.SamePC;\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start(): void {\r\n        this.checkGameData();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setUpPlayerNames();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.setRunnable(true);\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event) => {\r\n        let column = this.getColumnFromCursorPosition();\r\n        this.moveDot(column);\r\n    };\r\n\r\n    protected canvasClick = (event) => {\r\n        let column = this.getColumnFromCursorPosition();\r\n        this.landDot(column);\r\n    };\r\n\r\n    public exit() {\r\n        this.saveGame();\r\n        super.exit();\r\n    }\r\n\r\n    protected beforeUnload = (event) => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    if (connect4 instanceof NetworkGame) {\r\n        (connect4 as NetworkGame).exit();\r\n    } else {\r\n        (connect4 as SameDeviceGame).exit();\r\n    }\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    let options: GameOptions = {\r\n        canvasId: 'board',\r\n        exitBtnId: 'exitBtn',\r\n        timerId: 'timer',\r\n        playerRedId: 'playerRed',\r\n        playerGreenId: 'playerGreen'\r\n    };\r\n    if (mode === GameMode.Network) {\r\n        connect4 = NetworkGame.getInstance(options);\r\n    } else {\r\n        connect4 = SameDeviceGame.getInstance(options);\r\n    }\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    if (mode === GameMode.Network) {\r\n        (connect4 as NetworkGame).start();\r\n    } else {\r\n        (connect4 as SameDeviceGame).start();\r\n    }\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","checkDotCount","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","options","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","paintBoard","this","document","getElementById","canvasId","context","getContext","exitBtnId","exitBtn","timerId","timer","Timer","playerRedId","playerGreenId","playerNames","PlayerNameSection","start","printPlayerNames","mode","switchTurn","setGameEvents","set","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","Math","PI","closePath","fill","addEventListener","canvasMousemove","canvasClick","beforeUnload","getColumnFromCursorPosition","position","Position","getCursorPosition","event","round","x","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","winDialog","closeGameAfterWinning","message","alert","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","classList","add","resetValues","onGameEnd","setTimeout","clearRect","removeEventListener","exit","reset","Game","socketMessage","messageData","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","setRunnable","color","getPlayerName","win","isNaN","action","bothPlayersConnected","data","send","endGameDueToInactivity","skipTurn","preventDefault","returnValue","turnCountDownCallback","turnCountDown","Network","getInstance","NetworkGame","instance","defineSocket","Socket","onMessageCallback","close","confirm","Lose","turnCountDownInterval","setInterval","clearInterval","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","playerRed","prompt","playerGreen","waiting","innerText","saveIntoLocalStorage","setItem","setFromLocalStorage","playerName","remove","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SamePC","SameDeviceGame","checkGameData","nextTurn","restoreLastGame","JSON","parse","setSecondsRunningFromLocalStorage","toString","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","playerColor","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}