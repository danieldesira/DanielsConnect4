{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/board-logic.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/constants.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/coin.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/enums/dimensions.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/index.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/models/game-message.js","webpack:///./node_modules/@danieldesira/daniels-connect4-common/lib/player-turn.js","webpack:///./src/lib/authentication.ts","webpack:///./src/lib/changelog.ts","webpack:///./src/lib/config.ts","webpack:///./src/lib/credits.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/dimensions-select.ts","webpack:///./src/lib/enums/dialog-ids.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/instructions.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/settings-dialog.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///./src/main.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardLogic = void 0;\nvar constants_1 = require(\"./constants\");\nvar coin_1 = require(\"./enums/coin\");\nvar dimensions_1 = require(\"./enums/dimensions\");\nvar BoardLogic = /** @class */ (function () {\n    /**\n     * Initialises the board matrix given the board dimensions\n     * @param dim The board dimensions type\n     */\n    function BoardLogic(dim) {\n        var _this = this;\n        this.board = [];\n        /**\n         * Getter for the number of columns\n         * @returns The number of columns\n         */\n        this.getColumns = function () { return _this.columns; };\n        /**\n         * Getter for the number of rows\n         * @returns The number of rows\n         */\n        this.getRows = function () { return _this.rows; };\n        /**\n         * Getter for the board dimensions\n         * @returns The board dimensions\n         */\n        this.getDimensions = function () { return _this.dimensions; };\n        /**\n         * Getter for the board matrix\n         * @returns The board matrix\n         */\n        this.getBoard = function () { return _this.board; };\n        /**\n         * Resets the board matrix retaining the given dimensions\n         */\n        this.resetBoard = function () { return _this.initBoard(); };\n        switch (dim) {\n            case dimensions_1.BoardDimensions.Small:\n                this.columns = constants_1.dimensions.small.columns;\n                this.rows = constants_1.dimensions.small.rows;\n                break;\n            case dimensions_1.BoardDimensions.Medium:\n                this.columns = constants_1.dimensions.medium.columns;\n                this.rows = constants_1.dimensions.medium.rows;\n                break;\n            case dimensions_1.BoardDimensions.Large:\n                this.columns = constants_1.dimensions.large.columns;\n                this.rows = constants_1.dimensions.large.rows;\n                break;\n        }\n        this.dimensions = dim;\n        this.initBoard();\n    }\n    /**\n     * Initialises board matrix\n     */\n    BoardLogic.prototype.initBoard = function () {\n        this.board = new Array(this.columns);\n        for (var col = 0; col < this.columns; col++) {\n            this.board[col] = new Array(this.rows);\n            for (var row = 0; row < this.rows; row++) {\n                this.board[col][row] = coin_1.Coin.Empty;\n            }\n        }\n    };\n    /**\n     * Counts and checks the coin placeholders adjacent to the specified point (column x row). Matches may occurr,\n     * vertically, horizontally or diagonally.\n     * @param column - The column number of the starting point\n     * @param row - The row number of the starting point\n     * @param currentTurn - Coin color to be checked\n     * @returns Count of adjacent coins with the same color\n     */\n    BoardLogic.prototype.countConsecutiveCoins = function (column, row, currentTurn) {\n        var count = row;\n        var coinCount = 0;\n        // Vertical check\n        while (coinCount < 4 && count < this.rows && this.board[column][count] === currentTurn) {\n            coinCount++;\n            count++;\n        }\n        if (coinCount < 4) {\n            // Horizontal check\n            coinCount = 0;\n            count = column;\n            while (count < this.columns && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count++;\n            }\n            count = column - 1;\n            while (count > -1 && this.board[count][row] === currentTurn) {\n                coinCount++;\n                count--;\n            }\n            // Diagonal checks\n            if (coinCount < 4) {\n                coinCount = 0;\n                var rowCount = row - 1;\n                var colCount = column + 1;\n                while (coinCount < 4 && rowCount > -1 && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount++; //right columns\n                    rowCount--; //upper rows\n                }\n                colCount = column;\n                rowCount = row;\n                while (coinCount < 4 && rowCount < this.rows && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                    coinCount++;\n                    colCount--; // left columns\n                    rowCount++; // lower rows\n                }\n                if (coinCount < 4) {\n                    coinCount = 0;\n                    rowCount = row - 1;\n                    colCount = column - 1;\n                    while (coinCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount--; // left columns\n                        rowCount--; // upper rows\n                    }\n                    colCount = column;\n                    rowCount = row;\n                    while (coinCount < 4 && rowCount < this.rows && colCount < this.columns && this.board[colCount][rowCount] === currentTurn) {\n                        coinCount++;\n                        colCount++; // right columns\n                        rowCount++; // lower rows\n                    }\n                }\n            }\n        }\n        return coinCount;\n    };\n    /**\n     * Checks if the board matrix is full\n     * @returns True if full, false if not\n     */\n    BoardLogic.prototype.isBoardFull = function () {\n        var full = true;\n        for (var col = 0; col < this.columns; col++) {\n            // Check upper row in every column\n            if (this.board[col][0] === coin_1.Coin.Empty) {\n                full = false;\n                break;\n            }\n        }\n        return full;\n    };\n    /**\n     * Places coin in a specific column\n     * @param color The color of the coin\n     * @param column The specified column number\n     * @returns Row number where the coin was placed. -1 if column is full.\n     */\n    BoardLogic.prototype.putCoin = function (color, column) {\n        for (var row = this.rows - 1; row >= 0; row--) {\n            if (this.board[column][row] === coin_1.Coin.Empty) {\n                this.board[column][row] = color;\n                return row;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Board matrix setter\n     * @param board The new board matrix\n     */\n    BoardLogic.prototype.setBoard = function (board) {\n        this.board = board;\n    };\n    /**\n     * Sets a single board matrix item, at the specified row and column\n     * @param coin The coin color\n     * @param col The column number\n     * @param row The row number\n     */\n    BoardLogic.prototype.setBoardItem = function (coin, col, row) {\n        this.board[col][row] = coin;\n    };\n    return BoardLogic;\n}());\nexports.BoardLogic = BoardLogic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dimensions = exports.skipTurnMaxWait = void 0;\n/**\n * @constant {number} skipTurnMaxWait - The maximum number of seconds that are allowed before skipping turn.\n */\nexports.skipTurnMaxWait = 60;\n/**\n * @constant dimensions - The column & row board dimensions available.\n */\nexports.dimensions = {\n    small: {\n        columns: 6,\n        rows: 5\n    },\n    medium: {\n        columns: 7,\n        rows: 6\n    },\n    large: {\n        columns: 9,\n        rows: 8\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Coin = void 0;\nvar Coin;\n(function (Coin) {\n    Coin[Coin[\"Empty\"] = 0] = \"Empty\";\n    Coin[Coin[\"Red\"] = 1] = \"Red\";\n    Coin[Coin[\"Green\"] = 2] = \"Green\";\n    Coin[Coin[\"Pink\"] = 3] = \"Pink\";\n    Coin[Coin[\"Purple\"] = 4] = \"Purple\";\n    Coin[Coin[\"Gold\"] = 5] = \"Gold\";\n    Coin[Coin[\"Black\"] = 6] = \"Black\";\n})(Coin || (exports.Coin = Coin = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = void 0;\nvar BoardDimensions;\n(function (BoardDimensions) {\n    BoardDimensions[BoardDimensions[\"Small\"] = 1] = \"Small\";\n    BoardDimensions[BoardDimensions[\"Medium\"] = 2] = \"Medium\";\n    BoardDimensions[BoardDimensions[\"Large\"] = 3] = \"Large\";\n})(BoardDimensions || (exports.BoardDimensions = BoardDimensions = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BoardDimensions = exports.dimensions = exports.skipTurnMaxWait = exports.switchTurn = exports.randomiseTurn = exports.GameMessage = exports.Coin = exports.default = void 0;\nvar board_logic_1 = require(\"./board-logic\");\nObject.defineProperty(exports, \"default\", { enumerable: true, get: function () { return board_logic_1.BoardLogic; } });\nvar coin_1 = require(\"./enums/coin\");\nObject.defineProperty(exports, \"Coin\", { enumerable: true, get: function () { return coin_1.Coin; } });\nvar game_message_1 = require(\"./models/game-message\");\nObject.defineProperty(exports, \"GameMessage\", { enumerable: true, get: function () { return game_message_1.GameMessage; } });\nvar player_turn_1 = require(\"./player-turn\");\nObject.defineProperty(exports, \"randomiseTurn\", { enumerable: true, get: function () { return player_turn_1.randomiseTurn; } });\nObject.defineProperty(exports, \"switchTurn\", { enumerable: true, get: function () { return player_turn_1.switchTurn; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"skipTurnMaxWait\", { enumerable: true, get: function () { return constants_1.skipTurnMaxWait; } });\nObject.defineProperty(exports, \"dimensions\", { enumerable: true, get: function () { return constants_1.dimensions; } });\nvar dimensions_1 = require(\"./enums/dimensions\");\nObject.defineProperty(exports, \"BoardDimensions\", { enumerable: true, get: function () { return dimensions_1.BoardDimensions; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameMessage = void 0;\nvar GameMessage = /** @class */ (function () {\n    function GameMessage() {\n    }\n    /**\n     * Tests if message is an initial message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is initial\n     * @public\n     * @static\n     */\n    GameMessage.isInitialMessage = function (msg) {\n        return (!isNaN(msg['gameId']) && msg['color'] && msg['dimensions'] && msg['playerName'])\n            || msg['opponentName'];\n    };\n    /**\n     * Tests if message is an inactivity message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents inactivity\n     * @public\n     * @static\n     */\n    GameMessage.isInactivityMessage = function (msg) {\n        return msg['endGameDueToInactivity'] && msg['currentTurn'];\n    };\n    /**\n     * Tests if message is an action message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents an action\n     * @public\n     * @static\n     */\n    GameMessage.isActionMessage = function (msg) {\n        return msg['action'] && !isNaN(msg['column']) && msg['color'];\n    };\n    /**\n     * Tests if message is a winner message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents win\n     * @public\n     * @static\n     */\n    GameMessage.isWinnerMessage = function (msg) {\n        return msg['winner'];\n    };\n    /**\n     * Tests if message is a tie message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents tie\n     * @public\n     * @static\n     */\n    GameMessage.isTieMessage = function (msg) {\n        return msg['tie'];\n    };\n    /**\n     * Tests if message is a current turn message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represents current turn\n     * @public\n     * @static\n     */\n    GameMessage.isCurrentTurnMessage = function (msg) {\n        return msg['currentTurn'];\n    };\n    /**\n     * Tests if message is a disconnect message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message represent a disconnection\n     * @public\n     * @static\n     */\n    GameMessage.isDisconnectMessage = function (msg) {\n        return msg['hardDisconnect'];\n    };\n    /**\n     * Tests if message is an error message\n     * @param {*} msg - Object to check\n     * @returns {boolean} Whether message is an error\n     * @public\n     * @static\n     */\n    GameMessage.isErrorMessage = function (msg) {\n        return msg['error'];\n    };\n    return GameMessage;\n}());\nexports.GameMessage = GameMessage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.switchTurn = exports.randomiseTurn = void 0;\n/**\n * Randomises player number\n * @returns {number} Random player number (1 or 2)\n */\nfunction randomiseTurn() {\n    return Math.floor(Math.random() * 2) + 1;\n}\nexports.randomiseTurn = randomiseTurn;\n/**\n * Switches turn depending on input\n * @param {number} currentTurn - The current player number (1 or 2)\n * @returns {number} The opposing player number (1 -> 2 or 2 -> 1)\n */\nfunction switchTurn(currentTurn) {\n    return currentTurn === 1 ? 2 : 1;\n}\nexports.switchTurn = switchTurn;\n","import { BoardDimensions, PlayerInfo, PlayerSettings, PlayerStats } from \"@danieldesira/daniels-connect4-common\";\r\nimport config from \"./config\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        google: any;\r\n    }\r\n}\r\n\r\nexport async function handleGoogleSignon(response: any) {\r\n    const {credential} = response;\r\n    storeGoogleToken(credential);\r\n}\r\n\r\nfunction storeGoogleToken(token: string) {\r\n    const data = {\r\n        token,\r\n        service: 'google'\r\n    } as AuthenticationModel;\r\n    localStorage.setItem('auth', JSON.stringify(data));\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('auth');\r\n}\r\n\r\nexport function getToken(): AuthenticationModel | null {\r\n    const val = localStorage.getItem('auth');\r\n    return val ? JSON.parse(val) as AuthenticationModel : null;\r\n}\r\n\r\nexport async function getUserData() {\r\n    return await authGet(`${config.httpServer}/auth`) as PlayerInfo;\r\n}\r\n\r\nexport async function loadStats() {\r\n    const stats = await authGet(`${config.httpServer}/stats`) as PlayerStats;\r\n    if (stats) {\r\n        Dialog.notify({\r\n            id: DialogIds.PlayerStats,\r\n            title: 'Stats',\r\n            text: [\r\n                    `Wins: ${stats.wins} - ${stats.winPercent.toFixed(2)}%`,\r\n                    `Losses: ${stats.losses} - ${stats.lossPercent.toFixed(2)}%`\r\n                ]\r\n        });\r\n    }\r\n}\r\n\r\nexport function initGoogleSSO(showLoginLogout: Function) {\r\n    window.google.accounts.id.initialize({\r\n        client_id: '966331594657-sjtp3m7ooigjma726j7aa4kcf5qdu2v7.apps.googleusercontent.com',\r\n        callback: (response: any) => {\r\n            handleGoogleSignon(response);\r\n            showLoginLogout();\r\n        }\r\n    });\r\n    window.google.accounts.id.prompt();\r\n}\r\n\r\nexport function renderGoogleBtn(containerId: string) {\r\n    const container = document.getElementById(containerId);\r\n    window?.google?.accounts?.id?.renderButton(container, {\r\n        type: 'standard',\r\n        theme: 'outline',\r\n        size: 'large'\r\n    });\r\n}\r\n\r\nexport async function updateSettings(dimensions: BoardDimensions) {\r\n    try {\r\n        const params = {\r\n            dimensions\r\n        };\r\n        await authPost(`${config.httpServer}/settings`, params);\r\n    } catch {\r\n        Dialog.notify({\r\n            title: 'Settings',\r\n            text: ['Error saving settings!'],\r\n            id: DialogIds.ServerError\r\n        });\r\n    }\r\n}\r\n\r\nexport async function getSettings(): Promise<PlayerSettings> {\r\n    return await authGet(`${config.httpServer}/settings`);\r\n}\r\n\r\nasync function authGet(url: string): Promise<any> {\r\n    const auth = getToken();\r\n    if (auth) {\r\n        const {token, service} = auth;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Authorization': token,\r\n                'Service': service\r\n            }\r\n        });\r\n        const data = (res.status >= 200 && res.status < 300 ? await res.json() : null);\r\n        return data;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function authPost(url: string, data: any) {\r\n    const {token, service} = getToken();\r\n    const res = await fetch(url, {\r\n        method: 'post',\r\n        headers: {\r\n            'Authorization': token,\r\n            'Service': service,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n    if (res.status < 200 || res.status >= 300) {\r\n        throw `HTTP Status Code ${res.status}`;\r\n    }\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function openChangelog() {\r\n    Dialog.changelog({\r\n        id: DialogIds.Changelog,\r\n        title: 'Daniel`s Connect4 Version History',\r\n        text: [],\r\n        releases: [\r\n            {\r\n                version: '0.3.7',\r\n                status: 'Beta',\r\n                dateTime: '',\r\n                points: [\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Upgraded Common library to 0.2',\r\n                            'Minor code cleanup'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Dialogs:',\r\n                        subPoints: [\r\n                            'Fixed regression in dialog inputs making text visible again',\r\n                            'Credits as dialog',\r\n                            'Menu dialog replacing the slider',\r\n                            'Adapted button colors for dark mode',\r\n                            'Changelog dialog'\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.6.1',\r\n                status: 'Beta',\r\n                dateTime: '08/10/2023 0:30AM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Applied quick fix for credits and changelog pages in dark mode',\r\n                        subPoints: []\r\n                    },\r\n                    {\r\n                        text: 'Changed dialog text color to white',\r\n                        subPoints: []\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.6',\r\n                status: 'Beta',\r\n                dateTime: '07/10/2023 4:30PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Installed Concurrently and combined Webpack and Serve scripts',\r\n                            'Code cleanup'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'UI:',\r\n                        subPoints: [\r\n                            'Changed main menu text color to darkblue',\r\n                            'Moved version number to button of screen',\r\n                            'Smaller menu buttons',\r\n                            'Experimental dark mode support'\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.5',\r\n                status: 'Beta',\r\n                dateTime: '03/10/2023 5:30PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Multiple dimensions',\r\n                        subPoints: []\r\n                    },\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Code cleanup',\r\n                            'Send token in request header'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'UI:',\r\n                        subPoints: [\r\n                            'Consistent look and feel across browsers and transperant borders for buttons',\r\n                            'Included favicon in changelog and credits pages',\r\n                            'Player stats show in a dialog',\r\n                            'Centered inputs in dialogs',\r\n                            'Timer and countdown placeholders differentiated to prevent programmatic \"confusion\"'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Logout if Google token is no longer valid',\r\n                        subPoints: []\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.4',\r\n                status: 'Beta',\r\n                dateTime: '05/08/2023 11:00PM Malta time',\r\n                points: [\r\n                    {\r\n                        text: 'Google SSO:',\r\n                        subPoints: [\r\n                            'Solve JS error that at times prevented SSO popup to launch',\r\n                            'Enable logout button in case of WebSocket connection failure',\r\n                            'Retain authentication across page refreshes and browser tabs'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Internal: Cleanup localStorage management',\r\n                        subPoints: []\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.3',\r\n                status: 'Beta',\r\n                dateTime: '05/08/2023',\r\n                points: [\r\n                    {\r\n                        text: '(Responsive) UI:',\r\n                        subPoints: [\r\n                            'Solve zoomed in canvas on Chrome for Android',\r\n                            'Responsive dialog inputs',\r\n                            'Centered dialog titles',\r\n                            'Swapped error div for dialogs',\r\n                            'Added favicon'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Internal:',\r\n                        subPoints: [\r\n                            'Installed and configured a micro-web server for dev environment',\r\n                            'Removed redundant \"build\" script',\r\n                            'New \"config\" file to store environment URLs',\r\n                            'Removed \"css-loader\" and \"style-loader\" from dev dependencies'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Introduced Google signon button which is now required for network play',\r\n                        subPoints: []\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                version: '0.3.2',\r\n                status: 'Beta',\r\n                dateTime: '23/07/2023',\r\n                points: [\r\n                    {\r\n                        text: 'Dialogs:',\r\n                        subPoints: [\r\n                            'Refactored library to accept only one options parameter for all public methods',\r\n                            'Solved the \"form not connected\" console warning on Chromium-based browsers',\r\n                            'Added title parameter to options',\r\n                            'Notifications are closed when \"Escape\" or \"Enter\" keys are pressed'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Game controls:',\r\n                        subPoints: [\r\n                            'Fixed minor issue with keybindings: limit was set 10, now taken from \"BoardLogic.columns\"',\r\n                            'Touchscreen moves to act like mouse moves'\r\n                        ]\r\n                    },\r\n                    {\r\n                        text: 'Credits link turned black',\r\n                        subPoints: []\r\n                    },\r\n                    {\r\n                        text: 'Error messages for Share icon',\r\n                        subPoints: []\r\n                    },\r\n                    {\r\n                        text: 'Updated game instructions and fixed the random line breaks',\r\n                        subPoints: []\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    });\r\n}","import Utils from \"./utils\";\r\n\r\nconst config = Utils.isLocal() ? {\r\n    httpServer: 'http://localhost:3000',\r\n    wsServer: 'ws://localhost:3000'\r\n} : {\r\n    httpServer: 'https://daniels-connect4-server.adaptable.app',\r\n    wsServer: 'wss://daniels-connect4-server.adaptable.app'\r\n};\r\n\r\nexport default config;","import CreditsDialogOptions from \"./dialog/options/credits-dialog-options\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function openCredits() {\r\n    const options: CreditsDialogOptions = {\r\n        id: DialogIds.Credits,\r\n        title: 'Contributors',\r\n        text: [],\r\n        sections: [\r\n            {\r\n                title: 'Development',\r\n                contributors: ['Daniel Desira']\r\n            },\r\n            {\r\n                title: 'Code Review',\r\n                contributors: ['Sergiu Nimat']\r\n            },\r\n            {\r\n                title: 'UI/UX Advice',\r\n                contributors: ['Pierre Borġ', 'Martina Sultana', 'Jorge Montalbán', 'Abigail Magro']\r\n            },\r\n            {\r\n                title: 'Testing',\r\n                contributors: ['George Zaharia']\r\n            }\r\n        ]\r\n    };\r\n    Dialog.credit(options);\r\n}","import ConfirmationDialogOptions from \"./options/confirmation-dialog-options\";\r\nimport CreditsDialogOptions from \"./options/credits-dialog-options\";\r\nimport DialogOptions from \"./options/dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport MenuDialogOptions from \"./options/menu-dialog-options\";\r\nimport PromptDialogOptions from \"./options/prompt-dialog-options\";\r\nimport PromptInput, { PromptSelect } from \"./options/prompt-input\";\r\nimport ChangelogDialogOptions from \"./options/changelog-dialog-options\";\r\n\r\nexport default class Dialog {\r\n    \r\n    private static modal(type: DialogType, options: DialogOptions) {\r\n        if (!document.getElementById(options.id)) {\r\n            const modal = document.createElement('div') as HTMLDivElement;\r\n            modal.tabIndex = 1;\r\n            modal.id = options.id;\r\n            modal.classList.add('dialog');\r\n\r\n            if (options.title) {\r\n                const h1 = document.createElement('h1') as HTMLHeadingElement;\r\n                h1.innerText = options.title;\r\n                h1.classList.add('dialog-title');\r\n                modal.appendChild(h1);\r\n                modal.appendChild(document.createElement('hr'));\r\n            }\r\n\r\n            const textContainer = document.createElement('div') as HTMLDivElement;\r\n            this.appendText(options.text, textContainer);\r\n            modal.appendChild(textContainer);\r\n\r\n            switch (type) {\r\n                case DialogType.Confirmation: {\r\n                    const o = options as ConfirmationDialogOptions;\r\n                    const btnContainer = document.createElement('div') as HTMLDivElement;\r\n                    btnContainer.classList.add('dialog-btn-container');\r\n                    modal.appendChild(btnContainer);\r\n\r\n                    this.appendBtn(btnContainer, 'Yes', () => {\r\n                        o.yesCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.yesColor, 'button');\r\n                    this.appendBtn(btnContainer, 'No', () => {\r\n                        o.noCallback();\r\n                        this.closeModal(modal);\r\n                    }, o.noColor, 'button');\r\n                    break;\r\n                }\r\n                case DialogType.Notification: {\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Prompt: {\r\n                    const o = options as PromptDialogOptions;\r\n                    this.appendForm(modal, o);\r\n                    break;\r\n                }\r\n                case DialogType.Credits: {\r\n                    const o = options as CreditsDialogOptions;\r\n                    this.appendCredits(textContainer, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Menu: {\r\n                    const o = options as MenuDialogOptions;\r\n                    this.appendMenu(modal, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n                case DialogType.Changelog: {\r\n                    const o = options as ChangelogDialogOptions;\r\n                    this.appendChangelog(modal, o);\r\n                    this.appendOKButton(modal);\r\n                    this.listenKeyboard(modal);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            document.body.appendChild(modal);\r\n        }\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement | HTMLFormElement,\r\n                text: string,\r\n                callback: any,\r\n                bgColor: string,\r\n                btnType: 'submit' | 'button' | 'reset') {\r\n        const btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = btnType;\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add(`dialog-btn-${bgColor}`);\r\n        if (btnType === 'button') {\r\n            btn.addEventListener('click', callback);\r\n        }\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendForm(modal: HTMLDivElement, options: PromptDialogOptions) {\r\n        const inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        modal.appendChild(inputContainer);\r\n\r\n        const form = document.createElement('form') as HTMLFormElement;\r\n        inputContainer.appendChild(form);\r\n        form.addEventListener('submit', (event: SubmitEvent) => {\r\n            event.preventDefault();\r\n            if (options.onOK) {\r\n                options.onOK();\r\n            }\r\n            this.closeModal(modal);\r\n        });\r\n\r\n        this.appendInputs(form, options.inputs);\r\n        this.appendSelects(form, options.selects);\r\n\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        form.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', null, 'green', 'submit');\r\n        this.appendBtn(btnContainer, 'Cancel', () => {\r\n            if (options.onCancel) {\r\n                options.onCancel();\r\n            }\r\n            this.closeModal(modal);\r\n        }, 'red', 'button');\r\n    }\r\n\r\n    private static appendInputs(form: HTMLFormElement, inputs: Array<PromptInput>) {\r\n        for (const i of inputs) {\r\n            const input = document.createElement('input');\r\n            input.type = i.type;\r\n            input.id = `dialog-input-${i.name}`;\r\n            input.name = `dialog-input-${i.name}`;\r\n            input.ariaPlaceholder = `Enter ${i.label}`;\r\n            input.placeholder = `Enter ${i.label}`;\r\n            input.maxLength = i.limit;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            input.required = i.required;\r\n            input.ariaRequired = i.required.toString();\r\n            form.appendChild(input);\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendSelects(form: HTMLFormElement, selects: Array<PromptSelect>) {\r\n        for (const s of selects) {\r\n            const select = document.createElement('select');\r\n            select.id = `dialog-select-${s.name}`;\r\n            select.name = `dialog-select-${s.name}`;\r\n            select.ariaPlaceholder = s.label;\r\n            select.classList.add('dialog-input');\r\n            select.required = s.required;\r\n            select.ariaRequired = s.required.toString();\r\n            form.appendChild(select);\r\n\r\n            for (const o of s.options) {\r\n                const option = document.createElement('option');\r\n                option.innerText = o.text;\r\n                option.value = o.value;\r\n                if (s.default === parseInt(o.value)) {\r\n                    option.selected = true;\r\n                    option.ariaSelected = \"true\";\r\n                }\r\n                select.appendChild(option);\r\n            }\r\n\r\n            const handleChange = s.onChange;\r\n            if (handleChange) {\r\n                handleChange(select.selectedOptions[0].value);\r\n                select.addEventListener('change', () => handleChange(select.selectedOptions[0].value));\r\n            }\r\n\r\n            this.appendBrElement(form);\r\n            this.appendBrElement(form);\r\n        }\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement | HTMLFormElement) {\r\n        const br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendText(text: Array<string>, container: HTMLDivElement) {\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        for (const t of text) {\r\n            const p = document.createElement('p') as HTMLParagraphElement;\r\n            p.innerText = t;\r\n            container.appendChild(p);\r\n        }\r\n    }\r\n\r\n    private static appendCredits(container: HTMLDivElement, options: CreditsDialogOptions) {\r\n        for (const section of options.sections) {\r\n            const h2 = document.createElement('h2');\r\n            h2.innerText = section.title;\r\n            container.appendChild(h2);\r\n            const ul = document.createElement('ul');\r\n            for (const contributor of section.contributors) {\r\n                const li = document.createElement('li');\r\n                li.innerText = contributor;\r\n                ul.appendChild(li);\r\n            }\r\n            container.appendChild(ul);\r\n        }\r\n    }\r\n\r\n    private static appendOKButton(modal: HTMLDivElement) {\r\n        const btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        modal.appendChild(btnContainer);\r\n\r\n        this.appendBtn(btnContainer, 'OK', () => {\r\n            this.closeModal(modal);\r\n        }, 'green', 'button');\r\n    }\r\n\r\n    private static listenKeyboard(modal: HTMLDivElement) {\r\n        modal.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape' || event.key === 'Enter') {\r\n                this.closeModal(modal);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static appendMenu(modal: HTMLDivElement, options: MenuDialogOptions) {\r\n        const container = document.createElement('div');\r\n        container.classList.add('dialog-menu-container');\r\n        modal.appendChild(container);\r\n        for (const b of options.buttons) {\r\n            const button = document.createElement('button');\r\n            button.type = 'button';\r\n            button.innerText = b.text;\r\n            button.classList.add('dialog-btn');\r\n            button.classList.add(`dialog-btn-${b.color}`);\r\n            button.classList.add('text');\r\n            button.addEventListener('click', b.callback);\r\n            container.appendChild(button);\r\n        }\r\n    }\r\n\r\n    private static appendChangelog(modal: HTMLDivElement, options: ChangelogDialogOptions) {\r\n        const container = document.createElement('div');\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        modal.appendChild(container);\r\n        for (const release of options.releases) {\r\n            const h2 = document.createElement('h2');\r\n            h2.innerText = `${release.version} (${release.status} release - ${release.dateTime})`;\r\n            container.appendChild(h2);\r\n            const ul = document.createElement('ul');\r\n            container.appendChild(ul);\r\n            for (const point of release.points) {\r\n                const outerLi = document.createElement('li');\r\n                outerLi.innerText = point.text;\r\n                ul.appendChild(outerLi);\r\n                if (point.subPoints.length > 0) {\r\n                    const ol = document.createElement('ol');\r\n                    outerLi.appendChild(ol);\r\n                    for (const subPoint of point.subPoints) {\r\n                        const innerLi = document.createElement('li');\r\n                        innerLi.innerText = subPoint;\r\n                        ol.appendChild(innerLi);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        if (document.body.contains(modal)) {\r\n            document.body.removeChild(modal);\r\n        }\r\n    }\r\n\r\n    public static confirm(options: ConfirmationDialogOptions) {\r\n        Dialog.modal(DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(options: DialogOptions) {\r\n        Dialog.modal(DialogType.Notification, options);\r\n    }\r\n\r\n    public static prompt(options: PromptDialogOptions) {\r\n        Dialog.modal(DialogType.Prompt, options);\r\n    }\r\n\r\n    public static credit(options: CreditsDialogOptions) {\r\n        Dialog.modal(DialogType.Credits, options);\r\n    }\r\n\r\n    public static menu(options: MenuDialogOptions) {\r\n        Dialog.modal(DialogType.Menu, options);\r\n    }\r\n\r\n    public static changelog(options: ChangelogDialogOptions) {\r\n        Dialog.modal(DialogType.Changelog, options);\r\n    }\r\n\r\n    public static closeAllOpenDialogs() {\r\n        const dialogs = document.getElementsByClassName('dialog') as HTMLCollectionOf<HTMLDivElement>;\r\n        for (let i: number = 0; i < dialogs.length; i++) {\r\n            this.closeModal(dialogs[i]);\r\n        }\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2,\r\n    Credits = 3,\r\n    Menu = 4,\r\n    Changelog = 5\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport { PromptSelect } from \"./dialog/options/prompt-input\";\r\n\r\nconst dimensionsSelectData: PromptSelect = {\r\n    name: 'dimensions',\r\n    label: 'Dimensions',\r\n    required: true,\r\n    options: [\r\n        {\r\n            text: 'Small (6x5)',\r\n            value: BoardDimensions.Small.toString()\r\n        },\r\n        {\r\n            text: 'Medium (7x6)',\r\n            value: BoardDimensions.Medium.toString()\r\n        },\r\n        {\r\n            text: 'Large (9x8)',\r\n            value: BoardDimensions.Large.toString()\r\n        }\r\n    ],\r\n    default: 3,\r\n    onChange: () => {}\r\n};\r\n\r\nexport default dimensionsSelectData;","export enum DialogIds {\r\n    PlayerNames = 'player-input-dialog',\r\n    ServerError = 'server-error-dialog',\r\n    Instructions = 'instructions-dialog',\r\n    GameEnd = 'game-end-dialog',\r\n    ExitGame = 'exit-game-dialog',\r\n    ContinueGame = 'continue-game-dialog',\r\n    Saved = 'saved-notification-dialog',\r\n    PlayerStats = 'player-stats-dialog',\r\n    Settings = 'settings-dialog',\r\n    Credits = 'credits-dialog',\r\n    AccountMenu = 'account-menu-dialog',\r\n    LogoutDisabled = 'logout-disabled-dialog',\r\n    Changelog = 'changelog-dialog'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandCoin = './sounds/land-coin.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import Position from './position';\r\nimport PlayerNameSection from './player-name-section';\r\nimport GameOptions from './game-options';\r\nimport BoardLogic, { Coin, switchTurn } from '@danieldesira/daniels-connect4-common';\r\n\r\nexport default abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    protected context: CanvasRenderingContext2D;\r\n    protected board: BoardLogic;\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNameSection: PlayerNameSection;\r\n    private gameIndicatorsContainer: HTMLDivElement;\r\n    private gameMenu: HTMLDivElement;\r\n    protected timerSpan: HTMLSpanElement;\r\n    protected countdownSpan: HTMLSpanElement;\r\n\r\n    protected turn: Coin = Coin.Red;\r\n\r\n    private coinRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected currentCoinColumn: number = 4;\r\n    protected static moveLeftKeys: Array<string> = ['a', 'A', 'ArrowLeft'];\r\n    protected static moveRightKeys: Array<string> = ['d', 'D', 'ArrowRight'];\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNameSection = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n\r\n        if (options.gameIndicatorsId) {\r\n            this.gameIndicatorsContainer = document.getElementById(options.gameIndicatorsId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.menuId) {\r\n            this.gameMenu = document.getElementById(options.menuId) as HTMLDivElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timerSpan = document.getElementById(options.timerId) as HTMLSpanElement;\r\n        }\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        this.showGame();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.initPlayerNames();\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        const boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = this.board.getColumns() - 1; col >= 0; col--) {\r\n            for (let row = this.board.getRows() - 1; row >= 0; row--) {\r\n                this.context.fillStyle = Game.getColor(this.board.getBoard()[col][row]);\r\n                this.drawCoin(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.addEventListener('click', this.exit);\r\n        document.body.addEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.addEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n    protected abstract handleKeyDown(event: KeyboardEvent): void;\r\n    protected abstract canvasTouchmove(event: TouchEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent | Touch): number {\r\n        const position = Position.getCursorPosition(event, this.canvas);\r\n        const column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        this.turn = switchTurn(this.turn);\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveCoin() {\r\n        this.clearUpper();\r\n        this.context.fillStyle = Game.getColor(this.turn);\r\n        this.paintCoinToDrop(this.currentCoinColumn);\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = this.board.putCoin(this.turn, this.currentCoinColumn);\r\n            \r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.drawCoin(this.currentCoinColumn, row);\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected abstract showWinDialog(winner: string, currentTurn: Coin);\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            this.resetValues();\r\n            this.hideGame();\r\n\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.clear();\r\n            }\r\n        }, 3000);\r\n    }\r\n\r\n    protected paintCoinToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.coinRadius, this.coinRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.removeEventListener('click', this.exit);\r\n        document.body.removeEventListener('keydown', this.handleKeyDown);\r\n        this.canvas.removeEventListener('touchmove', this.canvasTouchmove);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.hideGame();\r\n        this.resetValues();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n    }\r\n\r\n    protected resizeCanvas = () => {\r\n        const topHeight = 100;\r\n\r\n        this.canvas.height = window.innerHeight - topHeight;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.coinRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.coinRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.board) {\r\n            this.colGap = this.canvas.width / this.board.getColumns();\r\n            this.rowGap = (this.canvas.height - topHeight) / this.board.getRows();\r\n            this.colOffset = this.colGap / 2;\r\n            this.paintBoard();\r\n        }\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Coin.Red;\r\n        this.board.resetBoard();\r\n        \r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.reset();\r\n        }\r\n    }\r\n\r\n    private drawCoin(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.coinRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNameSection && this.playerNameSection.areBothPlayersConnected();\r\n    }\r\n\r\n    private showGame() {\r\n        this.canvas.classList.remove('hide');\r\n        this.exitBtn.classList.remove('hide');\r\n        this.gameIndicatorsContainer.classList.remove('hide');\r\n        this.gameMenu.classList.add('hide');\r\n    }\r\n\r\n    private hideGame() {\r\n        this.canvas.classList.add('hide');\r\n        this.exitBtn.classList.add('hide');\r\n        this.gameIndicatorsContainer.classList.add('hide');\r\n        this.gameMenu.classList.remove('hide');\r\n    }\r\n\r\n    protected static getColor(color: Coin): string {\r\n        let value: string = '';\r\n        switch (color) {\r\n            case Coin.Empty:\r\n                value = 'lightyellow';\r\n                break;\r\n            case Coin.Red:\r\n                value = 'red';\r\n                break;\r\n            case Coin.Green:\r\n                value = 'greenyellow';\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default function showInstructions() {\r\n    const text = [\r\n        'The principle behind Connect4 is simple:',\r\n        'The player who first places 4 coins next to each other, wins. You may ' +\r\n            'match horizontally, vertically or diagonally.',\r\n        'Furthermore, in Network Play, you must place your coin within 60 seconds. ' +\r\n            'If you fail to do so, you pass the turn to your opponent.',\r\n        'Further note that exiting in Same Device Play, saves game progress. You ' +\r\n            'will be presented with the option to continue the same game the next ' +\r\n            'time. This does not work for Network Play because your opponent might ' +\r\n            'not be available the next time and you might not even know him/her/them.',\r\n        'Good luck and have fun playing!'\r\n    ];\r\n    Dialog.notify({\r\n        id: DialogIds.Instructions,\r\n        text,\r\n        title: 'Instructions'\r\n    });\r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common/lib/enums/coin\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport Socket from \"./socket\";\r\nimport Utils from \"./utils\";\r\nimport { ActionMessage, BoardDimensions, CurrentTurnMessage, ErrorMessage, GameMessage, InitialMessage, WinnerMessage, skipTurnMaxWait } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport { getToken } from \"./authentication\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\n\r\nexport default class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): NetworkGame {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.board = new BoardLogic(BoardDimensions.Large);\r\n        const auth = getToken();\r\n        if (auth) {\r\n            this.defineSocket(auth);\r\n            this.startCountdown();\r\n            super.start();\r\n            document.body.classList.add('waiting');\r\n            if (this.timerSpan) {\r\n                this.timerSpan.classList.add('hide');\r\n            }\r\n            if (this.countdownSpan) {\r\n                this.countdownSpan.classList.remove('hide');\r\n            }\r\n        } else {\r\n            Dialog.notify({\r\n                title: 'Error',\r\n                text: ['User not logged in!'],\r\n                id: DialogIds.ServerError\r\n            });\r\n        }\r\n    }\r\n\r\n    private defineSocket(auth: AuthenticationModel) {\r\n        this.socket = new Socket(auth);\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n        this.socket.onGameCancel = this.confirmExit;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n            if (this.socket && this.playerNameSection) {\r\n                if (data.opponentName) {\r\n                    this.toggleWaitingClass();\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerGreen(data.opponentName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerRed(data.opponentName);\r\n                    }\r\n                }\r\n    \r\n                if (data.playerName) {\r\n                    if (this.socket.getPlayerColor() === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(data.playerName);\r\n                    } else if (this.socket.getPlayerColor() === Coin.Green) {\r\n                        this.playerNameSection.setPlayerGreen(data.playerName);\r\n                    }\r\n                }\r\n        \r\n                if (data.color) {\r\n                    if (data.color === Coin.Red) {\r\n                        this.playerNameSection.setPlayerRed(this.socket.getPlayerName());\r\n                    } else {\r\n                        this.playerNameSection.setPlayerGreen(this.socket.getPlayerName());\r\n                    }\r\n                }\r\n\r\n                if (data.dimensions) {\r\n                    this.board = new BoardLogic(data.dimensions);\r\n                    this.resizeCanvas();\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isActionMessage(messageData)) {\r\n            const data = messageData as ActionMessage;\r\n            if (data.action === 'mousemove') {\r\n                this.currentCoinColumn = data.column;\r\n                this.moveCoin();\r\n            }\r\n    \r\n            if (data.action === 'click') {\r\n                this.turn = data.color;\r\n                this.currentCoinColumn = data.column;\r\n                this.landCoin();\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.turnCountDown = skipTurnMaxWait;\r\n            this.toggleWaitingClass();\r\n        }\r\n\r\n        if (GameMessage.isWinnerMessage(messageData)) {\r\n            const data = messageData as WinnerMessage;\r\n            let winner: string = null;\r\n            if (this.playerNameSection) {\r\n                if (data.winner === Coin.Red) {\r\n                    winner = `${this.playerNameSection.getPlayerRed()} (Red)`;\r\n                } else {\r\n                    winner = `${this.playerNameSection.getPlayerGreen()} (Green)`;\r\n                }\r\n            }\r\n            this.showWinDialog(winner, data.winner);\r\n\r\n            this.closeGameAfterWinning();\r\n            document.body.classList.remove('waiting');\r\n        }\r\n\r\n        if (GameMessage.isTieMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Game resulted in tie!'],\r\n                title: null\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isCurrentTurnMessage(messageData)) {\r\n            const data = messageData as CurrentTurnMessage;\r\n            this.turn = data.currentTurn;\r\n            this.toggleWaitingClass();\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.indicateTurn(this.turn);\r\n            }\r\n        }\r\n\r\n        if (GameMessage.isDisconnectMessage(messageData)) {\r\n            Dialog.notify({\r\n                id: DialogIds.GameEnd,\r\n                text: ['Your opponent disconnected. You win!'],\r\n                title: 'We have a winner!'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n\r\n        if (GameMessage.isErrorMessage(messageData)) {\r\n            const data = messageData as ErrorMessage;\r\n            Dialog.closeAllOpenDialogs();\r\n            Dialog.notify({\r\n                id: DialogIds.ServerError,\r\n                text: [data.error],\r\n                title: 'Error'\r\n            });\r\n            document.body.classList.remove('waiting');\r\n            this.closeGameAfterWinning();\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'click',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n            \r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n\r\n            const data: ActionMessage = {\r\n                column: this.currentCoinColumn,\r\n                action: 'mousemove',\r\n                color: this.turn\r\n            };\r\n            this.socket.send(data);\r\n        }\r\n    };\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            // Assume the game is still going on\r\n            this.switchTurn();\r\n            this.context.fillStyle = Game.getColor(this.turn);\r\n            this.paintCoinToDrop(this.currentCoinColumn);\r\n            Utils.playSound(Sound.LandCoin);\r\n            this.toggleWaitingClass();\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    private toggleWaitingClass() {\r\n        if (this.socket.getPlayerColor() === this.turn) {\r\n            document.body.classList.remove('waiting');\r\n        } else {\r\n            document.body.classList.add('waiting');\r\n        }\r\n    }\r\n\r\n    public exit = () => {\r\n        Dialog.confirm({\r\n            id: DialogIds.ExitGame,\r\n            title: null,\r\n            text: ['Network game in progress. Are you sure you want to quit?'],\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {},\r\n            yesColor: 'red',\r\n            noColor: 'green'\r\n        });\r\n    };\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n        Dialog.closeAllOpenDialogs();\r\n        document.body.classList.remove('waiting');\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected showWinDialog(winner: string, currentTurn: Coin) {\r\n        const winMsg: Array<string> = [];\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.socket && this.socket.getPlayerColor() === currentTurn) {\r\n            winMsg.push('You win!');\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg.push('You lose!');\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'Game Ends'\r\n        });\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n    };\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > skipTurnMaxWait / 2) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = skipTurnMaxWait;\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let data: GameMessage;\r\n\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n\r\n                    data = {\r\n                        column: this.currentCoinColumn,\r\n                        action: 'mousemove',\r\n                        color: this.turn\r\n                    };\r\n                    this.socket.send(data);\r\n\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                data = {\r\n                    column: this.currentCoinColumn,\r\n                    action: 'click',\r\n                    color: this.turn\r\n                };\r\n                this.socket.send(data);\r\n\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n    \r\n}","import { Coin } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public initPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan && !this.playerGreen) {\r\n            this.playerGreenSpan.innerText = waiting;\r\n        }\r\n        if (this.playerRedSpan && !this.playerRed) {\r\n            this.playerRedSpan.innerText = waiting;\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed = (): string => this.playerRed;\r\n    public getPlayerGreen = (): string => this.playerGreen;\r\n    public areBothPlayersConnected = (): boolean => !!this.playerRed && !!this.playerGreen;\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Coin) {\r\n        if (turn === Coin.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export default class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event: MouseEvent | Touch, canvas: HTMLCanvasElement): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        } else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import Dialog from \"./dialog/dialog\";\r\nimport Game from \"./game\";\r\nimport GameOptions from \"./game-options\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport Utils from \"./utils\";\r\nimport Timer from \"./timer\";\r\nimport { BoardDimensions, Coin, randomiseTurn } from \"@danieldesira/daniels-connect4-common\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport PreviousGameData from \"./models/previous-game-data\";\r\nimport { BoardLogic } from \"@danieldesira/daniels-connect4-common/lib/board-logic\";\r\nimport dimensionsSelectData from \"./dimensions-select\";\r\n\r\nexport default class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n    private timer: Timer;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n        \r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): SameDeviceGame {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    private setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n        if (this.countdownSpan) {\r\n            this.countdownSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        this.setUpPlayerNames();\r\n        \r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n\r\n        const onPromptOK = () => {\r\n            const redInput = document.getElementById('dialog-input-red') as HTMLInputElement;\r\n            const greenInput = document.getElementById('dialog-input-green') as HTMLInputElement;\r\n            if (redInput.value && greenInput.value && redInput.value.trim()\r\n                    && greenInput.value.trim()) {\r\n                this.playerNameSection?.setPlayerRed(redInput.value);\r\n                this.playerNameSection?.setPlayerGreen(greenInput.value);\r\n                this.setTimer();\r\n            }\r\n\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            this.board = new BoardLogic(dimensions);\r\n        };\r\n\r\n        if (!gameData) {\r\n            dimensionsSelectData.onChange = (value: string) => {\r\n                const dimensions = parseInt(value);\r\n                this.board = new BoardLogic(dimensions);\r\n                this.resizeCanvas();\r\n            };\r\n            Dialog.prompt({\r\n                id: DialogIds.PlayerNames,\r\n                title: 'Input Players',\r\n                text: ['Please enter player names! (10 characters or less.)'],\r\n                onOK: () => onPromptOK(),\r\n                onCancel: this.exit,\r\n                inputs: [\r\n                    {\r\n                        label: 'Player Red',\r\n                        name: 'red',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    },\r\n                    {\r\n                        label: 'Player Green',\r\n                        name: 'green',\r\n                        type: 'text',\r\n                        limit: 10,\r\n                        required: true\r\n                    }\r\n                ],\r\n                selects: [dimensionsSelectData]\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkGameData() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        if (gameData) {\r\n            Dialog.confirm({\r\n                id: DialogIds.ContinueGame,\r\n                title: null,\r\n                text: ['Do you want to continue playing the previous game?'],\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame,\r\n                yesColor: 'green',\r\n                noColor: 'red'\r\n            });\r\n        } else {\r\n            this.turn = randomiseTurn();\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        this.clearGameData();\r\n        this.turn = randomiseTurn();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        const gameData = JSON.parse(localStorage.getItem('gameData')) as PreviousGameData;\r\n        \r\n        this.turn = gameData.nextTurn;\r\n        this.board = new BoardLogic(gameData.dimensions);\r\n        this.board.setBoard(gameData.board);\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunning(gameData.secondsRunning);\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setPlayerGreen(gameData.playerGreen);\r\n            this.playerNameSection.setPlayerRed(gameData.playerRed);\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            const gameData: PreviousGameData = {\r\n                nextTurn: this.turn,\r\n                board: this.board.getBoard(),\r\n                secondsRunning: this.timer?.getSecondsRunning(),\r\n                playerRed: this.playerNameSection?.getPlayerRed(),\r\n                playerGreen: this.playerNameSection?.getPlayerGreen(),\r\n                dimensions: this.board.getDimensions()\r\n            };\r\n            localStorage.setItem('gameData', JSON.stringify(gameData));\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(event);\r\n            this.landCoin();\r\n        }\r\n    };\r\n\r\n    protected canvasTouchmove = (event: TouchEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            const firstTouch = event.changedTouches[0];\r\n            this.currentCoinColumn = this.getColumnFromCursorPosition(firstTouch);\r\n            this.moveCoin();\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        this.saveGame();\r\n        Dialog.closeAllOpenDialogs();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.clearGameData();\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected landCoin(): number {\r\n        if (this.board.getBoard()[this.currentCoinColumn][0] === Coin.Empty) {\r\n            const row = super.landCoin();\r\n            \r\n            const coinCount = this.board.countConsecutiveCoins(this.currentCoinColumn, row, this.turn);\r\n\r\n            if (coinCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.turn === Coin.Red) {\r\n                    winner = `${this.playerNameSection?.getPlayerRed()} (Red)`;\r\n                } else if (this.turn === Coin.Green) {\r\n                    winner = `${this.playerNameSection?.getPlayerGreen()} (Green)`;\r\n                }\r\n\r\n                this.showWinDialog(winner, this.turn);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.board.isBoardFull()) {\r\n                const message: string = `${this.playerNameSection?.getPlayerRed()} (Red) and ${this.playerNameSection?.getPlayerGreen()} (Green) are tied!`;\r\n                Dialog.notify({\r\n                    id: DialogIds.GameEnd,\r\n                    title: 'Tie',\r\n                    text: [message]\r\n                });\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = Game.getColor(this.turn);\r\n                this.paintCoinToDrop(this.currentCoinColumn);\r\n                Utils.playSound(Sound.LandCoin);\r\n            }\r\n\r\n            return row;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected showWinDialog(winner: string, _: Coin) {\r\n        const winMsg: Array<string> = new Array();\r\n        winMsg.push(`${winner} wins!`);\r\n        if (this.timer) {\r\n            winMsg.push(`Time taken: ${this.timer.getTimeInStringFormat()}`);\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify({\r\n            id: DialogIds.GameEnd,\r\n            text: winMsg,\r\n            title: 'We have a winner!'\r\n        });\r\n    }\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    protected handleKeyDown = (event: KeyboardEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            if (Game.moveLeftKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn > 0) {\r\n                    this.currentCoinColumn--;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (Game.moveRightKeys.includes(event.key)) {\r\n                if (this.currentCoinColumn < this.board.getColumns() - 1) {\r\n                    this.currentCoinColumn++;\r\n                    this.moveCoin();\r\n                }\r\n            }\r\n    \r\n            if (event.key === ' ') {\r\n                this.landCoin();\r\n            }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n            this.exit();\r\n        }\r\n    };\r\n\r\n    private clearGameData() {\r\n        localStorage.removeItem('gameData');\r\n    }\r\n\r\n}","import { BoardDimensions } from \"@danieldesira/daniels-connect4-common\";\r\nimport { getSettings, updateSettings } from \"./authentication\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport dimensionsSelect from \"./dimensions-select\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\n\r\nexport default async function openSettings() {\r\n    dimensionsSelect.onChange = null;\r\n    const settings = await getSettings();\r\n    dimensionsSelect.default = settings.dimensions;\r\n    Dialog.prompt({\r\n        id: DialogIds.Settings,\r\n        title: 'Settings',\r\n        text: [],\r\n        inputs: [],\r\n        selects: [dimensionsSelect],\r\n        onOK: async () => {\r\n            const dimensionsSelect = document.getElementById('dialog-select-dimensions') as HTMLSelectElement;\r\n            const dimensions = parseInt(dimensionsSelect.value) as BoardDimensions;\r\n            await updateSettings(dimensions);\r\n        },\r\n        onCancel: null\r\n    });\r\n}","import { getToken } from \"./authentication\";\r\nimport config from \"./config\";\r\nimport Dialog from \"./dialog/dialog\";\r\nimport { DialogIds } from \"./enums/dialog-ids\";\r\nimport { AuthenticationModel } from \"./models/authentication-model\";\r\nimport { Coin, GameMessage, InitialMessage } from \"@danieldesira/daniels-connect4-common\";\r\n\r\nexport default class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Coin;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n    public onGameCancel: Function;\r\n\r\n    public constructor(auth: AuthenticationModel) {\r\n        this.connect(auth);\r\n    }\r\n\r\n    private connect(auth: AuthenticationModel) {\r\n        let url: string = `${config.wsServer}?token=${auth.token}&service=${auth.service}`;\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += `&playerColor=${this.playerColor}&gameId=${this.gameId}`;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send = (data: GameMessage) => this.webSocket.send(JSON.stringify(data));\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor = (): Coin => this.playerColor;\r\n    public getPlayerName = (): string => this.playerName;\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        const messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            const data = messageData as InitialMessage;\r\n\r\n            if (!this.gameId) {\r\n                this.gameId = data.gameId;\r\n            }\r\n\r\n            if (!this.playerName) {\r\n                this.playerName = data.playerName;\r\n            }\r\n            \r\n            if (!this.playerColor) {\r\n                this.playerColor = data.color;\r\n            }\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.closeAllOpenDialogs();\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            text: ['Problem connecting to server!'],\r\n            title: 'Error'\r\n        });\r\n\r\n        document.body.classList.remove('waiting');\r\n    };\r\n\r\n    private onClose = () => {\r\n        const auth = getToken();\r\n        if (auth) {\r\n            this.connect(auth);\r\n        }\r\n    };\r\n}","export default class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private interval: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        const minutes: number = Math.floor(this.secondsRunning / 60);\r\n        const seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = `${minutes}:${(seconds < 10 ? '0' : '')}${seconds}`;\r\n        \r\n        if (this.timerSpan.classList.contains('hide')) {\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearInterval(this.interval);\r\n        } else {\r\n            this.interval = window.setInterval(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    \r\n    public setSecondsRunning(secondsRunning: number) {\r\n        this.secondsRunning = secondsRunning;\r\n    }\r\n\r\n    public getSecondsRunning = () => this.secondsRunning;   \r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export default class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        const audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","import { getUserData, initGoogleSSO, loadStats, logout, renderGoogleBtn } from \"./lib/authentication\";\r\nimport Dialog from \"./lib/dialog/dialog\";\r\nimport { DialogIds } from \"./lib/enums/dialog-ids\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\nimport GameOptions from \"./lib/game-options\";\r\nimport NetworkGame from \"./lib/network-game\";\r\nimport SameDeviceGame from \"./lib/same-device-game\";\r\nimport openCredits from \"./lib/credits\";\r\nimport showInstructions from \"./lib/instructions\";\r\nimport openSettings from \"./lib/settings-dialog\";\r\nimport openChangelog from \"./lib/changelog\";\r\n\r\nconst samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nconst networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nconst instructionsBtn = document.getElementById('instructions') as HTMLButtonElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n});\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n});\r\n\r\nfunction initGame(mode: GameMode) {\r\n    try {\r\n        const options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            countdownId: 'countdown',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            menuId: 'menu',\r\n            gameIndicatorsId: 'gameIndicators'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            const connect4 = NetworkGame.getInstance(options);\r\n            connect4.start();\r\n        } else {\r\n            const connect4 = SameDeviceGame.getInstance(options);\r\n            connect4.start();\r\n        }\r\n    } catch (ex) {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem encountered!']\r\n        });\r\n        console.error(ex);\r\n    }\r\n}\r\n\r\ninstructionsBtn.addEventListener('click', showInstructions);\r\n\r\nconst shareBtn = document.getElementById('shareBtn') as HTMLAnchorElement;\r\nshareBtn.addEventListener('click', (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    if (navigator.canShare) {\r\n        const shareData = {\r\n            url: location.href,\r\n            title: `Daniel's Connect4`\r\n        };\r\n        navigator.share(shareData)\r\n            .catch((err) => console.error(`Problem while sharing: ${err}`));\r\n    } else {\r\n        Dialog.notify({\r\n            id: DialogIds.ServerError,\r\n            title: 'Error',\r\n            text: ['Problem opening share menu!']\r\n        });\r\n    }\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n    initGoogleSSO(showLoginLogout);\r\n    renderGoogleBtn('googleSignonContainer');\r\n});\r\n\r\nfunction showLoginLogout() {\r\n    const loginBtns = document.getElementById('login-btns') as HTMLDivElement;\r\n    const loggedInArea = document.getElementById('logged-in') as HTMLDivElement;\r\n    if (localStorage.getItem('auth')) {\r\n        loginBtns.classList.add('hide');\r\n        loggedInArea.classList.remove('hide');\r\n    } else {\r\n        loginBtns.classList.remove('hide');\r\n        loggedInArea.classList.add('hide');\r\n    }\r\n}\r\n\r\nasync function loadUserData() {\r\n    const user = await getUserData();\r\n    if (user) {\r\n        const userName = document.getElementById('authPlayerName');\r\n        userName.innerText = user.user;\r\n        authPlayerPicture.src = user.picUrl;\r\n    } else {\r\n        logout();\r\n        showLoginLogout();\r\n    }\r\n}\r\n\r\nconst creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\ncreditsBtn.addEventListener('click', openCredits);\r\n\r\nconst authPlayerPicture = document.getElementById('authPlayerPicture') as HTMLImageElement;\r\nauthPlayerPicture.addEventListener('click', () => {\r\n    const userText = document.getElementById('authPlayerName');\r\n    Dialog.menu({\r\n        id: DialogIds.AccountMenu,\r\n        title: userText.innerText,\r\n        text: [],\r\n        buttons: [\r\n            {\r\n                text: 'Load Stats',\r\n                callback: async () => await loadStats(),\r\n                color: 'green'\r\n            },\r\n            {\r\n                text: 'Settings',\r\n                callback: openSettings,\r\n                color: 'green'\r\n            },\r\n            {\r\n                text: 'Logout',\r\n                callback: () => {\r\n                    const canvas = document.getElementById('board');\r\n                    const countdown = document.getElementById('countdown');\r\n                    if (canvas.classList.contains('hide') || countdown.classList.contains('hide')) {\r\n                        logout();\r\n                        showLoginLogout();\r\n                        Dialog.closeAllOpenDialogs();\r\n                    } else {\r\n                        Dialog.notify({\r\n                            id: DialogIds.LogoutDisabled,\r\n                            title: 'Logout Disabled',\r\n                            text: ['You may not logout while Network Game is in progress.']\r\n                        });\r\n                    }\r\n                },\r\n                color: 'red'\r\n            }\r\n        ]\r\n    });\r\n});\r\n\r\n(async () => {\r\n    showLoginLogout();\r\n    await loadUserData();openChangelog();\r\n})();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["Object","defineProperty","exports","value","BoardLogic","constants_1","coin_1","dimensions_1","dim","_this","this","board","getColumns","columns","getRows","rows","getDimensions","dimensions","getBoard","resetBoard","initBoard","BoardDimensions","Small","small","Medium","medium","Large","large","prototype","Array","col","row","Coin","Empty","countConsecutiveCoins","column","currentTurn","count","coinCount","rowCount","colCount","isBoardFull","full","putCoin","color","setBoard","setBoardItem","coin","skipTurnMaxWait","switchTurn","randomiseTurn","GameMessage","board_logic_1","enumerable","get","game_message_1","player_turn_1","isInitialMessage","msg","isNaN","isInactivityMessage","isActionMessage","isWinnerMessage","isTieMessage","isCurrentTurnMessage","isDisconnectMessage","isErrorMessage","Math","floor","random","handleGoogleSignon","response","data","token","service","localStorage","setItem","JSON","stringify","getToken","val","getItem","parse","authGet","url","auth","fetch","headers","res","status","json","authPost","method","body","removeItem","httpServer","stats","notify","id","DialogIds","PlayerStats","title","text","wins","winPercent","toFixed","losses","lossPercent","showLoginLogout","window","google","accounts","initialize","client_id","callback","prompt","containerId","container","document","getElementById","renderButton","type","theme","size","params","ServerError","changelog","Changelog","releases","version","dateTime","points","subPoints","config","isLocal","wsServer","options","Credits","sections","contributors","credit","modal","createElement","tabIndex","classList","add","h1","innerText","appendChild","textContainer","appendText","DialogType","Confirmation","btnContainer","appendBtn","yesCallback","closeModal","yesColor","noCallback","noColor","Notification","appendOKButton","listenKeyboard","Prompt","o","appendForm","appendCredits","Menu","appendMenu","appendChangelog","bgColor","btnType","btn","addEventListener","inputContainer","form","event","preventDefault","onOK","appendInputs","inputs","appendSelects","selects","onCancel","i","input","name","ariaPlaceholder","label","placeholder","maxLength","limit","required","ariaRequired","toString","appendBrElement","s","select","option","default","parseInt","selected","ariaSelected","handleChange","onChange","selectedOptions","br","t","p","section","h2","ul","contributor","li","key","buttons","b","button","release","point","outerLi","length","ol","subPoint","innerLi","contains","removeChild","confirm","Dialog","menu","closeAllOpenDialogs","dialogs","getElementsByClassName","dimensionsSelectData","GameMode","Sound","turn","Red","currentCoinColumn","resizeCanvas","canvas","height","innerHeight","width","innerWidth","coinRadius","colGap","rowGap","colOffset","paintBoard","canvasId","context","getContext","exitBtnId","exitBtn","playerRedId","playerGreenId","playerNameSection","gameIndicatorsId","gameIndicatorsContainer","menuId","gameMenu","timerId","timerSpan","countdownId","countdownSpan","start","showGame","initPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","getColor","drawCoin","canvasMousemove","canvasClick","beforeUnload","exit","handleKeyDown","canvasTouchmove","getColumnFromCursorPosition","position","getCursorPosition","round","x","moveCoin","clearUpper","paintCoinToDrop","landCoin","closeGameAfterWinning","cleanUpEvents","setTimeout","resetValues","hideGame","clear","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","reset","areBothPlayersConnected","remove","Green","moveLeftKeys","moveRightKeys","Instructions","onSocketMessage","messageData","socket","opponentName","toggleWaitingClass","getPlayerColor","setPlayerGreen","setPlayerRed","playerName","getPlayerName","action","turnCountDown","winner","getPlayerRed","getPlayerGreen","showWinDialog","GameEnd","error","onSocketError","send","firstTouch","changedTouches","ExitGame","confirmExit","close","returnValue","turnCountDownCallback","adaptCountDownColor","includes","getInstance","NetworkGame","instance","defineSocket","startCountdown","onMessageCallback","onErrorCallback","onGameCancel","stopCountdown","playSound","LandCoin","winMsg","push","Win","Lose","resetCountdown","turnCountDownInterval","setInterval","clearInterval","playerRed","playerGreen","playerRedSpan","playerGreenSpan","waiting","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","Position","offsetLeft","offsetTop","setTimer","timer","set","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","clearGameData","saveGame","stop","pageVisibilityChange","pauseWhenDocumentHidden","SameDeviceGame","checkGameData","setUpPlayerNames","PlayerNames","redInput","greenInput","trim","dimensionsSelect","onPromptOK","ContinueGame","gameData","nextTurn","setSecondsRunning","secondsRunning","getSecondsRunning","message","_","getTimeInStringFormat","getSettings","settings","Settings","updateSettings","webSocket","playerColor","onMessage","gameId","onError","onClose","connect","WebSocket","onmessage","onerror","onclose","timerCallback","minutes","seconds","interval","hidden","location","protocol","hostname","path","Audio","play","samePCBtn","networkBtn","instructionsBtn","initGame","mode","Network","ex","console","loginBtns","loggedInArea","loadUserData","getUserData","user","authPlayerPicture","src","picUrl","logout","SamePC","navigator","canShare","shareData","href","share","catch","err","initGoogleSSO","renderGoogleBtn","userText","AccountMenu","loadStats","countdown","LogoutDisabled","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call"],"sourceRoot":""}