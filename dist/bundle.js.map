{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Socket } from './socket';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    private socket: Socket;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        this.initBoard();\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(canvasId, exitBtnId, timerId, playerRedId, playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    private initBoard() {\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.checkGameData();\r\n            this.setUpPlayerNames();\r\n        } else if (this.mode === GameMode.Network) {\r\n            this.defineSocket();\r\n        }\r\n        \r\n        this.printPlayerNames();\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    private printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (this.mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position: Position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && this.opponentConnected())) {\r\n            let position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.landDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n                if (this.turn === Dot.Red) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.Green) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (this.isBoardFull()) {\r\n                alert(this.playerRed + ' (Red) and ' + this.playerGreen + ' (Green) are tied!');\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timerSpan) {\r\n            winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.socket.getPlayerColor() === this.turn) {\r\n                winMsg += 'You win!';\r\n            } else {\r\n                winMsg += 'You lose!';\r\n            }\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            // Clear game data\r\n            localStorage.clear();\r\n        }\r\n\r\n        this.cleanUpEvents();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        if (this.mode !== GameMode.Network || this.opponentConnected()) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network) {\r\n            if (document.hidden) {\r\n                clearTimeout(this.timeout);\r\n            } else {\r\n                this.timeout = setTimeout(this.timerCallback, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network) {\r\n                this.socket.close();\r\n            }\r\n            this.onGameEnd();\r\n            this.stopTimer();\r\n            this.clearPlayerNames();\r\n            this.resetValues();\r\n        }\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = this.canvas.height / (Game.rows + 1);\r\n        } else {\r\n            this.colGap = this.canvas.width / (Game.columns + 1);\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerGreen = messageData.opponentName;\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerRed = messageData.opponentName;\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerRed = this.socket.getPlayerName();\r\n                if (this.playerRedSpan) {\r\n                    this.playerRedSpan.innerText = this.playerRed;\r\n                }\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerGreen = this.socket.getPlayerName();\r\n                if (this.playerGreenSpan) {\r\n                    this.playerGreenSpan.innerText = this.playerGreen;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (messageData.column && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private opponentConnected(): boolean {\r\n        // Return true for network play when both player names are defined (i.e. both connected)\r\n        return this.mode === GameMode.Network && !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    private isBoardFull(): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < Game.columns; col++) {\r\n            // Check upper row in every column\r\n            if (this.board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n\r\n    private resetValues() {\r\n        this.secondsRunning = 0;\r\n        this.turn = Dot.Red;\r\n        this.initBoard();\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    public constructor() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:443/';\r\n        } else {\r\n            //to set url to deployed location\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.close();\r\n        this.webSocket = null;\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && messageData.gameId) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n\r\n        if (messageData.message) {\r\n            alert(messageData.message);\r\n        }\r\n\r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","Red","canvasMousemove","event","mode","SamePC","socket","getPlayerColor","opponentConnected","position","Position","getCursorPosition","canvas","column","Math","round","x","colGap","moveDot","Network","data","action","send","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","innerText","classList","contains","clearTimeout","timeout","setTimeout","pageVisibilityChange","document","hidden","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","rows","paintBoard","socketMessage","messageData","opponentName","playerGreen","playerGreenSpan","Green","playerRed","playerRedSpan","color","getPlayerName","win","closeGameByWinning","this","getElementById","context","getContext","initBoard","exitBtn","getInstance","instance","col","row","Empty","start","checkGameData","setUpPlayerNames","defineSocket","printPlayerNames","setGameEvents","setTimer","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","prompt","waiting","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","checkDotCount","winner","winDialog","isBoardFull","alert","winMsg","cleanUpEvents","stopTimer","clearPlayerNames","add","resetValues","onGameEnd","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","JSON","stringify","parse","parseInt","exit","close","remove","Socket","onMessageCallback","full","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","url","onMessage","gameId","message","playerColor","playerName","name","onError","Utils","isLocal","webSocket","WebSocket","onmessage","onerror","location","protocol","hostname","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}