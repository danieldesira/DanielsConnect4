{"version":3,"file":"bundle.js","mappings":"6GAAA,aAEA,0BA4FA,QAvFkB,EAAAA,UAAd,SAAwBC,GACpB,IAAK,IAAIC,EAAM,EAAGA,EAAMC,EAAWC,QAASF,IAAO,CAC/CD,EAAMC,GAAO,IAAIG,MAAMF,EAAWG,MAClC,IAAK,IAAIC,EAAM,EAAGA,EAAMJ,EAAWG,KAAMC,IACrCN,EAAMC,GAAKK,GAAO,EAAAC,IAAIC,K,CAGlC,EAEc,EAAAC,cAAd,SAA4BT,EAA0BU,EAAgBJ,EAAaK,GAK/E,IAJA,IAAIC,EAAgBN,EAChBO,EAAmB,EAGhBA,EAAW,GAAKD,EAAQV,EAAWG,MAAQL,EAAMU,GAAQE,KAAWD,GACvEE,IACAD,IAGJ,GAAIC,EAAW,EAAG,CAKd,IAFAA,EAAW,EACXD,EAAQF,EACDE,EAAQV,EAAWC,SAAWH,EAAMY,GAAON,KAASK,GACvDE,IACAD,IAGJ,IADAA,EAAQF,EAAS,EACVE,GAAS,GAAKZ,EAAMY,GAAON,KAASK,GACvCE,IACAD,IAIJ,GAAIC,EAAW,EAAG,CACdA,EAAW,EAGX,IAFA,IAAIC,EAAmBR,EAAM,EACzBS,EAAmBL,EAAS,EACzBG,EAAW,GAAKC,GAAY,GAAMC,EAAWb,EAAWC,SAAWH,EAAMe,GAAUD,KAAcH,GACpGE,IACAE,IACAD,IAIJ,IAFAC,EAAWL,EACXI,EAAWR,EACJO,EAAW,GAAKC,EAAWZ,EAAWG,MAAQU,GAAY,GAAKf,EAAMe,GAAUD,KAAcH,GAChGE,IACAE,IACAD,IAGJ,GAAID,EAAW,EAAG,CAId,IAHAA,EAAW,EACXC,EAAWR,EAAM,EACjBS,EAAWL,EAAS,EACbG,EAAW,GAAKC,GAAY,GAAKC,GAAY,GAAKf,EAAMe,GAAUD,KAAcH,GACnFE,IACAE,IACAD,IAIJ,IAFAC,EAAWL,EACXI,EAAWR,EACJO,EAAW,GAAKC,EAAWZ,EAAWG,MAAQU,EAAWb,EAAWC,SAAWH,EAAMe,GAAUD,KAAcH,GAChHE,IACAE,IACAD,G,GAMhB,OAAOD,CACX,EAEc,EAAAG,YAAd,SAA0BhB,GAEtB,IADA,IAAIiB,GAAgB,EACXhB,EAAc,EAAGA,EAAMC,EAAWC,QAASF,IAEhD,GAAID,EAAMC,GAAK,KAAO,EAAAM,IAAIC,MAAO,CAC7BS,GAAO,EACP,K,CAGR,OAAOA,CACX,EAxFc,EAAAd,QAAkB,EAClB,EAAAE,KAAe,EAyFjC,C,CA5FA,GAAa,EAAAH,WAAAA,C,cCFb,IAAYK,E,+DAAAA,EAAA,EAAAA,MAAA,EAAAA,IAAG,KACX,cACA,YACA,qB,cCHJ,IAAYW,E,oEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAChB,qBACA,wB,cCFJ,IAAYC,E,iEAAAA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KACb,gCACA,yBACA,0B,+ECHJ,aACA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,QAEA,aAwBI,WAAoBC,EACRC,EACAC,EACAC,EACAC,GAJZ,WAlBQ,KAAAxB,MAA2B,IAAII,MAAM,EAAAF,WAAWC,SAKhD,KAAAsB,KAAY,EAAAlB,IAAImB,IA+GhB,KAAAC,gBAAkB,SAACC,GACvB,GAAI,EAAKC,OAAS,EAAAX,SAASY,QAAW,EAAKC,QAAU,EAAKN,OAAS,EAAKM,OAAOC,oBAAsB,EAAKC,aAAe,EAAKA,YAAYC,wBAA0B,CAChK,IAAIC,EAAqB,EAAAC,SAASC,kBAAkBT,EAAO,EAAKU,QAC5D5B,EAAS6B,KAAKC,OAAOL,EAASM,EAAI,IAAM,EAAKC,QAGjD,GAFA,EAAKC,QAAQjC,GAET,EAAKmB,OAAS,EAAAX,SAAS0B,SAAW,EAAKb,OAAQ,CAC/C,IAAIc,EAAO,CACPC,OAAQ,YACRpC,OAAQA,GAEZ,EAAKqB,OAAOgB,KAAKF,E,EAG7B,EAEQ,KAAAG,YAAc,SAACpB,GACnB,GAAI,EAAKC,OAAS,EAAAX,SAASY,QAAW,EAAKC,QAAU,EAAKN,OAAS,EAAKM,OAAOC,oBAAsB,EAAKC,aAAe,EAAKA,YAAYC,wBAA0B,CAChK,IAAIC,EAAW,EAAAC,SAASC,kBAAkBT,EAAO,EAAKU,QAClD5B,EAAS6B,KAAKC,OAAOL,EAASM,EAAI,IAAM,EAAKC,QAEjD,GAAI,EAAKb,OAAS,EAAAX,SAAS0B,SAAW,EAAKb,OAAQ,CAC/C,IAAIc,EAAO,CACPC,OAAQ,QACRpC,OAAQA,GAEZ,EAAKqB,OAAOgB,KAAKF,E,CAGrB,EAAKI,QAAQvC,E,CAErB,EA6HQ,KAAAwC,aAAe,SAACtB,GAChB,EAAKC,OAAS,EAAAX,SAASY,OACvB,EAAKqB,WACE,EAAKtB,OAAS,EAAAX,SAAS0B,UAE9BhB,EAAMwB,iBACNxB,EAAMyB,YAAc,GAE5B,EAEQ,KAAAC,qBAAuB,WACvB,EAAKzB,OAAS,EAAAX,SAAS0B,SAAW,EAAKW,OACvC,EAAKA,MAAMC,yBAEnB,EAqEQ,KAAAC,aAAe,WACnB,EAAKnB,OAAOoB,OAASC,OAAOC,YAAc,IAC1C,EAAKtB,OAAOuB,MAAQF,OAAOG,WAEvB,EAAKxB,OAAOuB,MAAQ,IACpB,EAAKE,aAAe,GAEpB,EAAKA,aAAe,GAGpB,EAAKzB,OAAOoB,OAAS,EAAKpB,OAAOuB,OACjC,EAAKnB,OAAS,EAAKJ,OAAOuB,MAAQ,EAAA3D,WAAWC,QAC7C,EAAK6D,OAAS,EAAK1B,OAAOoB,OAAS,EAAAxD,WAAWG,OAE9C,EAAKqC,OAAS,EAAKJ,OAAOuB,MAAQ,EAAA3D,WAAWC,QAC7C,EAAK6D,OAAS,IAGlB,EAAKC,YACT,EAOQ,KAAAC,cAAgB,SAACC,GACjBA,EAAYC,cAAgB,EAAKrC,QAAU,EAAKE,cAC5C,EAAKF,OAAOC,mBAAqB,EAAAzB,IAAImB,IACrC,EAAKO,YAAYoC,eAAeF,EAAYC,cACrC,EAAKrC,OAAOC,mBAAqB,EAAAzB,IAAI+D,OAC5C,EAAKrC,YAAYsC,aAAaJ,EAAYC,cAG1C,EAAKb,OACL,EAAKA,MAAMiB,aAAY,IAI3BL,EAAYM,OAAS,EAAK1C,QAAU,EAAKE,cACrCkC,EAAYM,QAAU,EAAAlE,IAAImB,IAC1B,EAAKO,YAAYsC,aAAa,EAAKxC,OAAO2C,iBACnCP,EAAYM,QAAU,EAAAlE,IAAI+D,OACjC,EAAKrC,YAAYoC,eAAe,EAAKtC,OAAO2C,kBAIhDP,EAAYQ,KACZ,EAAKC,qBAGJC,MAAMV,EAAYzD,SAAkC,cAAvByD,EAAYrB,QAC1C,EAAKH,QAAQwB,EAAYzD,QAGxBmE,MAAMV,EAAYzD,SAAkC,UAAvByD,EAAYrB,QAC1C,EAAKG,QAAQkB,EAAYzD,OAEjC,EAtYIoE,KAAKxC,OAASyC,SAASC,eAAe5D,GACtC0D,KAAKG,QAAUH,KAAKxC,OAAO4C,WAAW,MAEtC,EAAAhF,WAAWH,UAAU+E,KAAK9E,OAEtBqB,IACAyD,KAAKK,QAAUJ,SAASC,eAAe3D,IAGvCC,IACAwD,KAAKvB,MAAQ,IAAI,EAAA6B,MAAM9D,IAGvBC,GAAeC,IACfsD,KAAK7C,YAAc,IAAI,EAAAoD,eAAe9D,EAAaC,GAE3D,CAyYJ,OAvYkB,EAAA8D,YAAd,SAA0BC,GAItB,OAHKC,EAAKC,WACND,EAAKC,SAAW,IAAID,EAAKD,EAAQnE,SAAUmE,EAAQlE,UAAWkE,EAAQjE,QAASiE,EAAQhE,YAAagE,EAAQ/D,gBAEzGgE,EAAKC,QAChB,EAEO,YAAAC,MAAP,WACQZ,KAAKjD,OAAS,EAAAX,SAASY,QACvBgD,KAAKa,gBAEDb,KAAK7C,aACL6C,KAAK7C,YAAY2D,mBAGjBd,KAAKvB,OACLuB,KAAKvB,MAAMiB,aAAY,IAEpBM,KAAKjD,OAAS,EAAAX,SAAS0B,SAC9BkC,KAAKe,eAGLf,KAAK7C,aACL6C,KAAK7C,YAAY6D,iBAAiBhB,KAAKjD,MAG3CiD,KAAKrB,eACLqB,KAAKiB,gBAEDjB,KAAKvB,OACLuB,KAAKvB,MAAMyC,KAEnB,EAEQ,YAAAL,cAAR,WACI,IAAI3F,EAAQiG,aAAaC,QAAQ,SAC7BC,EAAWF,aAAaC,QAAQ,YAEhClG,GAASmG,IACKC,QAAQ,gEAElBtB,KAAKuB,kBAELJ,aAAaK,QAGzB,EAEQ,YAAArC,WAAR,WACI,IAAIsC,EAAgBzB,KAAKG,QAAQuB,qBAAqB,EAAG,EAAG1B,KAAKxC,OAAOuB,MAAO,GAC/E0C,EAAcE,aAAa,EAAG,QAC9BF,EAAcE,aAAa,EAAG,QAC9B3B,KAAKG,QAAQyB,UAAYH,EACzBzB,KAAKG,QAAQ0B,SAAS,EAAG,GAAI7B,KAAKxC,OAAOuB,MAAOiB,KAAKxC,OAAOoB,QAE5D,IAAK,IAAIzD,EAAM,EAAAC,WAAWC,QAAU,EAAGF,GAAO,EAAGA,IAC7C,IAAK,IAAIK,EAAM,EAAAJ,WAAWG,KAAO,EAAGC,GAAO,EAAGA,IAC1CwE,KAAKG,QAAQyB,UAAY5B,KAAK9E,MAAMC,GAAKK,GAEzCwE,KAAKG,QAAQ2B,YACb9B,KAAKG,QAAQ4B,IAAI,GAAK5G,EAAM6E,KAAKpC,OAAQ,IAAMpC,EAAMwE,KAAKd,OAAQc,KAAKf,aAAc,EAAG,EAAIxB,KAAKuE,IACjGhC,KAAKG,QAAQ8B,YACbjC,KAAKG,QAAQ+B,MAGzB,EAEQ,YAAAjB,cAAR,WACIjB,KAAKxC,OAAO2E,iBAAiB,YAAanC,KAAKnD,iBAAiB,GAChEmD,KAAKxC,OAAO2E,iBAAiB,QAASnC,KAAK9B,aAAa,GACxDW,OAAOsD,iBAAiB,eAAgBnC,KAAK5B,cAC7CS,OAAOsD,iBAAiB,SAAUnC,KAAKrB,cACvCsB,SAASkC,iBAAiB,mBAAoBnC,KAAKxB,qBACvD,EAmCQ,YAAA4D,WAAR,WACQpC,KAAKrD,OAAS,EAAAlB,IAAImB,IAClBoD,KAAKrD,KAAO,EAAAlB,IAAI+D,MACTQ,KAAKrD,OAAS,EAAAlB,IAAI+D,QACzBQ,KAAKrD,KAAO,EAAAlB,IAAImB,IAExB,EAEQ,YAAAiB,QAAR,SAAgBjC,GACZoE,KAAKqC,aACLrC,KAAKG,QAAQyB,UAAY5B,KAAKrD,KAC9BqD,KAAKsC,eAAe1G,EACxB,EAEQ,YAAAuC,QAAR,SAAgBvC,GACZ,IAAIJ,EAEJ,GAAIwE,KAAK9E,MAAMU,GAAQ,KAAO,EAAAH,IAAIC,MAAO,CAGrC,IAAK,IAAI6G,EAAI,EAAAnH,WAAWG,KAAO,EAAGgH,GAAK,EAAGA,IACtC,GAAIvC,KAAK9E,MAAMU,GAAQ2G,KAAO,EAAA9G,IAAIC,MAAO,CACrCsE,KAAK9E,MAAMU,GAAQ2G,GAAKvC,KAAKrD,KAC7BnB,EAAM+G,EACN,K,CAcR,GAVAvC,KAAKG,QAAQyB,UAAY5B,KAAKrD,KAG9BqD,KAAKG,QAAQ2B,YACb9B,KAAKG,QAAQ4B,IAAI,GAAKnG,EAASoE,KAAKpC,OAAQ,IAAM2E,EAAIvC,KAAKd,OAAQc,KAAKf,aAAc,EAAa,EAAVxB,KAAKuE,IAC9FhC,KAAKG,QAAQ8B,YACbjC,KAAKG,QAAQ+B,OAEE,EAAA9G,WAAWO,cAAcqE,KAAK9E,MAAOU,EAAQJ,EAAKwE,KAAKrD,MAEvD,EAAG,CACd,IAAI6F,EAAiB,GAEjBxC,KAAK7C,cACD6C,KAAKrD,OAAS,EAAAlB,IAAImB,IAClB4F,EAASxC,KAAK7C,YAAYsF,eAAiB,SACpCzC,KAAKrD,OAAS,EAAAlB,IAAI+D,QACzBgD,EAASxC,KAAK7C,YAAYuF,iBAAmB,aAIrD1C,KAAK2C,UAAUH,GACfxC,KAAKF,oB,MACF,GAAI,EAAA1E,WAAWc,YAAY8D,KAAK9E,OAAQ,CAC3C,IAAI0H,EAAkB,GAClB5C,KAAK7C,cACLyF,GAAW5C,KAAK7C,YAAYsF,eAAiB,cAAgBzC,KAAK7C,YAAYuF,iBAAmB,YAErGE,GAAW,aACXC,MAAMD,GACN5C,KAAKF,oB,MAELE,KAAKoC,aACLpC,KAAKG,QAAQyB,UAAY5B,KAAKrD,KAC9BqD,KAAKsC,eAAe1G,GACpB,EAAAkH,MAAMC,UAAU,EAAA1G,MAAM2G,Q,CAGlC,EAEQ,YAAAL,UAAR,SAAkBH,GACd,IAAIS,EAAiBT,EAAS,SAC1BxC,KAAKvB,QACLwE,GAAU,iBAAmBjD,KAAKvB,MAAMyE,yBAExClD,KAAKjD,OAAS,EAAAX,SAAS0B,SACvBmF,GAAU,KACNjD,KAAK/C,OAAOC,mBAAqB8C,KAAKrD,MACtCsG,GAAU,WACV,EAAAH,MAAMC,UAAU,EAAA1G,MAAM8G,OAEtBF,GAAU,YACV,EAAAH,MAAMC,UAAU,EAAA1G,MAAM+G,QAG1B,EAAAN,MAAMC,UAAU,EAAA1G,MAAM8G,KAE1BN,MAAMI,EACV,EAEQ,YAAAnD,mBAAR,WACQE,KAAKjD,OAAS,EAAAX,SAASY,QAEvBmE,aAAaK,QAGjBxB,KAAKqD,gBAEDrD,KAAK7C,aACL6C,KAAK7C,YAAYqE,QAGjBxB,KAAKvB,OACLuB,KAAKvB,MAAM6E,OAGXtD,KAAKK,SACLL,KAAKK,QAAQkD,UAAUC,IAAI,QAG/BxD,KAAKyD,cAGDzD,KAAK0D,WACLC,WAAW3D,KAAK0D,UAAW,IAEnC,EAEQ,YAAApB,eAAR,SAAuB1G,GACnBoE,KAAKG,QAAQ2B,YACb9B,KAAKG,QAAQ4B,IAAI,GAAKnG,EAASoE,KAAKpC,OAAQoC,KAAKf,aAAce,KAAKf,aAAc,EAAG,EAAIxB,KAAKuE,IAC9FhC,KAAKG,QAAQ8B,YACbjC,KAAKG,QAAQ+B,MACjB,EAkBQ,YAAAG,WAAR,WACIrC,KAAKG,QAAQyD,UAAU,EAAG,EAAG5D,KAAKxC,OAAOuB,MAAO,GACpD,EAEQ,YAAAsE,cAAR,WACIrD,KAAKxC,OAAOqG,oBAAoB,YAAa7D,KAAKnD,iBAAiB,GACnEmD,KAAKxC,OAAOqG,oBAAoB,QAAS7D,KAAK9B,aAAa,GAC3DW,OAAOgF,oBAAoB,eAAgB7D,KAAK5B,cAChDS,OAAOgF,oBAAoB,SAAU7D,KAAKrB,cAC1CsB,SAAS4D,oBAAoB,mBAAoB7D,KAAKxB,qBAC1D,EAEQ,YAAAH,SAAR,WACI8C,aAAa2C,QAAQ,WAAY9D,KAAKrD,KAAKoH,YAC9C5C,aAAa2C,QAAQ,QAASE,KAAKC,UAAUjE,KAAK9E,QAE3C8E,KAAK7C,aACL6C,KAAK7C,YAAY+G,uBAGjBlE,KAAKvB,OACLuB,KAAKvB,MAAM0F,kCAEnB,EAEQ,YAAA5C,gBAAR,WACI,IAAIF,EAAmBF,aAAaC,QAAQ,YACxCC,IAAa,EAAA5F,IAAImB,IACjBoD,KAAKrD,KAAO,EAAAlB,IAAImB,IACTyE,IAAa,EAAA5F,IAAI+D,QACxBQ,KAAKrD,KAAO,EAAAlB,IAAI+D,OAGpBQ,KAAK9E,MAAQ8I,KAAKI,MAAMjD,aAAaC,QAAQ,UAEzCpB,KAAKvB,OACLuB,KAAKvB,MAAM4F,oCAGXrE,KAAK7C,aACL6C,KAAK7C,YAAYmH,qBAEzB,EAEO,YAAAC,KAAP,YACqCvE,KAAKjD,OAAS,EAAAX,SAAS0B,SAAUwD,QAAQ,+DAGtEtB,KAAKqD,gBACDrD,KAAKjD,OAAS,EAAAX,SAASY,OACvBgD,KAAK3B,WACE2B,KAAKjD,OAAS,EAAAX,SAAS0B,SAC9BkC,KAAK/C,OAAOuH,QAEhBxE,KAAK0D,YACL1D,KAAKyD,cAEDzD,KAAK7C,aACL6C,KAAK7C,YAAYqE,QAGjBxB,KAAKvB,OACLuB,KAAKvB,MAAM6E,OAGvB,EAuBQ,YAAAvC,aAAR,WACIf,KAAK/C,OAAS,IAAI,EAAAwH,OAClBzE,KAAK/C,OAAOyH,kBAAoB1E,KAAKZ,aACzC,EAoCQ,YAAAqE,YAAR,WACIzD,KAAKrD,KAAO,EAAAlB,IAAImB,IAChB,EAAAxB,WAAWH,UAAU+E,KAAK9E,OAEtB8E,KAAK7C,aACL6C,KAAK7C,YAAYwH,QAGjB3E,KAAK/C,QACL+C,KAAK/C,OAAOuH,QAGZxE,KAAKvB,OACLuB,KAAKvB,MAAMkG,OAEnB,EAEJ,EAtbA,GAAa,EAAAjE,KAAAA,C,wFCVb,aAEA,aAMI,WAAmBjE,EAAqBC,GAChCD,IACAuD,KAAK4E,cAAgB3E,SAASC,eAAezD,IAG7CC,IACAsD,KAAK6E,gBAAkB5E,SAASC,eAAexD,GAEvD,CA6EJ,OA3EW,YAAAoE,iBAAP,WACSK,aAAaC,QAAQ,cAAiBD,aAAaC,QAAQ,iBAC5DpB,KAAK8E,UAAYC,OAAO,qCACxB/E,KAAKgF,YAAcD,OAAO,uCAElC,EAEO,YAAA/D,iBAAP,SAAwBjE,GACpB,IAAMkI,EAAU,wBACZjF,KAAK6E,kBACD9H,IAAS,EAAAX,SAAS0B,SAAYkC,KAAKgF,YAGnChF,KAAK6E,gBAAgBK,UAAYlF,KAAKgF,YAFtChF,KAAK6E,gBAAgBK,UAAYD,GAKrCjF,KAAK4E,gBACD7H,IAAS,EAAAX,SAAS0B,SAAYkC,KAAK8E,UAGnC9E,KAAK4E,cAAcM,UAAYlF,KAAK8E,UAFpC9E,KAAK4E,cAAcM,UAAYD,EAK3C,EAEO,YAAAzD,MAAP,WACQxB,KAAK6E,kBACL7E,KAAK6E,gBAAgBK,UAAY,IAEjClF,KAAK4E,gBACL5E,KAAK4E,cAAcM,UAAY,GAEvC,EAEO,YAAAP,MAAP,WACI3E,KAAK8E,UAAY,KACjB9E,KAAKgF,YAAc,IACvB,EAEO,YAAAvC,aAAP,WACI,OAAOzC,KAAK8E,SAChB,EAEO,YAAApC,eAAP,WACI,OAAO1C,KAAKgF,WAChB,EAEO,YAAA5H,qBAAP,WACI,QAAS4C,KAAK8E,aAAe9E,KAAKgF,WACtC,EAEO,YAAAd,qBAAP,WACI/C,aAAa2C,QAAQ,YAAa9D,KAAK8E,WACvC3D,aAAa2C,QAAQ,cAAe9D,KAAKgF,YAC7C,EAEO,YAAAV,oBAAP,WACItE,KAAK8E,UAAY3D,aAAaC,QAAQ,aACtCpB,KAAKgF,YAAc7D,aAAaC,QAAQ,cAC5C,EAEO,YAAA3B,aAAP,SAAoB0F,GAChBnF,KAAK8E,UAAYK,EACbnF,KAAK4E,gBACL5E,KAAK4E,cAAcM,UAAYlF,KAAK8E,UAE5C,EAEO,YAAAvF,eAAP,SAAsB4F,GAClBnF,KAAKgF,YAAcG,EACfnF,KAAK6E,kBACL7E,KAAK6E,gBAAgBK,UAAYlF,KAAKgF,YAE9C,EAEJ,EA3FA,GAAa,EAAAzE,eAAAA,C,gFCFb,iBAII,WAAY5C,EAAWyH,GACnBpF,KAAKrC,EAAIA,EACTqC,KAAKoF,EAAIA,CACb,CAiBJ,OAfkB,EAAA7H,kBAAd,SAAgCT,EAAOU,GACnC,IAAIG,EACAyH,EAWJ,YAVoBC,IAAhBvI,EAAMwI,YAAuCD,IAAhBvI,EAAMyI,OACnC5H,EAAIb,EAAMwI,MACVF,EAAItI,EAAMyI,QAGV5H,EAAIb,EAAM0I,QAAUvF,SAASwF,KAAKC,WAAazF,SAAS0F,gBAAgBD,WACxEN,EAAItI,EAAM8I,QAAU3F,SAASwF,KAAKI,UAAY5F,SAAS0F,gBAAgBE,WAIpE,IAAIvI,EAFXK,GAAKH,EAAOsI,WACZV,GAAK5H,EAAOuI,UAEhB,EACJ,EAxBA,GAAa,EAAAzI,SAAAA,C,iFCCb,aAEA,aAWI,wBA0CQ,KAAA0I,UAAY,SAAClJ,GACjB,IAAIuC,EAAc2E,KAAKI,MAAMtH,EAAMiB,MAMnC,GAJK,EAAKkI,QAAWlG,MAAMV,EAAY4G,UACnC,EAAKA,OAAS5G,EAAY4G,SAGzB,EAAKC,aAAe7G,EAAYM,MAAO,CACxC,EAAKuG,YAAc7G,EAAYM,MAE/B,EAAKwF,WAAaJ,OAAO,WAAa,EAAKmB,YAAc,6BAEzD,IAAInI,EAAO,CACPoI,KAAM,EAAKhB,YAEf,EAAKlH,KAAKF,E,CAGV,EAAK2G,mBACL,EAAKA,kBAAkBrF,EAE/B,EAEQ,KAAA+G,QAAU,WACdvD,MAAM,gCACV,EAEQ,KAAAwD,QAAU,WACd,EAAKC,SACT,EAtEItG,KAAKsG,SACT,CAsEJ,OApEY,YAAAA,QAAR,WACI,IAAIC,EAEAA,EADA,EAAAzD,MAAM0D,UACA,uBAEA,+CAGNxG,KAAKkG,cAAgBnG,MAAMC,KAAKiG,UAChCM,GAAO,gBAAkBvG,KAAKkG,YAAc,WAAalG,KAAKiG,OAAS,eAAiBjG,KAAKmF,YAGjGnF,KAAKyG,UAAY,IAAIC,UAAUH,GAE/BvG,KAAKyG,UAAUE,UAAY3G,KAAKgG,UAChChG,KAAKyG,UAAUG,QAAU5G,KAAKoG,QAC9BpG,KAAKyG,UAAUI,QAAU7G,KAAKqG,OAClC,EAEO,YAAApI,KAAP,SAAYF,GACRiC,KAAKyG,UAAUxI,KAAK+F,KAAKC,UAAUlG,GACvC,EAEO,YAAAyG,MAAP,WACIxE,KAAKyG,UAAUI,QAAU,KACzB7G,KAAKyG,UAAUE,UAAY,KAC3B3G,KAAKyG,UAAUG,QAAU,KACzB5G,KAAKyG,UAAUjC,OACnB,EAEO,YAAAtH,eAAP,WACI,OAAO8C,KAAKkG,WAChB,EAEO,YAAAtG,cAAP,WACI,OAAOI,KAAKmF,UAChB,EAgCJ,EAnFA,GAAa,EAAAV,OAAAA,C,8ECHb,iBAOI,WAAmBjI,GAAnB,WAIQ,KAAAsK,cAAgB,WACpB,GAAI,EAAKC,SAAU,CACf,EAAKC,iBACL,IAAIC,EAAkBxJ,KAAKyJ,MAAM,EAAKF,eAAiB,IACnDG,EAAkB,EAAKH,eAAiB,GAC5C,EAAKI,UAAUlC,UAAY+B,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,C,CAGtE,EAAKC,UAAU7D,UAAU8D,SAAS,QAGnCC,aAAa,EAAKC,SAFlB,EAAKA,QAAU5D,WAAW,EAAKmD,cAAe,IAItD,EAhBI9G,KAAKoH,UAAYnH,SAASC,eAAe1D,EAC7C,CAiEJ,OAhDW,YAAA0E,IAAP,WACQlB,KAAKoH,YACLpH,KAAKoH,UAAU7D,UAAUiE,OAAO,QAChCxH,KAAK8G,gBAEb,EAEO,YAAAxD,KAAP,WACQtD,KAAKuH,UACLD,aAAatH,KAAKuH,SAClBvH,KAAKoH,UAAUlC,UAAY,GAC3BlF,KAAKoH,UAAU7D,UAAUC,IAAI,QAErC,EAEO,YAAA9E,wBAAP,WACQuB,SAASwH,OACTH,aAAatH,KAAKuH,SAElBvH,KAAKuH,QAAU5D,WAAW3D,KAAK8G,cAAe,IAEtD,EAEO,YAAA5D,sBAAP,WACI,OAAIlD,KAAKoH,UACEpH,KAAKoH,UAAUlC,UAEf,EAEf,EAEO,YAAAf,iCAAP,WACIhD,aAAa2C,QAAQ,iBAAkB9D,KAAKgH,eAAejD,WAC/D,EAEO,YAAAM,kCAAP,WACIrE,KAAKgH,eAAiBU,SAASvG,aAAaC,QAAQ,kBACxD,EAEO,YAAAuD,MAAP,WACI3E,KAAKgH,eAAiB,EACtBhH,KAAK+G,UAAW,CACpB,EAEO,YAAArH,YAAP,SAAmBqH,GACf/G,KAAK+G,SAAWA,CACpB,EAEJ,EA1EA,GAAa,EAAAzG,MAAAA,C,8ECAb,8BAUA,QATkB,EAAAkG,QAAd,WACI,MAA6B,UAAtBmB,SAASC,UACa,cAAtBD,SAASE,QACpB,EAEc,EAAA9E,UAAd,SAAwB+E,GACR,IAAIC,MAAMD,GAChBE,MACV,EACJ,EAVA,GAAa,EAAAlF,MAAAA,C,GCCTmF,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB9C,IAAjB+C,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,C,MCtBA,IAGIG,EAHJ,SACA,SAIIC,EAAOxI,SAASC,eAAe,QAC/BwI,EAAYzI,SAASC,eAAe,UACpCyI,EAAa1I,SAASC,eAAe,WACrC0I,EAAa3I,SAASC,eAAe,WAErCG,EAAUJ,SAASC,eAAe,WAElC1C,EAASyC,SAASC,eAAe,SAkBrC,SAAS2I,EAAS9L,IACdyL,EAAW,EAAA9H,KAAKF,YAAY,CACxBlE,SAAU,QACVC,UAAW,UACXC,QAAS,QACTC,YAAa,YACbC,cAAe,iBAEVK,KAAOA,EAChByL,EAAS9E,UAAY,WACjB+E,EAAKlF,UAAUiE,OAAO,QACtBhK,EAAO+F,UAAUC,IAAI,QACrBnD,EAAQkD,UAAUC,IAAI,OAC1B,EACAgF,EAAS5H,QAET6H,EAAKlF,UAAUC,IAAI,QACnBhG,EAAO+F,UAAUiE,OAAO,QACxBnH,EAAQkD,UAAUiE,OAAO,OAC7B,CAnCAkB,EAAUvG,iBAAiB,SAAS,WAChC0G,EAAS,EAAAzM,SAASY,OACtB,IAAG,GAEH2L,EAAWxG,iBAAiB,SAAS,WACjC0G,EAAS,EAAAzM,SAAS0B,QACtB,IAAG,GAEH8K,EAAWzG,iBAAiB,SAAS,WACjC2G,KAAK,oBACT,IAAG,GAEHzI,EAAQ8B,iBAAiB,SAAS,WAC9BqG,EAASjE,MACb,IAAG,E","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/player-name-area.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static checkDotCount(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","export enum Dot {\r\n    Empty = 'black',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { GameMode } from './enums/game-mode';\r\nimport { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Socket } from './socket';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameArea } from './player-name-area';\r\n\r\nexport class Game {\r\n\r\n    private static instance: Game;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: any;\r\n    private playerNames: PlayerNameArea;\r\n\r\n    private turn: Dot = Dot.Red;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    private socket: Socket;\r\n\r\n    private timer: Timer;\r\n\r\n    private constructor(canvasId: string,\r\n                exitBtnId: string,\r\n                timerId: string,\r\n                playerRedId: string,\r\n                playerGreenId: string) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (exitBtnId) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId) {\r\n            this.timer = new Timer(timerId);\r\n        }\r\n\r\n        if (playerRedId && playerGreenId) {\r\n            this.playerNames = new PlayerNameArea(playerRedId, playerGreenId);\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: any): Game {\r\n        if (!Game.instance) {\r\n            Game.instance = new Game(options.canvasId, options.exitBtnId, options.timerId, options.playerRedId, options.playerGreenId);\r\n        }\r\n        return Game.instance;\r\n    }\r\n\r\n    public start() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.checkGameData();\r\n\r\n            if (this.playerNames) {\r\n                this.playerNames.setUpPlayerNames();\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        } else if (this.mode === GameMode.Network) {\r\n            this.defineSocket();\r\n        }\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.printPlayerNames(this.mode);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n            if (restore) {\r\n                this.restoreLastGame();\r\n            } else {\r\n                localStorage.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    private canvasMousemove = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected()))) {\r\n            let position: Position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n            this.moveDot(column);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'mousemove',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    private canvasClick = (event) => {\r\n        if (this.mode === GameMode.SamePC || (this.socket && this.turn === this.socket.getPlayerColor() && (!this.playerNames || this.playerNames.bothPlayersConnected()))) {\r\n            let position = Position.getCursorPosition(event, this.canvas);\r\n            let column = Math.round((position.x - 50) / this.colGap);\r\n\r\n            if (this.mode === GameMode.Network && this.socket) {\r\n                let data = {\r\n                    action: 'click',\r\n                    column: column\r\n                };\r\n                this.socket.send(data);\r\n            }\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    private switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n    }\r\n\r\n    private moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    private landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = BoardLogic.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = BoardLogic.checkDotCount(this.board, column, row, this.turn);\r\n\r\n            if (dotCount > 3) { // If a player completes 4 dots\r\n                let winner: string = '';\r\n\r\n                if (this.playerNames) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNames.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNames.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.winDialog(winner);\r\n                this.closeGameByWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNames) {\r\n                    message += this.playerNames.getPlayerRed() + ' (Red) and ' + this.playerNames.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                alert(message);\r\n                this.closeGameByWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    private winDialog(winner: string) {\r\n        let winMsg: string = winner + ' wins!';\r\n        if (this.timer) {\r\n            winMsg += '\\nTime taken: ' + this.timer.getTimeInStringFormat();\r\n        }\r\n        if (this.mode === GameMode.Network) {\r\n            winMsg += '\\n';\r\n            if (this.socket.getPlayerColor() === this.turn) {\r\n                winMsg += 'You win!';\r\n                Utils.playSound(Sound.Win);\r\n            } else {\r\n                winMsg += 'You lose!';\r\n                Utils.playSound(Sound.Lose);\r\n            }\r\n        } else {\r\n            Utils.playSound(Sound.Win);\r\n        }\r\n        alert(winMsg);\r\n    }\r\n\r\n    private closeGameByWinning() {\r\n        if (this.mode === GameMode.SamePC) {\r\n            // Clear game data\r\n            localStorage.clear();\r\n        }\r\n\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private beforeUnload = (event) => {\r\n        if (this.mode === GameMode.SamePC) {\r\n            this.saveGame();\r\n        } else if (this.mode === GameMode.Network) {\r\n            // Display default dialog before closing\r\n            event.preventDefault();\r\n            event.returnValue = ''; // Required by Chrome\r\n        }\r\n    };\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.mode !== GameMode.Network && this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.saveIntoLocalStorage();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.saveSecondsRunningToLocalStorage();\r\n        }\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNames) {\r\n            this.playerNames.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    public exit() {\r\n        let exitConfirmation: boolean = (this.mode === GameMode.Network ? confirm('Network game in progress. Are you sure you want to quit?') : true);\r\n\r\n        if (exitConfirmation) {\r\n            this.cleanUpEvents();\r\n            if (this.mode === GameMode.SamePC) {\r\n                this.saveGame();\r\n            } else if (this.mode === GameMode.Network) {\r\n                this.socket.close();\r\n            }\r\n            this.onGameEnd();\r\n            this.resetValues();\r\n\r\n            if (this.playerNames) {\r\n                this.playerNames.clear();\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.socketMessage;\r\n    }\r\n\r\n    private socketMessage = (messageData) => {\r\n        if (messageData.opponentName && this.socket && this.playerNames) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNames.setPlayerGreen(messageData.opponentName);\r\n            } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                this.playerNames.setPlayerRed(messageData.opponentName);\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.setRunnable(true);\r\n            }\r\n        }\r\n\r\n        if (messageData.color && this.socket && this.playerNames) {\r\n            if (messageData.color === Dot.Red) {\r\n                this.playerNames.setPlayerRed(this.socket.getPlayerName());\r\n            } else if (messageData.color === Dot.Green) {\r\n                this.playerNames.setPlayerGreen(this.socket.getPlayerName());\r\n            }\r\n        }\r\n\r\n        if (messageData.win) {\r\n            this.closeGameByWinning();\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'mousemove') {\r\n            this.moveDot(messageData.column);\r\n        }\r\n\r\n        if (!isNaN(messageData.column) && messageData.action === 'click') {\r\n            this.landDot(messageData.column);\r\n        }\r\n    };\r\n\r\n    private resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNames) {\r\n            this.playerNames.reset();\r\n        }\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n}","import { GameMode } from \"./enums/game-mode\";\r\n\r\nexport class PlayerNameArea {\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames() {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            this.playerRed = prompt('Please enter name for Red Player!');\r\n            this.playerGreen = prompt('Please enter name for Green Player!');\r\n        }\r\n    }\r\n\r\n    public printPlayerNames(mode: GameMode) {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (mode === GameMode.Network && !this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (mode === GameMode.Network && !this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public bothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dot } from \"./enums/dot\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private timeout: number;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: object) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event) => {\r\n        let messageData = JSON.parse(event.data);\r\n\r\n        if (!this.gameId && !isNaN(messageData.gameId)) {\r\n            this.gameId = messageData.gameId;\r\n        }\r\n        \r\n        if (!this.playerColor && messageData.color) {\r\n            this.playerColor = messageData.color;\r\n\r\n            this.playerName = prompt('You are ' + this.playerColor + '. Please enter your name.');\r\n            \r\n            let data = {\r\n                name: this.playerName\r\n            };\r\n            this.send(data);\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        alert('Problem connecting to server!');\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: any;\r\n    private timerSpan: any;\r\n    private runnable: boolean;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId);\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        if (this.runnable) {\r\n            this.secondsRunning++;\r\n            let minutes: number = Math.floor(this.secondsRunning / 60);\r\n            let seconds: number = this.secondsRunning % 60;\r\n            this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        }\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n        this.runnable = false;\r\n    }\r\n\r\n    public setRunnable(runnable: boolean) {\r\n        this.runnable = runnable;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./lib/game\";\r\nimport { GameMode } from \"./lib/enums/game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\nlet socketsBtn = document.getElementById('sockets');\r\nlet creditsBtn = document.getElementById('credits');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nsocketsBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    connect4 = Game.getInstance({\r\n        canvasId: 'board',\r\n        exitBtnId: 'exitBtn',\r\n        timerId: 'timer',\r\n        playerRedId: 'playerRed',\r\n        playerGreenId: 'playerGreen'\r\n    });\r\n    connect4.mode = mode;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","checkDotCount","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","GameMode","Sound","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","turn","Red","canvasMousemove","event","mode","SamePC","socket","getPlayerColor","playerNames","bothPlayersConnected","position","Position","getCursorPosition","canvas","Math","round","x","colGap","moveDot","Network","data","action","send","canvasClick","landDot","beforeUnload","saveGame","preventDefault","returnValue","pageVisibilityChange","timer","pauseWhenDocumentHidden","resizeCanvas","height","window","innerHeight","width","innerWidth","circleRadius","rowGap","paintBoard","socketMessage","messageData","opponentName","setPlayerGreen","Green","setPlayerRed","setRunnable","color","getPlayerName","win","closeGameByWinning","isNaN","this","document","getElementById","context","getContext","exitBtn","Timer","PlayerNameArea","getInstance","options","Game","instance","start","checkGameData","setUpPlayerNames","defineSocket","printPlayerNames","setGameEvents","set","localStorage","getItem","nextTurn","confirm","restoreLastGame","clear","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","beginPath","arc","PI","closePath","fill","addEventListener","switchTurn","clearUpper","paintDotToDrop","r","winner","getPlayerRed","getPlayerGreen","winDialog","message","alert","Utils","playSound","LandDot","winMsg","getTimeInStringFormat","Win","Lose","cleanUpEvents","stop","classList","add","resetValues","onGameEnd","setTimeout","clearRect","removeEventListener","setItem","toString","JSON","stringify","saveIntoLocalStorage","saveSecondsRunningToLocalStorage","parse","setSecondsRunningFromLocalStorage","setFromLocalStorage","exit","close","Socket","onMessageCallback","reset","playerRedSpan","playerGreenSpan","playerRed","prompt","playerGreen","waiting","innerText","playerName","y","undefined","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","onMessage","gameId","playerColor","name","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","runnable","secondsRunning","minutes","floor","seconds","timerSpan","contains","clearTimeout","timeout","remove","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","connect4","menu","samePCBtn","socketsBtn","creditsBtn","initGame","open"],"sourceRoot":""}