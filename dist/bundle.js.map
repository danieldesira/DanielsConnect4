{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/lib/board-logic.ts","webpack:///./src/lib/dialog/dialog.ts","webpack:///./src/lib/dialog/enums/dialog-type.ts","webpack:///./src/lib/enums/dot.ts","webpack:///./src/lib/enums/game-mode.ts","webpack:///./src/lib/enums/sound.ts","webpack:///./src/lib/game.ts","webpack:///./src/lib/models/action-message.ts","webpack:///./src/lib/models/game-message.ts","webpack:///./src/lib/models/inactivity-message.ts","webpack:///./src/lib/models/player-name-message.ts","webpack:///./src/lib/models/skip-turn-message.ts","webpack:///./src/lib/network-game.ts","webpack:///./src/lib/player-name-section.ts","webpack:///./src/lib/position.ts","webpack:///./src/lib/same-device-game.ts","webpack:///./src/lib/socket.ts","webpack:///./src/lib/timer.ts","webpack:///./src/lib/utils.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Dot } from \"./enums/dot\"\r\n\r\nexport class BoardLogic {\r\n\r\n    public static columns: number = 9;\r\n    public static rows: number = 8;\r\n\r\n    public static initBoard(board: Array<Array<Dot>>) {\r\n        for (let col = 0; col < BoardLogic.columns; col++) {\r\n            board[col] = new Array(BoardLogic.rows);\r\n            for (let row = 0; row < BoardLogic.rows; row++){\r\n                board[col][row] = Dot.Empty;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static countConsecutiveDots(board: Array<Array<Dot>>, column: number, row: number, currentTurn: Dot): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < BoardLogic.rows && board[column][count] === currentTurn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < BoardLogic.columns && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && board[count][row] === currentTurn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < BoardLogic.rows && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < BoardLogic.rows && colCount < BoardLogic.columns && board[colCount][rowCount] === currentTurn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    public static isBoardFull(board: Array<Array<Dot>>): boolean {\r\n        let full: boolean = true;\r\n        for (let col: number = 0; col < BoardLogic.columns; col++) {\r\n            // Check upper row in every column\r\n            if (board[col][0] === Dot.Empty) {\r\n                full = false;\r\n                break;\r\n            }\r\n        }\r\n        return full;\r\n    }\r\n    \r\n}","import { ConfirmationDialogOptions } from \"./confirmation-dialog-options\";\r\nimport { DialogOptions } from \"./dialog-options\";\r\nimport { DialogType } from \"./enums/dialog-type\";\r\nimport { PromptDialogOptions } from \"./prompt-dialog-options\";\r\nimport { PromptInput } from \"./prompt-input\";\r\n\r\nexport class Dialog {\r\n    \r\n    private static modal(text: Array<string>, type: DialogType, options: DialogOptions = null) {\r\n        let modal = document.createElement('div') as HTMLDivElement;\r\n        modal.classList.add('dialog');\r\n\r\n        let textContainer = document.createElement('div') as HTMLDivElement;\r\n        this.appendText(text, textContainer);\r\n        modal.appendChild(textContainer);\r\n\r\n        let btnContainer = document.createElement('div') as HTMLDivElement;\r\n        btnContainer.classList.add('dialog-btn-container');\r\n        \r\n        switch (type) {\r\n            case DialogType.Confirmation: {\r\n                let o = options as ConfirmationDialogOptions;\r\n                this.appendBtn(btnContainer, 'Yes', () => {\r\n                    o.yesCallback();\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                this.appendBtn(btnContainer, 'No', () => {\r\n                    o.noCallback();\r\n                    this.closeModal(modal);\r\n                }, 'red');\r\n                break;\r\n            }\r\n            case DialogType.Notification: {\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    this.closeModal(modal);\r\n                }, 'green');\r\n                break;\r\n            }\r\n            case DialogType.Prompt: {\r\n                let o = options as PromptDialogOptions;\r\n                this.appendInputs(modal, o.inputs);\r\n                this.appendBtn(btnContainer, 'OK', () => {\r\n                    let error: string = o.onOK();\r\n                    if (error) {\r\n                        this.appendError(modal, error);\r\n                    } else {\r\n                        this.closeModal(modal);\r\n                    }\r\n                }, 'green');\r\n                break;\r\n            }\r\n        }\r\n        modal.appendChild(btnContainer);\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    private static appendBtn(container: HTMLDivElement, text: string, callback: any, bgColor: string) {\r\n        let btn = document.createElement('button') as HTMLButtonElement;\r\n        btn.type = 'button';\r\n        btn.innerText = text;\r\n        btn.classList.add('text');\r\n        btn.classList.add('dialog-btn');\r\n        btn.classList.add('dialog-btn-' + bgColor);\r\n        btn.addEventListener('click', callback);\r\n        container.appendChild(btn);\r\n    }\r\n\r\n    private static appendInputs(modal: HTMLDivElement, inputs: Array<PromptInput>) {\r\n        let inputContainer = document.createElement('div') as HTMLDivElement;\r\n        inputContainer.classList.add('dialog-input-container');\r\n        for (let i: number = 0; i < inputs.length; i++) {\r\n            let label = document.createElement('label') as HTMLLabelElement;\r\n            label.innerText = inputs[i].name + ': ';\r\n            label.classList.add('text');\r\n            inputContainer.appendChild(label);\r\n\r\n            let input = document.createElement('input') as HTMLInputElement;\r\n            input.type = inputs[i].type;\r\n            input.id = inputs[i].name;\r\n            input.name = inputs[i].name;\r\n            input.classList.add('dialog-input');\r\n            input.classList.add('text');\r\n            inputContainer.appendChild(input);\r\n\r\n            this.appendBrElement(inputContainer);\r\n            this.appendBrElement(inputContainer);\r\n        }\r\n        modal.appendChild(inputContainer);\r\n    }\r\n\r\n    private static appendBrElement(container: HTMLDivElement) {\r\n        let br = document.createElement('br') as HTMLBRElement;\r\n        container.appendChild(br);\r\n    }\r\n\r\n    private static appendError(container: HTMLDivElement, text: string) {\r\n        let errorDiv = document.getElementById('dialogError') as HTMLDivElement;\r\n        if (!errorDiv) {\r\n            errorDiv = document.createElement('div');\r\n            errorDiv.id = 'dialogError';\r\n            errorDiv.classList.add('red-text');\r\n            errorDiv.classList.add('text');\r\n            errorDiv.classList.add('dialog-error');\r\n            container.appendChild(errorDiv);\r\n        }\r\n        errorDiv.innerText = text;\r\n    }\r\n\r\n    private static appendText(text: Array<string>, container: HTMLDivElement) {\r\n        container.classList.add('text');\r\n        container.classList.add('dialog-text');\r\n        for (let i: number = 0; i < text.length; i++) {\r\n            let p = document.createElement('p') as HTMLParagraphElement;\r\n            p.innerText = text[i];\r\n            container.appendChild(p);\r\n        }\r\n    }\r\n\r\n    private static closeModal(modal: HTMLDivElement) {\r\n        if (document.body.contains(modal)) {\r\n            document.body.removeChild(modal);\r\n        }\r\n    }\r\n\r\n    public static confirm(text: Array<string>, options: ConfirmationDialogOptions) {\r\n        Dialog.modal(text, DialogType.Confirmation, options);\r\n    }\r\n\r\n    public static notify(text: Array<string>) {\r\n        Dialog.modal(text, DialogType.Notification);\r\n    }\r\n\r\n    public static prompt(text: Array<string>, options: PromptDialogOptions) {\r\n        Dialog.modal(text, DialogType.Prompt, options);\r\n    }\r\n\r\n    public static closeAllOpenDialogs() {\r\n        let dialogs = document.getElementsByClassName('dialog') as HTMLCollectionOf<HTMLDivElement>;\r\n        for (let i: number = 0; i < dialogs.length; i++) {\r\n            this.closeModal(dialogs[i]);\r\n        }\r\n    }\r\n\r\n}","export enum DialogType {\r\n    Confirmation = 0,\r\n    Notification = 1,\r\n    Prompt = 2\r\n}","export enum Dot {\r\n    Empty = 'lightyellow',\r\n    Red = 'red',\r\n    Green = 'greenyellow'\r\n}","export enum GameMode {\r\n    SamePC = 1,\r\n    Network = 2\r\n}","export enum Sound {\r\n    LandDot = './sounds/land-dot.m4a',\r\n    Win = './sounds/win.m4a',\r\n    Lose = './sounds/lose.m4a'\r\n}","import { Dot } from './enums/dot';\r\nimport { Position } from './position';\r\nimport { Utils } from './utils';\r\nimport { Sound } from './enums/sound';\r\nimport { BoardLogic } from './board-logic';\r\nimport { Timer } from './timer';\r\nimport { PlayerNameSection } from './player-name-section';\r\nimport { GameOptions } from './game-options';\r\nimport { Dialog } from './dialog/dialog';\r\n\r\nexport abstract class Game {\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    protected board: Array<Array<Dot>> = new Array(BoardLogic.columns);\r\n\r\n    private exitBtn: HTMLButtonElement;\r\n    protected playerNameSection: PlayerNameSection;\r\n\r\n    protected turn: Dot = Dot.Red;\r\n\r\n    public onGameEnd: Function;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n    private colOffset: number;\r\n    private static verticalOffset: number = 70;\r\n\r\n    protected timer: Timer;\r\n\r\n    protected constructor(options: GameOptions) {\r\n        this.canvas = document.getElementById(options.canvasId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        BoardLogic.initBoard(this.board);\r\n\r\n        if (options.exitBtnId) {\r\n            this.exitBtn = document.getElementById(options.exitBtnId) as HTMLButtonElement;\r\n        }\r\n\r\n        if (options.timerId) {\r\n            this.timer = new Timer(options.timerId);\r\n        }\r\n\r\n        if (options.playerRedId && options.playerGreenId) {\r\n            this.playerNameSection = new PlayerNameSection(options.playerRedId, options.playerGreenId);\r\n        }\r\n    }\r\n\r\n    protected start() {\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.printPlayerNames();\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n\r\n        this.resizeCanvas();\r\n        this.setGameEvents();\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, Game.verticalOffset, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = BoardLogic.columns - 1; col >= 0; col--) {\r\n            for (let row = BoardLogic.rows - 1; row >= 0; row--) {\r\n                this.context.fillStyle = this.board[col][row];\r\n                this.drawCircle(col, row);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.addEventListener('click', this.canvasClick, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.addEventListener('click', this.exit);\r\n    }\r\n\r\n    protected abstract canvasMousemove(event: MouseEvent): void;\r\n    protected abstract canvasClick(event: MouseEvent): void;\r\n\r\n    protected getColumnFromCursorPosition(event: MouseEvent): number {\r\n        let position = Position.getCursorPosition(event, this.canvas);\r\n        let column = Math.round((position.x - this.colOffset) / this.colGap);\r\n        return column;\r\n    }\r\n\r\n    protected switchTurn() {\r\n        if (this.turn === Dot.Red) {\r\n            this.turn = Dot.Green;\r\n        } else if (this.turn === Dot.Green) {\r\n            this.turn = Dot.Red;\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.indicateTurn(this.turn);\r\n        }\r\n    }\r\n\r\n    protected moveDot(column: number) {\r\n        this.clearUpper();\r\n        this.context.fillStyle = this.turn;\r\n        this.paintDotToDrop(column);\r\n    }\r\n\r\n    protected landDot(column: number) {\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.Empty) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            let r: number;\r\n            for (r = BoardLogic.rows - 1; r >= 0; r--) {\r\n                if (this.board[column][r] === Dot.Empty) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.context.fillStyle = this.turn;\r\n            this.drawCircle(column, r);\r\n            \r\n            let dotCount = BoardLogic.countConsecutiveDots(this.board, column, row, this.turn);\r\n\r\n            if (dotCount >= 4) {\r\n                let winner: string = '';\r\n\r\n                if (this.playerNameSection) {\r\n                    if (this.turn === Dot.Red) {\r\n                        winner = this.playerNameSection.getPlayerRed() + ' (Red)';\r\n                    } else if (this.turn === Dot.Green) {\r\n                        winner = this.playerNameSection.getPlayerGreen() + ' (Green)';\r\n                    }\r\n                }\r\n\r\n                this.showWinDialog(winner);\r\n                this.closeGameAfterWinning();\r\n            } else if (BoardLogic.isBoardFull(this.board)) {\r\n                let message: string = '';\r\n                if (this.playerNameSection) {\r\n                    message += this.playerNameSection.getPlayerRed() + ' (Red) and ' + this.playerNameSection.getPlayerGreen() + ' (Green)';\r\n                }\r\n                message += ' are tied!';\r\n                Dialog.notify([message]);\r\n                this.closeGameAfterWinning();\r\n            } else { // If game is still going on\r\n                this.switchTurn();\r\n                this.context.fillStyle = this.turn;\r\n                this.paintDotToDrop(column);\r\n                Utils.playSound(Sound.LandDot);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showWinDialog(winner: string) {\r\n        let winMsg: Array<string> = new Array();\r\n        winMsg.push(winner + ' wins!');\r\n        if (this.timer) {\r\n            winMsg.push('Time taken: ' + this.timer.getTimeInStringFormat());\r\n        }\r\n        Utils.playSound(Sound.Win);\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected closeGameAfterWinning() {\r\n        this.cleanUpEvents();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n\r\n        if (this.exitBtn) {\r\n            this.exitBtn.classList.add('hide');\r\n        }\r\n\r\n        this.resetValues();\r\n\r\n        // Run delegate function to return to main menu, in case it is defined\r\n        if (this.onGameEnd) {\r\n            setTimeout(this.onGameEnd, 3000);\r\n        }\r\n    }\r\n\r\n    private paintDotToDrop(column: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected abstract beforeUnload(event: Event);\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, Game.verticalOffset);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.canvasMousemove, false);\r\n        this.canvas.removeEventListener('click', this.canvasClick, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n        this.exitBtn.removeEventListener('click', this.exit);\r\n    }\r\n\r\n    protected exit() {\r\n        this.cleanUpEvents();\r\n        this.onGameEnd();\r\n        this.resetValues();\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.clear();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.stop();\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.width < 1000) {\r\n            this.circleRadius = 20; // Mobile/tablet\r\n        } else {\r\n            this.circleRadius = 30; // Desktop\r\n        }\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = this.canvas.height / BoardLogic.rows;\r\n        } else {\r\n            this.colGap = this.canvas.width / BoardLogic.columns;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.colOffset = this.colGap / 2;\r\n\r\n        this.paintBoard();\r\n    };\r\n\r\n    protected resetValues() {\r\n        this.turn = Dot.Red;\r\n        BoardLogic.initBoard(this.board);\r\n        \r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.reset();\r\n        }\r\n\r\n        if (this.timer) {\r\n            this.timer.reset();\r\n        }\r\n    }\r\n\r\n    private drawCircle(column: number, row: number) {\r\n        this.context.beginPath();\r\n        this.context.arc(this.colOffset + column * this.colGap, Game.verticalOffset * 2 + row * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    protected setTimer = () => {\r\n        if (this.timer) {\r\n            this.timer.set();\r\n        }\r\n    }\r\n\r\n    protected areBothPlayersConnected(): boolean {\r\n        return this.playerNameSection && this.playerNameSection.areBothPlayersConnected();\r\n    }\r\n\r\n}","import { GameMessage } from \"./game-message\";\r\n\r\nexport class ActionMessage extends GameMessage {\r\n    public constructor(column: number, action: string) {\r\n        super();\r\n        this.column = column;\r\n        this.action = action;\r\n    }\r\n\r\n    public column: number;\r\n    public action: string;\r\n}","export class GameMessage {\r\n\r\n    public static isInitialMessage(msg: GameMessage): boolean {\r\n        return (!isNaN(msg['gameId']) && msg['color']) || msg['opponentName'];\r\n    }\r\n\r\n    public static isInactivityMessage(msg: GameMessage): boolean {\r\n        return msg['endGameDueToInactivity'] && msg['currentTurn'];\r\n    }\r\n\r\n    public static isActionMessage(msg: GameMessage): boolean {\r\n        return msg['action'] && !isNaN(msg['column']);\r\n    }\r\n\r\n    public static isSkipTurnMessage(msg: GameMessage): boolean {\r\n        return msg['skipTurn'] && msg['currentTurn'];\r\n    }\r\n    \r\n}","import { Dot } from \"../enums/dot\";\r\nimport { GameMessage } from \"./game-message\";\r\n\r\nexport class InactivityMessage extends GameMessage {\r\n    public constructor(endGame: boolean, currentTurn: Dot) {\r\n        super();\r\n        this.endGameDueToInactivity = endGame;\r\n        this.currentTurn = currentTurn;\r\n    }\r\n\r\n    public endGameDueToInactivity: boolean;\r\n    public currentTurn: Dot;\r\n}","import { GameMessage } from \"./game-message\";\r\n\r\nexport class PlayerNameMessage extends GameMessage {\r\n    public constructor(name: string) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    public name: string;\r\n}","import { Dot } from \"../enums/dot\";\r\nimport { GameMessage } from \"./game-message\";\r\n\r\nexport class SkipTurnMessage extends GameMessage {\r\n    public constructor(skipTurn: boolean, currentTurn: Dot) {\r\n        super();\r\n        this.skipTurn = skipTurn;\r\n        this.currentTurn = currentTurn;\r\n    }\r\n\r\n    public skipTurn: boolean;\r\n    public currentTurn: Dot;\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { Sound } from \"./enums/sound\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\nimport { ActionMessage } from \"./models/action-message\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { InactivityMessage } from \"./models/inactivity-message\";\r\nimport { InitialMessage } from \"./models/initial-message\";\r\nimport { SkipTurnMessage } from \"./models/skip-turn-message\";\r\nimport { Socket } from \"./socket\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class NetworkGame extends Game {\r\n\r\n    private static instance: NetworkGame;\r\n\r\n    private socket: Socket;\r\n    private skipTurn: boolean;\r\n    private endGameDueToInactivity: boolean;\r\n    private turnCountDown: number;\r\n    private turnCountDownInterval: number;\r\n    private countdownSpan: HTMLSpanElement;\r\n    private static countDownMaxSeconds: number = 60;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n\r\n        if (options.countdownId) {\r\n            this.countdownSpan = document.getElementById(options.countdownId) as HTMLSpanElement;\r\n        }\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!NetworkGame.instance) {\r\n            NetworkGame.instance = new NetworkGame(options);\r\n        }\r\n        return NetworkGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.defineSocket();\r\n        this.startCountdown();\r\n        super.start();\r\n    }\r\n\r\n    private defineSocket() {\r\n        this.socket = new Socket();\r\n        this.socket.onMessageCallback = this.onSocketMessage;\r\n        this.socket.onErrorCallback = this.onSocketError;\r\n        this.socket.onInputPlayerNameInDialog = this.onInputPlayerNameInDialog;\r\n    }\r\n\r\n    private onSocketMessage = (messageData: GameMessage) => {\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            let data = messageData as InitialMessage;\r\n            if (data.opponentName && this.socket && this.playerNameSection) {\r\n                if (this.socket.getPlayerColor() === Dot.Red) {\r\n                    this.playerNameSection.setPlayerGreen(data.opponentName);\r\n                } else if (this.socket.getPlayerColor() === Dot.Green) {\r\n                    this.playerNameSection.setPlayerRed(data.opponentName);\r\n                }\r\n    \r\n                this.setTimer();\r\n            }\r\n    \r\n            if (data.color && this.socket && this.playerNameSection) {\r\n                if (data.color === Dot.Red) {\r\n                    this.playerNameSection.setPlayerRed(this.socket.getPlayerName());\r\n                } else {\r\n                    this.playerNameSection.setPlayerGreen(this.socket.getPlayerName());\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isInactivityMessage(messageData)) {\r\n            let data = messageData as InactivityMessage;\r\n            if (data.currentTurn !== this.socket.getPlayerColor()) {\r\n                Dialog.notify(['You win due to opponent inactivity!']);\r\n                Utils.playSound(Sound.Win);\r\n                this.closeGameAfterWinning();\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isActionMessage(messageData)) {\r\n            let data = messageData as ActionMessage;\r\n            if (data.action === 'mousemove') {\r\n                this.moveDot(data.column);\r\n            }\r\n    \r\n            if (data.action === 'click') {\r\n                this.landDot(data.column);\r\n            }\r\n        }\r\n        \r\n        if (GameMessage.isSkipTurnMessage(messageData)) {\r\n            let data = messageData as SkipTurnMessage;\r\n            if (data.skipTurn && data.currentTurn !== this.socket.getPlayerColor()) {\r\n                this.switchTurn();\r\n            }\r\n        }\r\n    };\r\n\r\n    private onSocketError = () => {\r\n        super.exit();\r\n    };\r\n\r\n    protected resetValues() {\r\n        super.resetValues();\r\n        this.stopCountdown();\r\n\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n\r\n            let data = new ActionMessage(column, 'mousemove');\r\n            this.socket.send(data);\r\n\r\n            this.endGameDueToInactivity = false;\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.socket && this.turn === this.socket.getPlayerColor() && this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n\r\n            let data = new ActionMessage(column, 'click');\r\n            this.socket.send(data);\r\n\r\n            this.skipTurn = false;\r\n\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        Dialog.confirm(['Network game in progress. Are you sure you want to quit?'], {\r\n            yesCallback: this.confirmExit,\r\n            noCallback: () => {}\r\n        });\r\n    };\r\n\r\n    private confirmExit = () => {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n        Dialog.closeAllOpenDialogs();\r\n\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = (event: Event) => {\r\n        // Display default dialog before closing\r\n        event.preventDefault();\r\n        event.returnValue = false; // Required by Chrome\r\n    };\r\n\r\n    protected showWinDialog(winner: string) {\r\n        let winMsg: Array<string> = new Array();\r\n        winMsg.push(winner + ' wins!');\r\n        if (this.timer) {\r\n            winMsg.push('Time taken: ' + this.timer.getTimeInStringFormat());\r\n        }\r\n        if (this.socket && this.socket.getPlayerColor() === this.turn) {\r\n            winMsg.push('You win!');\r\n            Utils.playSound(Sound.Win);\r\n        } else {\r\n            winMsg.push('You lose!');\r\n            Utils.playSound(Sound.Lose);\r\n        }\r\n        Dialog.notify(winMsg);\r\n    }\r\n\r\n    protected switchTurn() {\r\n        super.switchTurn();\r\n        this.resetCountdown();\r\n    }\r\n\r\n    private turnCountDownCallback = () => {\r\n        if (this.areBothPlayersConnected()) {\r\n            this.turnCountDown--;\r\n            this.countdownSpan.innerText = this.turnCountDown.toString();\r\n            this.adaptCountDownColor();\r\n        }\r\n\r\n        let playerColor: Dot = this.socket.getPlayerColor();\r\n        if (this.turn === playerColor && this.turnCountDown <= 0 && this.socket) {\r\n            if (this.endGameDueToInactivity) {\r\n                let data = new InactivityMessage(true, playerColor);\r\n                this.socket.send(data);\r\n\r\n                Dialog.notify(['You lose due to inactivity!']);\r\n                Utils.playSound(Sound.Lose);\r\n                this.closeGameAfterWinning();\r\n            } else if (this.skipTurn) {\r\n                this.switchTurn();\r\n\r\n                let data = new SkipTurnMessage(true, playerColor);\r\n                this.socket.send(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    private adaptCountDownColor() {\r\n        if (this.turnCountDown > NetworkGame.countDownMaxSeconds / 2) {\r\n            this.countdownSpan.classList.add('green-text');\r\n            this.countdownSpan.classList.remove('red-text');\r\n        } else {\r\n            this.countdownSpan.classList.remove('green-text');\r\n            this.countdownSpan.classList.add('red-text');\r\n        }\r\n    }\r\n\r\n    private startCountdown() {\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n        this.turnCountDown = NetworkGame.countDownMaxSeconds;\r\n        this.turnCountDownInterval = window.setInterval(this.turnCountDownCallback, 1000);\r\n    }\r\n\r\n    private stopCountdown() {\r\n        clearInterval(this.turnCountDownInterval);\r\n        this.countdownSpan.innerText = '';\r\n    }\r\n\r\n    private resetCountdown() {\r\n        this.turnCountDown = NetworkGame.countDownMaxSeconds;\r\n        this.skipTurn = true;\r\n        this.endGameDueToInactivity = true;\r\n    }\r\n\r\n    private onInputPlayerNameInDialog = (playerName: string) => {\r\n        if (this.socket) {\r\n            if (this.socket.getPlayerColor() === Dot.Red) {\r\n                this.playerNameSection.setPlayerRed(playerName);\r\n            } else {\r\n                this.playerNameSection.setPlayerGreen(playerName);\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\n\r\nexport class PlayerNameSection {\r\n    private playerRedSpan: HTMLSpanElement;\r\n    private playerGreenSpan: HTMLSpanElement;\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public constructor(playerRedId: string, playerGreenId: string) {\r\n        if (playerRedId) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public setUpPlayerNames(action: Function) {\r\n        if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n            Dialog.prompt(['Please enter player names!'], {\r\n                onOK: () => this.onPromptOK(action),\r\n                inputs: [\r\n                    {\r\n                        name: 'red',\r\n                        type: 'text'\r\n                    },\r\n                    {\r\n                        name: 'green',\r\n                        type: 'text'\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    private onPromptOK = (action: Function): string => {\r\n        let redInput = document.getElementById('red') as HTMLInputElement;\r\n        let greenInput = document.getElementById('green') as HTMLInputElement;\r\n        if (redInput && greenInput) {\r\n            if (redInput.value && greenInput.value && redInput.value.trim() && greenInput.value.trim()) {\r\n                this.playerRed = redInput.value;\r\n                this.playerGreen = greenInput.value;\r\n                this.printPlayerNames();\r\n                action();\r\n                return null;\r\n            } else {\r\n                return 'No empty fields allowed!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    public printPlayerNames() {\r\n        const waiting = 'Waiting to connect...';\r\n        if (this.playerGreenSpan) {\r\n            if (!this.playerGreen) {\r\n                this.playerGreenSpan.innerText = waiting;\r\n            } else {\r\n                this.playerGreenSpan.innerText = this.playerGreen;\r\n            }\r\n        }\r\n        if (this.playerRedSpan) {\r\n            if (!this.playerRed) {\r\n                this.playerRedSpan.innerText = waiting;\r\n            } else {\r\n                this.playerRedSpan.innerText = this.playerRed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.playerRed = null;\r\n        this.playerGreen = null;\r\n    }\r\n\r\n    public getPlayerRed(): string {\r\n        return this.playerRed;\r\n    }\r\n\r\n    public getPlayerGreen(): string {\r\n        return this.playerGreen;\r\n    }\r\n\r\n    public areBothPlayersConnected(): boolean {\r\n        return !!this.playerRed && !!this.playerGreen;\r\n    }\r\n\r\n    public saveIntoLocalStorage() {\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n    }\r\n\r\n    public setFromLocalStorage() {\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n    }\r\n\r\n    public setPlayerRed(playerName: string) {\r\n        this.playerRed = playerName;\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    public setPlayerGreen(playerName: string) {\r\n        this.playerGreen = playerName;\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n    }\r\n\r\n    public indicateTurn(turn: Dot) {\r\n        if (turn === Dot.Red) {\r\n            this.playerRedSpan.classList.add('currentTurn');\r\n            this.playerGreenSpan.classList.remove('currentTurn');\r\n        } else if (turn === Dot.Green) {\r\n            this.playerGreenSpan.classList.add('currentTurn');\r\n            this.playerRedSpan.classList.remove('currentTurn');\r\n        }\r\n    }\r\n\r\n}","export class Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static getCursorPosition(event, canvas): Position {\r\n        let x: number;\r\n        let y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { Game } from \"./game\";\r\nimport { GameOptions } from \"./game-options\";\r\n\r\nexport class SameDeviceGame extends Game {\r\n\r\n    private static instance: SameDeviceGame;\r\n\r\n    private constructor(options: GameOptions) {\r\n        super(options);\r\n    }\r\n\r\n    public static getInstance(options: GameOptions): Game {\r\n        if (!SameDeviceGame.instance) {\r\n            SameDeviceGame.instance = new SameDeviceGame(options);\r\n        }\r\n        return SameDeviceGame.instance;\r\n    }\r\n\r\n    public start() {\r\n        this.checkGameData();\r\n    }\r\n\r\n    private onGameDataCheck() {\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setUpPlayerNames(this.setTimer);\r\n        }\r\n\r\n        if (this.areBothPlayersConnected()) {\r\n            this.setTimer();\r\n        }\r\n\r\n        super.start();\r\n    }\r\n\r\n    private checkGameData() {\r\n        let board = localStorage.getItem('board');\r\n        let nextTurn = localStorage.getItem('nextTurn');\r\n        \r\n        if (board && nextTurn) {\r\n            Dialog.confirm(['Do you want to continue playing the previous game?'], {\r\n                yesCallback: this.continuePreviousGame,\r\n                noCallback: this.cancelPreviousGame\r\n            });\r\n        } else {\r\n            this.onGameDataCheck();\r\n        }\r\n    }\r\n\r\n    private continuePreviousGame = () => {\r\n        this.restoreLastGame();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private cancelPreviousGame = () => {\r\n        localStorage.clear();\r\n        this.onGameDataCheck();\r\n    };\r\n\r\n    private restoreLastGame() {\r\n        let nextTurn: string = localStorage.getItem('nextTurn');\r\n        if (nextTurn === Dot.Red) {\r\n            this.turn = Dot.Red;\r\n        } else if (nextTurn === Dot.Green) {\r\n            this.turn = Dot.Green;\r\n        }\r\n        \r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n\r\n        if (this.timer) {\r\n            this.timer.setSecondsRunningFromLocalStorage();\r\n        }\r\n\r\n        if (this.playerNameSection) {\r\n            this.playerNameSection.setFromLocalStorage();\r\n        }\r\n    }\r\n\r\n    private saveGame() {\r\n        if (this.areBothPlayersConnected()) {\r\n            localStorage.setItem('nextTurn', this.turn.toString());\r\n            localStorage.setItem('board', JSON.stringify(this.board));\r\n\r\n            if (this.playerNameSection) {\r\n                this.playerNameSection.saveIntoLocalStorage();\r\n            }\r\n\r\n            if (this.timer) {\r\n                this.timer.saveSecondsRunningToLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected canvasMousemove = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.moveDot(column);\r\n        }\r\n    };\r\n\r\n    protected canvasClick = (event: MouseEvent) => {\r\n        if (this.areBothPlayersConnected()) {\r\n            let column = this.getColumnFromCursorPosition(event);\r\n            this.landDot(column);\r\n        }\r\n    };\r\n\r\n    public exit = () => {\r\n        this.saveGame();\r\n        Dialog.closeAllOpenDialogs();\r\n        super.exit();\r\n    };\r\n\r\n    protected beforeUnload = () => {\r\n        this.saveGame();\r\n    }\r\n\r\n    private pageVisibilityChange = () => {\r\n        if (this.timer) {\r\n            this.timer.pauseWhenDocumentHidden();\r\n        }\r\n    };\r\n\r\n    protected closeGameAfterWinning() {\r\n        // Clear game data\r\n        localStorage.clear();\r\n\r\n        super.closeGameAfterWinning();\r\n    }\r\n\r\n    protected setGameEvents() {\r\n        super.setGameEvents();\r\n        document.addEventListener('visibilitychange', this.pageVisibilityChange);\r\n    }\r\n\r\n    protected cleanUpEvents() {\r\n        super.cleanUpEvents();\r\n        document.removeEventListener('changevisibility', this.pageVisibilityChange);\r\n    }\r\n\r\n}","import { Dialog } from \"./dialog/dialog\";\r\nimport { Dot } from \"./enums/dot\";\r\nimport { GameMessage } from \"./models/game-message\";\r\nimport { InitialMessage } from \"./models/initial-message\";\r\nimport { PlayerNameMessage } from \"./models/player-name-message\";\r\nimport { Utils } from \"./utils\";\r\n\r\nexport class Socket {\r\n    private webSocket: WebSocket;\r\n    private playerColor: Dot;\r\n    private playerName: string;\r\n    private gameId: number;\r\n    public onMessageCallback: Function;\r\n    public onErrorCallback: Function;\r\n    public onInputPlayerNameInDialog: Function;\r\n\r\n    public constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    private connect() {\r\n        let url: string;\r\n        if (Utils.isLocal()) {\r\n            url = 'ws://localhost:3000/';\r\n        } else {\r\n            url = 'wss://daniels-connect4-server.adaptable.app/';\r\n        }\r\n\r\n        if (this.playerColor && !isNaN(this.gameId)) {\r\n            url += '?playerColor=' + this.playerColor + '&gameId=' + this.gameId + '&playerName=' + this.playerName;\r\n        }\r\n\r\n        this.webSocket = new WebSocket(url);\r\n\r\n        this.webSocket.onmessage = this.onMessage;\r\n        this.webSocket.onerror = this.onError;\r\n        this.webSocket.onclose = this.onClose;\r\n    }\r\n\r\n    public send(data: GameMessage) {\r\n        this.webSocket.send(JSON.stringify(data));\r\n    }\r\n\r\n    public close() {\r\n        this.webSocket.onclose = null;\r\n        this.webSocket.onmessage = null;\r\n        this.webSocket.onerror = null;\r\n        this.webSocket.close();\r\n    }\r\n\r\n    public getPlayerColor(): Dot {\r\n        return this.playerColor;\r\n    }\r\n\r\n    public getPlayerName(): string {\r\n        return this.playerName;\r\n    }\r\n\r\n    private onMessage = (event: MessageEvent) => {\r\n        let messageData: GameMessage = JSON.parse(event.data);\r\n\r\n        if (GameMessage.isInitialMessage(messageData)) {\r\n            let data = messageData as InitialMessage;\r\n\r\n            if (!this.gameId) {\r\n                this.gameId = data.gameId;\r\n            }\r\n            \r\n            if (!this.playerColor) {\r\n                this.playerColor = data.color;\r\n    \r\n                let color: string;\r\n                if (this.playerColor === Dot.Red) {\r\n                    color = 'red';\r\n                } else {\r\n                    color = 'green';\r\n                }\r\n    \r\n                Dialog.prompt(['You are ' + color + '. Please enter your name.'], {\r\n                    onOK: () => this.onPlayerNameInput(color),\r\n                    inputs: [{\r\n                        name: color,\r\n                        type: 'text'\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.onMessageCallback) {\r\n            this.onMessageCallback(messageData);\r\n        }\r\n    };\r\n\r\n    private onPlayerNameInput = (color: string): string => {\r\n        let playerNameField = document.getElementById(color) as HTMLInputElement;\r\n\r\n        if (playerNameField) {\r\n            if (playerNameField.value && playerNameField.value.trim()) {\r\n                this.playerName = playerNameField.value;\r\n                this.onInputPlayerNameInDialog(this.playerName);\r\n                let data = new PlayerNameMessage(this.playerName);\r\n                this.send(data);\r\n                return null;\r\n            } else {\r\n                return 'Field may not be empty!';\r\n            }\r\n        } else {\r\n            return 'Field not implemented! Please fix this stupid bug!';\r\n        }\r\n    };\r\n\r\n    private onError = () => {\r\n        this.onErrorCallback();\r\n        Dialog.notify(['Problem connecting to server!']);\r\n    };\r\n\r\n    private onClose = () => {\r\n        this.connect();\r\n    };\r\n}","export class Timer {\r\n\r\n    private secondsRunning: number;\r\n    private timeout: number;\r\n    private timerSpan: HTMLSpanElement;\r\n\r\n    public constructor(timerId: string) {\r\n        this.timerSpan = document.getElementById(timerId) as HTMLSpanElement;\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        \r\n        if (!this.timerSpan.classList.contains('hide')) {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        } else {\r\n            clearTimeout(this.timeout);\r\n        }\r\n    };\r\n\r\n    public set() {\r\n        if (this.timerSpan) {\r\n            this.timerSpan.classList.remove('hide');\r\n            this.timerCallback();\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timerSpan.innerText = '';\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    public pauseWhenDocumentHidden() {\r\n        if (document.hidden) {\r\n            clearTimeout(this.timeout);\r\n        } else {\r\n            this.timeout = window.setTimeout(this.timerCallback, 1000);\r\n        }\r\n    }\r\n\r\n    public getTimeInStringFormat(): string {\r\n        if (this.timerSpan) {\r\n            return this.timerSpan.innerText;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public saveSecondsRunningToLocalStorage() {\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    public setSecondsRunningFromLocalStorage() {\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public reset() {\r\n        this.secondsRunning = 0;\r\n    }\r\n\r\n}","export class Utils {\r\n    public static isLocal(): boolean {\r\n        return location.protocol === 'file:'\r\n            || location.hostname === 'localhost';\r\n    }\r\n\r\n    public static playSound(path: string) {\r\n        let audio = new Audio(path);\r\n        audio.play();\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GameMode } from \"./lib/enums/game-mode\";\r\nimport { Game } from \"./lib/game\";\r\nimport { GameOptions } from \"./lib/game-options\";\r\nimport { NetworkGame } from \"./lib/network-game\";\r\nimport { SameDeviceGame } from \"./lib/same-device-game\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu') as HTMLDivElement;\r\nlet samePCBtn = document.getElementById('samePC') as HTMLButtonElement;\r\nlet networkBtn = document.getElementById('network') as HTMLButtonElement;\r\nlet creditsBtn = document.getElementById('credits') as HTMLButtonElement;\r\n\r\nlet exitBtn = document.getElementById('exitBtn') as HTMLButtonElement;\r\n\r\nlet canvas = document.getElementById('board') as HTMLCanvasElement;\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    initGame(GameMode.SamePC);\r\n}, false);\r\n\r\nnetworkBtn.addEventListener('click', () => {\r\n    initGame(GameMode.Network);\r\n}, false);\r\n\r\ncreditsBtn.addEventListener('click', () => {\r\n    open('contributors.html');\r\n}, false);\r\n\r\nfunction initGame(mode: GameMode) {\r\n    clearError();\r\n\r\n    try {\r\n        let options: GameOptions = {\r\n            canvasId: 'board',\r\n            exitBtnId: 'exitBtn',\r\n            timerId: 'timer',\r\n            playerRedId: 'playerRed',\r\n            playerGreenId: 'playerGreen',\r\n            countdownId: 'countdown'\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            connect4 = NetworkGame.getInstance(options);\r\n        } else {\r\n            connect4 = SameDeviceGame.getInstance(options);\r\n        }\r\n        connect4.onGameEnd = () => {\r\n            menu.classList.remove('hide');\r\n            canvas.classList.add('hide');\r\n            exitBtn.classList.add('hide');\r\n        };\r\n        if (mode === GameMode.Network) {\r\n            (connect4 as NetworkGame).start();\r\n        } else {\r\n            (connect4 as SameDeviceGame).start();\r\n        }\r\n    \r\n        menu.classList.add('hide');\r\n        canvas.classList.remove('hide');\r\n        exitBtn.classList.remove('hide');\r\n    } catch (ex) {\r\n        showError('Problem encountered!');\r\n        // To-do: include logging\r\n    }\r\n}\r\n\r\nfunction showError(message: string) {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.remove('hide');\r\n        errorMessageDiv.innerText = message;\r\n    }\r\n}\r\n\r\nfunction clearError() {\r\n    let errorMessageDiv = document.getElementById('errorMessage') as HTMLDivElement;\r\n    if (errorMessageDiv) {\r\n        errorMessageDiv.classList.add('hide');\r\n    }\r\n}"],"names":["initBoard","board","col","BoardLogic","columns","Array","rows","row","Dot","Empty","countConsecutiveDots","column","currentTurn","count","dotCount","rowCount","colCount","isBoardFull","full","modal","text","type","options","document","createElement","classList","add","textContainer","this","appendText","appendChild","btnContainer","DialogType","Confirmation","appendBtn","yesCallback","closeModal","noCallback","Notification","Prompt","appendInputs","inputs","error","onOK","appendError","body","container","callback","bgColor","btn","innerText","addEventListener","inputContainer","i","length","label","name","input","id","appendBrElement","br","errorDiv","getElementById","p","contains","removeChild","confirm","Dialog","notify","prompt","closeAllOpenDialogs","dialogs","getElementsByClassName","GameMode","Sound","turn","Red","resizeCanvas","canvas","height","window","innerHeight","width","innerWidth","circleRadius","colGap","rowGap","colOffset","paintBoard","setTimer","timer","set","canvasId","context","getContext","exitBtnId","exitBtn","timerId","Timer","playerRedId","playerGreenId","playerNameSection","PlayerNameSection","start","printPlayerNames","indicateTurn","setGameEvents","boardGradient","createLinearGradient","addColorStop","fillStyle","fillRect","Game","verticalOffset","drawCircle","canvasMousemove","canvasClick","beforeUnload","exit","getColumnFromCursorPosition","event","position","Position","getCursorPosition","Math","round","x","switchTurn","Green","moveDot","clearUpper","paintDotToDrop","landDot","r","winner","getPlayerRed","getPlayerGreen","showWinDialog","closeGameAfterWinning","message","Utils","playSound","LandDot","winMsg","push","getTimeInStringFormat","Win","cleanUpEvents","clear","stop","resetValues","onGameEnd","setTimeout","beginPath","arc","PI","closePath","fill","clearRect","removeEventListener","reset","areBothPlayersConnected","action","GameMessage","ActionMessage","isInitialMessage","msg","isNaN","isInactivityMessage","isActionMessage","isSkipTurnMessage","endGame","endGameDueToInactivity","InactivityMessage","PlayerNameMessage","skipTurn","SkipTurnMessage","onSocketMessage","messageData","data","opponentName","socket","getPlayerColor","setPlayerGreen","setPlayerRed","color","getPlayerName","onSocketError","send","confirmExit","close","preventDefault","returnValue","turnCountDownCallback","turnCountDown","countdownSpan","toString","adaptCountDownColor","playerColor","Lose","onInputPlayerNameInDialog","playerName","countdownId","getInstance","NetworkGame","instance","defineSocket","startCountdown","Socket","onMessageCallback","onErrorCallback","stopCountdown","resetCountdown","countDownMaxSeconds","remove","turnCountDownInterval","setInterval","clearInterval","onPromptOK","redInput","greenInput","value","trim","playerRed","playerGreen","playerRedSpan","playerGreenSpan","setUpPlayerNames","localStorage","getItem","waiting","saveIntoLocalStorage","setItem","setFromLocalStorage","y","undefined","pageX","pageY","clientX","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","continuePreviousGame","restoreLastGame","onGameDataCheck","cancelPreviousGame","saveGame","pageVisibilityChange","pauseWhenDocumentHidden","SameDeviceGame","checkGameData","nextTurn","JSON","parse","setSecondsRunningFromLocalStorage","stringify","saveSecondsRunningToLocalStorage","onMessage","gameId","onPlayerNameInput","playerNameField","onError","onClose","connect","url","isLocal","webSocket","WebSocket","onmessage","onerror","onclose","timerCallback","secondsRunning","minutes","floor","seconds","timerSpan","clearTimeout","timeout","hidden","parseInt","location","protocol","hostname","path","Audio","play","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","connect4","menu","samePCBtn","networkBtn","creditsBtn","initGame","mode","errorMessageDiv","Network","ex","showError","SamePC","open"],"sourceRoot":""}