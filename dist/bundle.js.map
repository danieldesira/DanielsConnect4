{"version":3,"file":"bundle.js","mappings":"uBAGIA,EAHJ,EACA,EAIIC,EACAC,EAEAC,EAEAC,E,eCVJ,IAAYC,E,+DAAAA,EAAA,EAAAA,MAAA,EAAAA,IAAG,KACX,mBACA,iBACA,oB,cCHJ,IAAYC,E,oEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAChB,sB,+ECDJ,aACA,SAEA,aA6BI,WAAYC,EACAC,EACAC,EACAC,EACAC,QAHA,IAAAH,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,WACA,IAAAC,IAAAA,EAAA,MAJZ,WAtBQ,KAAAC,MAA2B,IAAIC,MAAMC,EAAKC,SAO1C,KAAAC,KAAY,EAAAX,IAAIY,IA0IhB,KAAAC,QAAU,SAACC,GACf,EAAKC,aAEL,IAAIC,EAAqB,EAAKC,kBAAkBH,GAC5CI,EAASC,KAAKC,MAAMJ,EAASK,EAAI,IAAM,EAAKC,OAE5C,EAAKX,MAAQ,EAAAX,IAAIY,IACjB,EAAKW,QAAQC,UAAY,MAClB,EAAKb,MAAQ,EAAAX,IAAIyB,QACxB,EAAKF,QAAQC,UAAY,eAG7B,EAAKD,QAAQG,YACb,EAAKH,QAAQI,IAAI,GAAKT,EAAS,EAAKI,OAAQ,EAAKM,OAAS,EAAKC,aAAc,EAAKA,aAAc,EAAG,EAAIV,KAAKW,IAC5G,EAAKP,QAAQQ,YACb,EAAKR,QAAQS,MACjB,EAEQ,KAAAC,QAAU,SAACnB,GACf,IAEIoB,EAFAlB,EAAW,EAAKC,kBAAkBH,GAClCI,EAASC,KAAKC,OAAOJ,EAASK,EAAI,IAAM,EAAKC,QAGjD,GAAI,EAAKf,MAAMW,GAAQ,KAAO,EAAAlB,IAAImC,MAAO,CAGrC,IAAK,IAAIC,EAAI3B,EAAK4B,KAAO,EAAGD,GAAK,EAAGA,IAChC,GAA8B,IAA1B,EAAK7B,MAAMW,GAAQkB,GAAU,CAC7B,EAAK7B,MAAMW,GAAQkB,GAAK,EAAKzB,KAC7BuB,EAAME,EACN,K,CAmBR,GAfI,EAAKzB,OAAS,EAAAX,IAAIY,IAClB,EAAKW,QAAQC,UAAY,MAClB,EAAKb,OAAS,EAAAX,IAAIyB,QACzB,EAAKF,QAAQC,UAAY,eAI7B,EAAKD,QAAQG,YACb,EAAKH,QAAQI,IAAI,GAAKT,EAAS,EAAKI,OAAQ,IAAMc,EAAI,EAAKR,OAAQ,EAAKC,aAAc,EAAa,EAAVV,KAAKW,IAC9F,EAAKP,QAAQQ,YACb,EAAKR,QAAQS,OAEE,EAAKM,cAAcpB,EAAQgB,GAG3B,EAAG,CACd,IAAIK,EAAiB,GACjB,EAAK5B,OAAS,EAAAX,IAAIY,IAClB2B,EAAS,EAAKC,UAAY,SACnB,EAAK7B,OAAS,EAAAX,IAAIyB,QACzBc,EAAS,EAAKE,YAAc,YAG5B,EAAK3C,SACL,EAAKA,QAAQ4C,UAAUC,IAAI,QAG/B,IAAIC,EAAiBL,EAAS,SAC1B,EAAKM,YACLD,GAAU,iBAAmB,EAAKC,UAAUC,WAEhDC,MAAMH,GAGNI,aAAaC,QAEb,EAAKC,gBACL,EAAKC,YACL,EAAKC,wBAGkBC,IAAnB,EAAKC,WAA8C,OAAnB,EAAKA,WACrCC,WAAW,EAAKD,UAAW,I,CAK/B,EAAK3C,OAAS,EAAAX,IAAIY,IAClB,EAAKD,KAAO,EAAAX,IAAIyB,MACT,EAAKd,OAAS,EAAAX,IAAIyB,QACzB,EAAKd,KAAO,EAAAX,IAAIY,I,CAI5B,EAEQ,KAAA4C,aAAe,WACnB,EAAKC,UACT,EAEQ,KAAAC,cAAgB,WACpB,EAAKC,iBACL,IAAIC,EAAkBzC,KAAK0C,MAAM,EAAKF,eAAiB,IACnDG,EAAkB,EAAKH,eAAiB,GAC5C,EAAKd,UAAUC,UAAYc,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,CAC3E,EA+HQ,KAAAC,aAAe,WACnB,EAAKhE,OAAOiE,OAASC,OAAOC,YAAc,IAC1C,EAAKnE,OAAOoE,MAAQF,OAAOG,WAEvB,EAAKrE,OAAOiE,OAAS,EAAKjE,OAAOoE,OACjC,EAAKtC,aAAeV,KAAKkD,IAAI,EAAKtE,OAAOoE,MAAQ1D,EAAKC,QAAU,GAAI,IACpE,EAAKY,OAAS,GACd,EAAKM,OAAS,EAAK7B,OAAOiE,OAASvD,EAAK4B,KAAO,EAAKR,eAEpD,EAAKA,aAAeV,KAAKkD,IAAI,EAAKtE,OAAOiE,OAASvD,EAAK4B,KAAO,GAAI,IAClE,EAAKf,OAAS,EAAKvB,OAAOoE,MAAQ1D,EAAKC,QAAU,EAAKmB,aACtD,EAAKD,OAAS,IAGlB,EAAK0C,YACT,EAvWIC,KAAKxE,OAASyE,SAASC,eAAevE,GACtCqE,KAAKhD,QAAUgD,KAAKxE,OAAO2E,WAAW,MAGtC,IAAK,IAAIC,EAAM,EAAGA,EAAMlE,EAAKC,QAASiE,IAAO,CACzCJ,KAAKhE,MAAMoE,GAAO,IAAInE,MAAMC,EAAK4B,MACjC,IAAK,IAAIH,EAAM,EAAGA,EAAMzB,EAAK4B,KAAMH,IAC/BqC,KAAKhE,MAAMoE,GAAKzC,GAAO,EAAAlC,IAAImC,K,CAIjB,OAAdhC,IACAoE,KAAKzE,QAAU0E,SAASC,eAAetE,IAG3B,OAAZC,IACAmE,KAAK1B,UAAY2B,SAASC,eAAerE,GACzCmE,KAAKZ,eAAiB,GAGN,OAAhBtD,IACAkE,KAAKK,cAAgBJ,SAASC,eAAepE,IAG3B,OAAlBC,IACAiE,KAAKM,gBAAkBL,SAASC,eAAenE,GAEvD,CA8UJ,OA5UW,YAAAwE,MAAP,WACIP,KAAKR,eACLQ,KAAKQ,gBACLR,KAAKS,mBACLT,KAAKU,gBACLV,KAAKW,UACT,EAEQ,YAAAH,cAAR,WACI,GAAIR,KAAKY,OAAS,EAAAlF,SAASmF,QAAS,CAChC,IAAI7E,EAAQyC,aAAaqC,QAAQ,SAC7BC,EAAWtC,aAAaqC,QAAQ,YAEhC9E,GAAS+E,IACKC,QAAQ,gEAElBhB,KAAKiB,kBAELxC,aAAaC,Q,CAI7B,EAEQ,YAAA+B,iBAAR,WACQT,KAAKY,OAAS,EAAAlF,SAASmF,UAClBpC,aAAaqC,QAAQ,cAAiBrC,aAAaqC,QAAQ,iBAC5Dd,KAAK/B,UAAYiD,OAAO,qCACxBlB,KAAK9B,YAAcgD,OAAO,yCAK9BlB,KAAKM,kBACLN,KAAKM,gBAAgB/B,UAAYyB,KAAK9B,aAEtC8B,KAAKK,gBACLL,KAAKK,cAAc9B,UAAYyB,KAAK/B,UAE5C,EAEQ,YAAA8B,WAAR,WACI,IAAIoB,EAAgBnB,KAAKhD,QAAQoE,qBAAqB,EAAG,EAAGpB,KAAKxE,OAAOoE,MAAO,GAC/EuB,EAAcE,aAAa,EAAG,QAC9BF,EAAcE,aAAa,EAAG,QAC9BrB,KAAKhD,QAAQC,UAAYkE,EACzBnB,KAAKhD,QAAQsE,SAAS,EAAG,GAAItB,KAAKxE,OAAOoE,MAAOI,KAAKxE,OAAOiE,QAE5D,IAAK,IAAIW,EAAMlE,EAAKC,QAAU,EAAGiE,GAAO,EAAGA,IACvC,IAAK,IAAIzC,EAAMzB,EAAK4B,KAAO,EAAGH,GAAO,EAAGA,IAChCqC,KAAKhE,MAAMoE,GAAKzC,KAAS,EAAAlC,IAAIY,IAC7B2D,KAAKhD,QAAQC,UAAY,MAClB+C,KAAKhE,MAAMoE,GAAKzC,KAAS,EAAAlC,IAAIyB,MACpC8C,KAAKhD,QAAQC,UAAY,cAEzB+C,KAAKhD,QAAQC,UAAY,QAG7B+C,KAAKhD,QAAQG,YACb6C,KAAKhD,QAAQI,IAAI,GAAKgD,EAAMJ,KAAKjD,OAAQ,IAAMY,EAAMqC,KAAK3C,OAAQ2C,KAAK1C,aAAc,EAAG,EAAIV,KAAKW,IACjGyC,KAAKhD,QAAQQ,YACbwC,KAAKhD,QAAQS,MAGzB,EAEQ,YAAAf,kBAAR,SAA0BH,GACtB,IAAIO,EACAyE,EAWJ,YAVoBzC,IAAhBvC,EAAMiF,YAAuC1C,IAAhBvC,EAAMkF,OACnC3E,EAAIP,EAAMiF,MACVD,EAAIhF,EAAMkF,QAGV3E,EAAIP,EAAMmF,QAAUzB,SAAS0B,KAAKC,WAAa3B,SAAS4B,gBAAgBD,WACxEL,EAAIhF,EAAMuF,QAAU7B,SAAS0B,KAAKI,UAAY9B,SAAS4B,gBAAgBE,WAE3EjF,GAAKkD,KAAKxE,OAAOwG,WACjBT,GAAKvB,KAAKxE,OAAOyG,UACV,IAAIC,EAASpF,EAAGyE,EAC3B,EAEQ,YAAAb,cAAR,WACIV,KAAKxE,OAAO2G,iBAAiB,YAAanC,KAAK1D,SAAS,GACxD0D,KAAKxE,OAAO2G,iBAAiB,QAASnC,KAAKtC,SAAS,GACpDgC,OAAOyC,iBAAiB,eAAgBnC,KAAKf,cAC7CS,OAAOyC,iBAAiB,SAAUnC,KAAKR,aAC3C,EAuGQ,YAAAhD,WAAR,WACIwD,KAAKhD,QAAQoF,UAAU,EAAG,EAAGpC,KAAKxE,OAAOoE,MAAO,GACpD,EAEQ,YAAA7B,cAAR,SAAsBpB,EAAgBgB,GAKlC,IAJA,IAAI0E,EAAgB1E,EAChB2E,EAAmB,EAGhBA,EAAW,GAAKD,EAAQnG,EAAK4B,MAAQkC,KAAKhE,MAAMW,GAAQ0F,KAAWrC,KAAK5D,MAC3EkG,IACAD,IAGJ,GAAIC,EAAW,EAAG,CAKd,IAFAA,EAAW,EACXD,EAAQ1F,EACD0F,EAAQnG,EAAKC,SAAW6D,KAAKhE,MAAMqG,GAAO1E,KAASqC,KAAK5D,MAC3DkG,IACAD,IAGJ,IADAA,EAAQ1F,EAAS,EACV0F,GAAS,GAAKrC,KAAKhE,MAAMqG,GAAO1E,KAASqC,KAAK5D,MACjDkG,IACAD,IAIJ,GAAIC,EAAW,EAAG,CACdA,EAAW,EAGX,IAFA,IAAIC,EAAmB5E,EAAM,EACzB6E,EAAmB7F,EAAS,EACzB2F,EAAW,GAAKC,GAAY,GAAMC,EAAWtG,EAAKC,SAAW6D,KAAKhE,MAAMwG,GAAUD,KAAcvC,KAAK5D,MACxGkG,IACAE,IACAD,IAIJ,IAFAC,EAAW7F,EACX4F,EAAW5E,EACJ2E,EAAW,GAAKC,EAAWrG,EAAK4B,MAAQ0E,GAAY,GAAKxC,KAAKhE,MAAMwG,GAAUD,KAAcvC,KAAK5D,MACpGkG,IACAE,IACAD,IAGJ,GAAID,EAAW,EAAG,CAId,IAHAA,EAAW,EACXC,EAAW5E,EAAM,EACjB6E,EAAW7F,EAAS,EACb2F,EAAW,GAAKC,GAAY,GAAKC,GAAY,GAAKxC,KAAKhE,MAAMwG,GAAUD,KAAcvC,KAAK5D,MAC7FkG,IACAE,IACAD,IAIJ,IAFAC,EAAW7F,EACX4F,EAAW5E,EACJ2E,EAAW,GAAKC,EAAWrG,EAAK4B,MAAQ0E,EAAWtG,EAAKC,SAAW6D,KAAKhE,MAAMwG,GAAUD,KAAcvC,KAAK5D,MAC9GkG,IACAE,IACAD,G,GAMhB,OAAOD,CACX,EAEQ,YAAA3D,cAAR,WACIqB,KAAKxE,OAAOiH,oBAAoB,YAAazC,KAAK1D,SAAS,GAC3D0D,KAAKxE,OAAOiH,oBAAoB,QAASzC,KAAKtC,SAAS,GACvDgC,OAAO+C,oBAAoB,eAAgBzC,KAAKf,cAChDS,OAAO+C,oBAAoB,SAAUzC,KAAKR,aAC9C,EAEQ,YAAAN,SAAR,WACIT,aAAaiE,QAAQ,WAAY1C,KAAK5D,KAAKuG,YAC9ClE,aAAaiE,QAAQ,QAASE,KAAKC,UAAU7C,KAAKhE,QAC/CyC,aAAaiE,QAAQ,YAAa1C,KAAK/B,WACvCQ,aAAaiE,QAAQ,cAAe1C,KAAK9B,aACzCO,aAAaiE,QAAQ,iBAAkB1C,KAAKZ,eAAeuD,WAC/D,EAEQ,YAAA1B,gBAAR,WACIjB,KAAK5D,KAAO0G,SAASrE,aAAaqC,QAAQ,aAC1Cd,KAAK/B,UAAYQ,aAAaqC,QAAQ,aACtCd,KAAK9B,YAAcO,aAAaqC,QAAQ,eACxCd,KAAKhE,MAAQ4G,KAAKG,MAAMtE,aAAaqC,QAAQ,UAC7Cd,KAAKZ,eAAiB0D,SAASrE,aAAaqC,QAAQ,kBACxD,EAEO,YAAAkC,KAAP,WACIhD,KAAKrB,gBACLqB,KAAKd,WACLc,KAAKjB,YACLiB,KAAKpB,YACLoB,KAAKnB,kBACT,EAEQ,YAAA8B,SAAR,WACQX,KAAK1B,YACL0B,KAAKb,gBACLa,KAAKiD,cAAgBC,YAAYlD,KAAKb,cAAe,KACrDa,KAAK1B,UAAUH,UAAUgF,OAAO,QAExC,EAEQ,YAAAvE,UAAR,WACQoB,KAAKiD,gBACLG,cAAcpD,KAAKiD,eACnBjD,KAAK1B,UAAUH,UAAUC,IAAI,QAErC,EAEQ,YAAAS,iBAAR,WACQmB,KAAKM,kBACLN,KAAKM,gBAAgB/B,UAAY,IAEjCyB,KAAKK,gBACLL,KAAKK,cAAc9B,UAAY,GAEvC,EAtXe,EAAApC,QAAkB,EAClB,EAAA2B,KAAe,EAwYlC,C,CA3YA,GAAa,EAAA5B,KAAAA,EA6Yb,MAII,SAAYY,EAAWyE,GACnBvB,KAAKlD,EAAIA,EACTkD,KAAKuB,EAAIA,CACb,C,GCtZA8B,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBzE,IAAjB0E,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CJtBA,SACA,SAIIpI,EAAO4E,SAASC,eAAe,QAC/B5E,EAAY2E,SAASC,eAAe,UAEpC3E,EAAU0E,SAASC,eAAe,WAElC1E,EAASyE,SAASC,eAAe,SAErC5E,EAAU6G,iBAAiB,SAAS,YAChC/G,EAAW,IAAI,EAAAc,KAAK,QAAS,UAAW,QAAS,YAAa,gBACrD0E,KAAO,EAAAlF,SAASmF,QACzBzF,EAAS2D,UAAY,WACjB1D,EAAK8C,UAAUgF,OAAO,QACtB3H,EAAO2C,UAAUC,IAAI,QACrB7C,EAAQ4C,UAAUC,IAAI,OAC1B,EACAhD,EAASmF,QAETlF,EAAK8C,UAAUC,IAAI,QACnB5C,EAAO2C,UAAUgF,OAAO,QACxB5H,EAAQ4C,UAAUgF,OAAO,OAC7B,IAAG,GAEH5H,EAAQ4G,iBAAiB,SAAS,WAC9B/G,EAAS4H,MACb,IAAG,E","sources":["webpack:///./src/main.ts","webpack:///./src/dot.ts","webpack:///./src/game-mode.ts","webpack:///./src/game.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import { Game } from \"./game\";\r\nimport { GameMode } from \"./game-mode\";\r\n\r\nlet connect4: Game;\r\n\r\nlet menu = document.getElementById('menu');\r\nlet samePCBtn = document.getElementById('samePC');\r\n\r\nlet exitBtn = document.getElementById('exitBtn');\r\n\r\nlet canvas = document.getElementById('board');\r\n\r\nsamePCBtn.addEventListener('click', () => {\r\n    connect4 = new Game('board', 'exitBtn', 'timer', 'playerRed', 'playerGreen');\r\n    connect4.mode = GameMode.SAME_PC;\r\n    connect4.onGameEnd = () => {\r\n        menu.classList.remove('hide');\r\n        canvas.classList.add('hide');\r\n        exitBtn.classList.add('hide');\r\n    };\r\n    connect4.start();\r\n\r\n    menu.classList.add('hide');\r\n    canvas.classList.remove('hide');\r\n    exitBtn.classList.remove('hide');\r\n}, false);\r\n\r\nexitBtn.addEventListener('click', () => {\r\n    connect4.exit();\r\n}, false);","export enum Dot {\r\n    EMPTY = 0,\r\n    RED = 1,\r\n    GREEN = 2\r\n}","export enum GameMode {\r\n    SAME_PC = 1\r\n}","import { GameMode } from './game-mode';\r\nimport { Dot } from './dot';\r\n\r\nexport class Game {\r\n\r\n    private static columns: number = 9;\r\n    private static rows: number = 8;\r\n\r\n    private canvas: any;\r\n    private context: any;\r\n    private board: Array<Array<Dot>> = new Array(Game.columns);\r\n\r\n    private exitBtn: any;\r\n    private timerSpan: any;\r\n    private playerRedSpan: any;\r\n    private playerGreenSpan: any;\r\n\r\n    private turn: Dot = Dot.RED;\r\n\r\n    private playerRed: string;\r\n    private playerGreen: string;\r\n\r\n    public mode: GameMode;\r\n    public onGameEnd: Function;\r\n\r\n    private secondsRunning: number;\r\n    private timerInterval: any;\r\n\r\n    private circleRadius: number;\r\n    private rowGap: number;\r\n    private colGap: number;\r\n\r\n    constructor(canvasId: string,\r\n                exitBtnId: string = null,\r\n                timerId: string = null,\r\n                playerRedId: string = null,\r\n                playerGreenId: string = null) {\r\n        this.canvas = document.getElementById(canvasId);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // Initialise board with empty dots\r\n        for (let col = 0; col < Game.columns; col++) {\r\n            this.board[col] = new Array(Game.rows);\r\n            for (let row = 0; row < Game.rows; row++){\r\n                this.board[col][row] = Dot.EMPTY;\r\n            }\r\n        }\r\n\r\n        if (exitBtnId !== null) {\r\n            this.exitBtn = document.getElementById(exitBtnId);\r\n        }\r\n\r\n        if (timerId !== null) {\r\n            this.timerSpan = document.getElementById(timerId);\r\n            this.secondsRunning = 0;\r\n        }\r\n\r\n        if (playerRedId !== null) {\r\n            this.playerRedSpan = document.getElementById(playerRedId);\r\n        }\r\n\r\n        if (playerGreenId !== null) {\r\n            this.playerGreenSpan = document.getElementById(playerGreenId);\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.resizeCanvas();\r\n        this.checkGameData();\r\n        this.setUpPlayerNames();\r\n        this.setGameEvents();\r\n        this.setTimer();\r\n    }\r\n\r\n    private checkGameData(){\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            let board = localStorage.getItem('board');\r\n            let nextTurn = localStorage.getItem('nextTurn');\r\n            \r\n            if (board && nextTurn) {\r\n                let restore = confirm('Do you want to continue playing the previous game? OK/Cancel');\r\n                if (restore) {\r\n                    this.restoreLastGame();\r\n                } else {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setUpPlayerNames() {\r\n        if (this.mode === GameMode.SAME_PC) {\r\n            if (!localStorage.getItem('playerRed') || !localStorage.getItem('playerGreen')) {\r\n                this.playerRed = prompt('Please enter name for Red Player!');\r\n                this.playerGreen = prompt('Please enter name for Green Player!');\r\n            }\r\n        }\r\n\r\n        // Print player names on screen\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = this.playerGreen;\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = this.playerRed;\r\n        }\r\n    }\r\n\r\n    private paintBoard() {\r\n        let boardGradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n        boardGradient.addColorStop(0, 'blue');\r\n        boardGradient.addColorStop(1, 'aqua');\r\n        this.context.fillStyle = boardGradient;\r\n        this.context.fillRect(0, 70, this.canvas.width, this.canvas.height);\r\n\r\n        for (let col = Game.columns - 1; col >= 0; col--) {\r\n            for (let row = Game.rows - 1; row >= 0; row--) {\r\n                if (this.board[col][row] === Dot.RED) {\r\n                    this.context.fillStyle = 'red';\r\n                } else if (this.board[col][row] === Dot.GREEN) {\r\n                    this.context.fillStyle = 'greenyellow';\r\n                } else {\r\n                    this.context.fillStyle = 'black';\r\n                }\r\n\r\n                this.context.beginPath();\r\n                this.context.arc(50 + col * this.colGap, 150 + row * this.rowGap, this.circleRadius, 0, 2 * Math.PI);\r\n                this.context.closePath();\r\n                this.context.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCursorPosition(event): Position {\r\n        var x: number;\r\n        var y: number;\r\n        if (event.pageX !== undefined || event.pageY !== undefined) {\r\n            x = event.pageX;\r\n            y = event.pageY;\r\n        }\r\n        else {\r\n            x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        return new Position(x, y);\r\n    }\r\n\r\n    private setGameEvents() {\r\n        this.canvas.addEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.addEventListener('click', this.landDot, false);\r\n        window.addEventListener('beforeunload', this.beforeUnload);\r\n        window.addEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    private moveDot = (event) => {\r\n        this.clearUpper();\r\n\r\n        let position: Position = this.getCursorPosition(event);\r\n        let column = Math.round(position.x - 50) / this.colGap;\r\n        \r\n        if (this.turn == Dot.RED) {\r\n            this.context.fillStyle = 'red';\r\n        } else if (this.turn == Dot.GREEN) {\r\n            this.context.fillStyle = 'greenyellow';\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.context.arc(50 + column * this.colGap, this.rowGap - this.circleRadius, this.circleRadius, 0, 2 * Math.PI);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    private landDot = (event) => {\r\n        let position = this.getCursorPosition(event);\r\n        let column = Math.round((position.x - 50) / this.colGap);\r\n        let row: number;\r\n\r\n        if (this.board[column][0] === Dot.EMPTY) {\r\n\r\n            // Places the circle at the buttom of the column\r\n            for (var r = Game.rows - 1; r > -1; r--) {\r\n                if (this.board[column][r] === 0) {\r\n                    this.board[column][r] = this.turn;\r\n                    row = r;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (this.turn === Dot.RED) {\r\n                this.context.fillStyle = 'red';\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.context.fillStyle = 'greenyellow';\r\n            }\r\n            \r\n            // Draws the circle at the appropriate position\r\n            this.context.beginPath();\r\n            this.context.arc(50 + column * this.colGap, 150 + r * this.rowGap, this.circleRadius, 0, Math.PI * 2);\r\n            this.context.closePath();\r\n            this.context.fill();\r\n            \r\n            let dotCount = this.checkDotCount(column, row);\r\n\r\n            // Announce winner in case any player completes 4 Dots\r\n            if (dotCount > 3) {\r\n                let winner: string = '';\r\n                if (this.turn === Dot.RED) {\r\n                    winner = this.playerRed + ' (Red)';\r\n                } else if (this.turn === Dot.GREEN) {\r\n                    winner = this.playerGreen + ' (Green)';\r\n                }\r\n\r\n                if (this.exitBtn) {\r\n                    this.exitBtn.classList.add('hide');\r\n                }\r\n\r\n                let winMsg: string = winner + ' wins!';\r\n                if (this.timerSpan) {\r\n                    winMsg += '\\nTime taken: ' + this.timerSpan.innerText;\r\n                }\r\n                alert(winMsg);\r\n\r\n                // Clear game data\r\n                localStorage.clear();\r\n\r\n                this.cleanUpEvents();\r\n                this.stopTimer();\r\n                this.clearPlayerNames();\r\n\r\n                // Run delegate function to return to main menu, in case it is defined\r\n                if (this.onGameEnd !== undefined && this.onGameEnd !== null){\r\n                    setTimeout(this.onGameEnd, 3000);\r\n                }\r\n            }\r\n            \r\n            // Switches turn\r\n            if (this.turn === Dot.RED) {\r\n                this.turn = Dot.GREEN;\r\n            } else if (this.turn === Dot.GREEN) {\r\n                this.turn = Dot.RED;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private beforeUnload = () => {\r\n        this.saveGame();\r\n    };\r\n\r\n    private timerCallback = () => {\r\n        this.secondsRunning++;\r\n        let minutes: number = Math.floor(this.secondsRunning / 60);\r\n        let seconds: number = this.secondsRunning % 60;\r\n        this.timerSpan.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n    };\r\n\r\n    private clearUpper() {\r\n        this.context.clearRect(0, 0, this.canvas.width, 70);\r\n    }\r\n\r\n    private checkDotCount(column: number, row: number): number {\r\n        let count: number = row;\r\n        let dotCount: number = 0;\r\n\r\n        // Vertical check\r\n        while (dotCount < 4 && count < Game.rows && this.board[column][count] === this.turn) {\r\n            dotCount++;\r\n            count++;\r\n        }\r\n        \r\n        if (dotCount < 4) {\r\n\r\n            // Horizontal check\r\n            dotCount = 0;\r\n            count = column;\r\n            while (count < Game.columns && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count++;\r\n            }\r\n            count = column - 1;\r\n            while (count > -1 && this.board[count][row] === this.turn) {\r\n                dotCount++;\r\n                count--;\r\n            }\r\n        \r\n            // Diagonal checks\r\n            if (dotCount < 4) {\r\n                dotCount = 0;\r\n                let rowCount: number = row - 1;\r\n                let colCount: number = column + 1;\r\n                while (dotCount < 4 && rowCount > -1 &&  colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount++; //right columns\r\n                    rowCount--; //upper rows\r\n                }\r\n                colCount = column;\r\n                rowCount = row;\r\n                while (dotCount < 4 && rowCount < Game.rows && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                    dotCount++;\r\n                    colCount--; // left columns\r\n                    rowCount++; // lower rows\r\n                }\r\n                \r\n                if (dotCount < 4) {\r\n                    dotCount = 0;\r\n                    rowCount = row - 1;\r\n                    colCount = column - 1;\r\n                    while (dotCount < 4 && rowCount > -1 && colCount > -1 && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount--; // left columns\r\n                        rowCount--; // upper rows\r\n                    }\r\n                    colCount = column;\r\n                    rowCount = row;\r\n                    while (dotCount < 4 && rowCount < Game.rows && colCount < Game.columns && this.board[colCount][rowCount] === this.turn) {\r\n                        dotCount++;\r\n                        colCount++; // right columns\r\n                        rowCount++; // lower rows\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dotCount;\r\n    }\r\n\r\n    private cleanUpEvents() {\r\n        this.canvas.removeEventListener('mousemove', this.moveDot, false);\r\n        this.canvas.removeEventListener('click', this.landDot, false);\r\n        window.removeEventListener('beforeunload', this.beforeUnload);\r\n        window.removeEventListener('resize', this.resizeCanvas);\r\n    }\r\n\r\n    private saveGame() {\r\n        localStorage.setItem('nextTurn', this.turn.toString());\r\n\t    localStorage.setItem('board', JSON.stringify(this.board));\r\n        localStorage.setItem('playerRed', this.playerRed);\r\n        localStorage.setItem('playerGreen', this.playerGreen);\r\n        localStorage.setItem('secondsRunning', this.secondsRunning.toString());\r\n    }\r\n\r\n    private restoreLastGame() {\r\n        this.turn = parseInt(localStorage.getItem('nextTurn'));\r\n        this.playerRed = localStorage.getItem('playerRed');\r\n        this.playerGreen = localStorage.getItem('playerGreen');\r\n        this.board = JSON.parse(localStorage.getItem('board'));\r\n        this.secondsRunning = parseInt(localStorage.getItem('secondsRunning'));\r\n    }\r\n\r\n    public exit() {\r\n        this.cleanUpEvents();\r\n        this.saveGame();\r\n        this.onGameEnd();\r\n        this.stopTimer();\r\n        this.clearPlayerNames();\r\n    }\r\n\r\n    private setTimer() {\r\n        if (this.timerSpan) {\r\n            this.timerCallback();\r\n            this.timerInterval = setInterval(this.timerCallback, 1000);\r\n            this.timerSpan.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n            this.timerSpan.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    private clearPlayerNames() {\r\n        if (this.playerGreenSpan) {\r\n            this.playerGreenSpan.innerText = '';\r\n        }\r\n        if (this.playerRedSpan) {\r\n            this.playerRedSpan.innerText = '';\r\n        }\r\n    }\r\n\r\n    private resizeCanvas = () => {\r\n        this.canvas.height = window.innerHeight - 100;\r\n        this.canvas.width = window.innerWidth;\r\n\r\n        if (this.canvas.height > this.canvas.width) {\r\n            this.circleRadius = Math.max(this.canvas.width / Game.columns - 65, 10);\r\n            this.colGap = 65;\r\n            this.rowGap = this.canvas.height / Game.rows + this.circleRadius;\r\n        } else {\r\n            this.circleRadius = Math.max(this.canvas.height / Game.rows - 65, 10);\r\n            this.colGap = this.canvas.width / Game.columns + this.circleRadius;\r\n            this.rowGap = 65;\r\n        }\r\n\r\n        this.paintBoard();\r\n    }\r\n\r\n}\r\n\r\nclass Position {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["connect4","menu","samePCBtn","exitBtn","canvas","Dot","GameMode","canvasId","exitBtnId","timerId","playerRedId","playerGreenId","board","Array","Game","columns","turn","RED","moveDot","event","clearUpper","position","getCursorPosition","column","Math","round","x","colGap","context","fillStyle","GREEN","beginPath","arc","rowGap","circleRadius","PI","closePath","fill","landDot","row","EMPTY","r","rows","checkDotCount","winner","playerRed","playerGreen","classList","add","winMsg","timerSpan","innerText","alert","localStorage","clear","cleanUpEvents","stopTimer","clearPlayerNames","undefined","onGameEnd","setTimeout","beforeUnload","saveGame","timerCallback","secondsRunning","minutes","floor","seconds","resizeCanvas","height","window","innerHeight","width","innerWidth","max","paintBoard","this","document","getElementById","getContext","col","playerRedSpan","playerGreenSpan","start","checkGameData","setUpPlayerNames","setGameEvents","setTimer","mode","SAME_PC","getItem","nextTurn","confirm","restoreLastGame","prompt","boardGradient","createLinearGradient","addColorStop","fillRect","y","pageX","pageY","clientX","body","scrollLeft","documentElement","clientY","scrollTop","offsetLeft","offsetTop","Position","addEventListener","clearRect","count","dotCount","rowCount","colCount","removeEventListener","setItem","toString","JSON","stringify","parseInt","parse","exit","timerInterval","setInterval","remove","clearInterval","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}